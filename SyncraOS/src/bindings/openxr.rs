/* automatically generated by rust-bindgen 0.70.1 */

pub const XR_VERSION_1_0: u32 = 1;
pub const XR_PTR_SIZE: u32 = 8;
pub const XR_CPP_NULLPTR_SUPPORTED: u32 = 0;
pub const XR_MIN_COMPOSITION_LAYERS_SUPPORTED: u32 = 16;
pub const XR_NULL_HANDLE: u32 = 0;
pub const XR_NULL_SYSTEM_ID: u32 = 0;
pub const XR_NULL_PATH: u32 = 0;
pub const XR_NO_DURATION: u32 = 0;
pub const XR_INFINITE_DURATION: u64 = 9223372036854775807;
pub const XR_MIN_HAPTIC_DURATION: i32 = -1;
pub const XR_FREQUENCY_UNSPECIFIED: u32 = 0;
pub const XR_EXTENSION_ENUM_BASE: u32 = 1000000000;
pub const XR_EXTENSION_ENUM_STRIDE: u32 = 1000;
pub const XR_TRUE: u32 = 1;
pub const XR_FALSE: u32 = 0;
pub const XR_MAX_EXTENSION_NAME_SIZE: u32 = 128;
pub const XR_MAX_API_LAYER_NAME_SIZE: u32 = 256;
pub const XR_MAX_API_LAYER_DESCRIPTION_SIZE: u32 = 256;
pub const XR_MAX_SYSTEM_NAME_SIZE: u32 = 256;
pub const XR_MAX_APPLICATION_NAME_SIZE: u32 = 128;
pub const XR_MAX_ENGINE_NAME_SIZE: u32 = 128;
pub const XR_MAX_RUNTIME_NAME_SIZE: u32 = 128;
pub const XR_MAX_PATH_LENGTH: u32 = 256;
pub const XR_MAX_STRUCTURE_NAME_SIZE: u32 = 64;
pub const XR_MAX_RESULT_STRING_SIZE: u32 = 64;
pub const XR_MAX_ACTION_SET_NAME_SIZE: u32 = 64;
pub const XR_MAX_LOCALIZED_ACTION_SET_NAME_SIZE: u32 = 128;
pub const XR_MAX_ACTION_NAME_SIZE: u32 = 64;
pub const XR_MAX_LOCALIZED_ACTION_NAME_SIZE: u32 = 128;
pub const XR_VERSION_1_1: u32 = 1;
pub const XR_UUID_SIZE: u32 = 16;
pub const XR_KHR_composition_layer_cube: u32 = 1;
pub const XR_KHR_composition_layer_cube_SPEC_VERSION: u32 = 8;
pub const XR_KHR_COMPOSITION_LAYER_CUBE_EXTENSION_NAME: &[u8; 30] =
    b"XR_KHR_composition_layer_cube\0";
pub const XR_KHR_composition_layer_depth: u32 = 1;
pub const XR_KHR_composition_layer_depth_SPEC_VERSION: u32 = 6;
pub const XR_KHR_COMPOSITION_LAYER_DEPTH_EXTENSION_NAME: &[u8; 31] =
    b"XR_KHR_composition_layer_depth\0";
pub const XR_KHR_composition_layer_cylinder: u32 = 1;
pub const XR_KHR_composition_layer_cylinder_SPEC_VERSION: u32 = 4;
pub const XR_KHR_COMPOSITION_LAYER_CYLINDER_EXTENSION_NAME: &[u8; 34] =
    b"XR_KHR_composition_layer_cylinder\0";
pub const XR_KHR_composition_layer_equirect: u32 = 1;
pub const XR_KHR_composition_layer_equirect_SPEC_VERSION: u32 = 3;
pub const XR_KHR_COMPOSITION_LAYER_EQUIRECT_EXTENSION_NAME: &[u8; 34] =
    b"XR_KHR_composition_layer_equirect\0";
pub const XR_KHR_visibility_mask: u32 = 1;
pub const XR_KHR_visibility_mask_SPEC_VERSION: u32 = 2;
pub const XR_KHR_VISIBILITY_MASK_EXTENSION_NAME: &[u8; 23] = b"XR_KHR_visibility_mask\0";
pub const XR_KHR_composition_layer_color_scale_bias: u32 = 1;
pub const XR_KHR_composition_layer_color_scale_bias_SPEC_VERSION: u32 = 5;
pub const XR_KHR_COMPOSITION_LAYER_COLOR_SCALE_BIAS_EXTENSION_NAME: &[u8; 42] =
    b"XR_KHR_composition_layer_color_scale_bias\0";
pub const XR_KHR_loader_init: u32 = 1;
pub const XR_KHR_loader_init_SPEC_VERSION: u32 = 2;
pub const XR_KHR_LOADER_INIT_EXTENSION_NAME: &[u8; 19] = b"XR_KHR_loader_init\0";
pub const XR_KHR_composition_layer_equirect2: u32 = 1;
pub const XR_KHR_composition_layer_equirect2_SPEC_VERSION: u32 = 1;
pub const XR_KHR_COMPOSITION_LAYER_EQUIRECT2_EXTENSION_NAME: &[u8; 35] =
    b"XR_KHR_composition_layer_equirect2\0";
pub const XR_KHR_binding_modification: u32 = 1;
pub const XR_KHR_binding_modification_SPEC_VERSION: u32 = 1;
pub const XR_KHR_BINDING_MODIFICATION_EXTENSION_NAME: &[u8; 28] = b"XR_KHR_binding_modification\0";
pub const XR_KHR_swapchain_usage_input_attachment_bit: u32 = 1;
pub const XR_KHR_swapchain_usage_input_attachment_bit_SPEC_VERSION: u32 = 3;
pub const XR_KHR_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_EXTENSION_NAME: &[u8; 44] =
    b"XR_KHR_swapchain_usage_input_attachment_bit\0";
pub const XR_KHR_locate_spaces: u32 = 1;
pub const XR_KHR_locate_spaces_SPEC_VERSION: u32 = 1;
pub const XR_KHR_LOCATE_SPACES_EXTENSION_NAME: &[u8; 21] = b"XR_KHR_locate_spaces\0";
pub const XR_KHR_maintenance1: u32 = 1;
pub const XR_KHR_maintenance1_SPEC_VERSION: u32 = 1;
pub const XR_KHR_MAINTENANCE1_EXTENSION_NAME: &[u8; 20] = b"XR_KHR_maintenance1\0";
pub const XR_EXT_performance_settings: u32 = 1;
pub const XR_EXT_performance_settings_SPEC_VERSION: u32 = 4;
pub const XR_EXT_PERFORMANCE_SETTINGS_EXTENSION_NAME: &[u8; 28] = b"XR_EXT_performance_settings\0";
pub const XR_EXT_thermal_query: u32 = 1;
pub const XR_EXT_thermal_query_SPEC_VERSION: u32 = 2;
pub const XR_EXT_THERMAL_QUERY_EXTENSION_NAME: &[u8; 21] = b"XR_EXT_thermal_query\0";
pub const XR_EXT_debug_utils: u32 = 1;
pub const XR_EXT_debug_utils_SPEC_VERSION: u32 = 5;
pub const XR_EXT_DEBUG_UTILS_EXTENSION_NAME: &[u8; 19] = b"XR_EXT_debug_utils\0";
pub const XR_EXT_eye_gaze_interaction: u32 = 1;
pub const XR_EXT_eye_gaze_interaction_SPEC_VERSION: u32 = 2;
pub const XR_EXT_EYE_GAZE_INTERACTION_EXTENSION_NAME: &[u8; 28] = b"XR_EXT_eye_gaze_interaction\0";
pub const XR_EXTX_overlay: u32 = 1;
pub const XR_EXTX_overlay_SPEC_VERSION: u32 = 5;
pub const XR_EXTX_OVERLAY_EXTENSION_NAME: &[u8; 16] = b"XR_EXTX_overlay\0";
pub const XR_VARJO_quad_views: u32 = 1;
pub const XR_VARJO_quad_views_SPEC_VERSION: u32 = 2;
pub const XR_VARJO_QUAD_VIEWS_EXTENSION_NAME: &[u8; 20] = b"XR_VARJO_quad_views\0";
pub const XR_MSFT_unbounded_reference_space: u32 = 1;
pub const XR_MSFT_unbounded_reference_space_SPEC_VERSION: u32 = 1;
pub const XR_MSFT_UNBOUNDED_REFERENCE_SPACE_EXTENSION_NAME: &[u8; 34] =
    b"XR_MSFT_unbounded_reference_space\0";
pub const XR_MSFT_spatial_anchor: u32 = 1;
pub const XR_MSFT_spatial_anchor_SPEC_VERSION: u32 = 2;
pub const XR_MSFT_SPATIAL_ANCHOR_EXTENSION_NAME: &[u8; 23] = b"XR_MSFT_spatial_anchor\0";
pub const XR_FB_composition_layer_image_layout: u32 = 1;
pub const XR_FB_composition_layer_image_layout_SPEC_VERSION: u32 = 1;
pub const XR_FB_COMPOSITION_LAYER_IMAGE_LAYOUT_EXTENSION_NAME: &[u8; 37] =
    b"XR_FB_composition_layer_image_layout\0";
pub const XR_FB_composition_layer_alpha_blend: u32 = 1;
pub const XR_FB_composition_layer_alpha_blend_SPEC_VERSION: u32 = 3;
pub const XR_FB_COMPOSITION_LAYER_ALPHA_BLEND_EXTENSION_NAME: &[u8; 36] =
    b"XR_FB_composition_layer_alpha_blend\0";
pub const XR_MND_headless: u32 = 1;
pub const XR_MND_headless_SPEC_VERSION: u32 = 2;
pub const XR_MND_HEADLESS_EXTENSION_NAME: &[u8; 16] = b"XR_MND_headless\0";
pub const XR_OCULUS_android_session_state_enable: u32 = 1;
pub const XR_OCULUS_android_session_state_enable_SPEC_VERSION: u32 = 1;
pub const XR_OCULUS_ANDROID_SESSION_STATE_ENABLE_EXTENSION_NAME: &[u8; 39] =
    b"XR_OCULUS_android_session_state_enable\0";
pub const XR_EXT_view_configuration_depth_range: u32 = 1;
pub const XR_EXT_view_configuration_depth_range_SPEC_VERSION: u32 = 1;
pub const XR_EXT_VIEW_CONFIGURATION_DEPTH_RANGE_EXTENSION_NAME: &[u8; 38] =
    b"XR_EXT_view_configuration_depth_range\0";
pub const XR_EXT_conformance_automation: u32 = 1;
pub const XR_EXT_conformance_automation_SPEC_VERSION: u32 = 3;
pub const XR_EXT_CONFORMANCE_AUTOMATION_EXTENSION_NAME: &[u8; 30] =
    b"XR_EXT_conformance_automation\0";
pub const XR_MSFT_spatial_graph_bridge: u32 = 1;
pub const XR_GUID_SIZE_MSFT: u32 = 16;
pub const XR_MSFT_spatial_graph_bridge_SPEC_VERSION: u32 = 2;
pub const XR_MSFT_SPATIAL_GRAPH_BRIDGE_EXTENSION_NAME: &[u8; 29] =
    b"XR_MSFT_spatial_graph_bridge\0";
pub const XR_MSFT_hand_interaction: u32 = 1;
pub const XR_MSFT_hand_interaction_SPEC_VERSION: u32 = 1;
pub const XR_MSFT_HAND_INTERACTION_EXTENSION_NAME: &[u8; 25] = b"XR_MSFT_hand_interaction\0";
pub const XR_EXT_hand_tracking: u32 = 1;
pub const XR_HAND_JOINT_COUNT_EXT: u32 = 26;
pub const XR_EXT_hand_tracking_SPEC_VERSION: u32 = 4;
pub const XR_EXT_HAND_TRACKING_EXTENSION_NAME: &[u8; 21] = b"XR_EXT_hand_tracking\0";
pub const XR_MSFT_hand_tracking_mesh: u32 = 1;
pub const XR_MSFT_hand_tracking_mesh_SPEC_VERSION: u32 = 4;
pub const XR_MSFT_HAND_TRACKING_MESH_EXTENSION_NAME: &[u8; 27] = b"XR_MSFT_hand_tracking_mesh\0";
pub const XR_MSFT_secondary_view_configuration: u32 = 1;
pub const XR_MSFT_secondary_view_configuration_SPEC_VERSION: u32 = 1;
pub const XR_MSFT_SECONDARY_VIEW_CONFIGURATION_EXTENSION_NAME: &[u8; 37] =
    b"XR_MSFT_secondary_view_configuration\0";
pub const XR_MSFT_first_person_observer: u32 = 1;
pub const XR_MSFT_first_person_observer_SPEC_VERSION: u32 = 1;
pub const XR_MSFT_FIRST_PERSON_OBSERVER_EXTENSION_NAME: &[u8; 30] =
    b"XR_MSFT_first_person_observer\0";
pub const XR_MSFT_controller_model: u32 = 1;
pub const XR_NULL_CONTROLLER_MODEL_KEY_MSFT: u32 = 0;
pub const XR_MAX_CONTROLLER_MODEL_NODE_NAME_SIZE_MSFT: u32 = 64;
pub const XR_MSFT_controller_model_SPEC_VERSION: u32 = 2;
pub const XR_MSFT_CONTROLLER_MODEL_EXTENSION_NAME: &[u8; 25] = b"XR_MSFT_controller_model\0";
pub const XR_EXT_win32_appcontainer_compatible: u32 = 1;
pub const XR_EXT_win32_appcontainer_compatible_SPEC_VERSION: u32 = 1;
pub const XR_EXT_WIN32_APPCONTAINER_COMPATIBLE_EXTENSION_NAME: &[u8; 37] =
    b"XR_EXT_win32_appcontainer_compatible\0";
pub const XR_EPIC_view_configuration_fov: u32 = 1;
pub const XR_EPIC_view_configuration_fov_SPEC_VERSION: u32 = 2;
pub const XR_EPIC_VIEW_CONFIGURATION_FOV_EXTENSION_NAME: &[u8; 31] =
    b"XR_EPIC_view_configuration_fov\0";
pub const XR_MSFT_composition_layer_reprojection: u32 = 1;
pub const XR_MSFT_composition_layer_reprojection_SPEC_VERSION: u32 = 1;
pub const XR_MSFT_COMPOSITION_LAYER_REPROJECTION_EXTENSION_NAME: &[u8; 39] =
    b"XR_MSFT_composition_layer_reprojection\0";
pub const XR_HUAWEI_controller_interaction: u32 = 1;
pub const XR_HUAWEI_controller_interaction_SPEC_VERSION: u32 = 1;
pub const XR_HUAWEI_CONTROLLER_INTERACTION_EXTENSION_NAME: &[u8; 33] =
    b"XR_HUAWEI_controller_interaction\0";
pub const XR_FB_swapchain_update_state: u32 = 1;
pub const XR_FB_swapchain_update_state_SPEC_VERSION: u32 = 3;
pub const XR_FB_SWAPCHAIN_UPDATE_STATE_EXTENSION_NAME: &[u8; 29] =
    b"XR_FB_swapchain_update_state\0";
pub const XR_FB_composition_layer_secure_content: u32 = 1;
pub const XR_FB_composition_layer_secure_content_SPEC_VERSION: u32 = 1;
pub const XR_FB_COMPOSITION_LAYER_SECURE_CONTENT_EXTENSION_NAME: &[u8; 39] =
    b"XR_FB_composition_layer_secure_content\0";
pub const XR_FB_body_tracking: u32 = 1;
pub const XR_FB_body_tracking_SPEC_VERSION: u32 = 1;
pub const XR_FB_BODY_TRACKING_EXTENSION_NAME: &[u8; 20] = b"XR_FB_body_tracking\0";
pub const XR_EXT_dpad_binding: u32 = 1;
pub const XR_EXT_dpad_binding_SPEC_VERSION: u32 = 1;
pub const XR_EXT_DPAD_BINDING_EXTENSION_NAME: &[u8; 20] = b"XR_EXT_dpad_binding\0";
pub const XR_VALVE_analog_threshold: u32 = 1;
pub const XR_VALVE_analog_threshold_SPEC_VERSION: u32 = 2;
pub const XR_VALVE_ANALOG_THRESHOLD_EXTENSION_NAME: &[u8; 26] = b"XR_VALVE_analog_threshold\0";
pub const XR_EXT_hand_joints_motion_range: u32 = 1;
pub const XR_EXT_hand_joints_motion_range_SPEC_VERSION: u32 = 1;
pub const XR_EXT_HAND_JOINTS_MOTION_RANGE_EXTENSION_NAME: &[u8; 32] =
    b"XR_EXT_hand_joints_motion_range\0";
pub const XR_EXT_samsung_odyssey_controller: u32 = 1;
pub const XR_EXT_samsung_odyssey_controller_SPEC_VERSION: u32 = 1;
pub const XR_EXT_SAMSUNG_ODYSSEY_CONTROLLER_EXTENSION_NAME: &[u8; 34] =
    b"XR_EXT_samsung_odyssey_controller\0";
pub const XR_EXT_hp_mixed_reality_controller: u32 = 1;
pub const XR_EXT_hp_mixed_reality_controller_SPEC_VERSION: u32 = 1;
pub const XR_EXT_HP_MIXED_REALITY_CONTROLLER_EXTENSION_NAME: &[u8; 35] =
    b"XR_EXT_hp_mixed_reality_controller\0";
pub const XR_MND_swapchain_usage_input_attachment_bit: u32 = 1;
pub const XR_MND_swapchain_usage_input_attachment_bit_SPEC_VERSION: u32 = 2;
pub const XR_MND_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_EXTENSION_NAME: &[u8; 44] =
    b"XR_MND_swapchain_usage_input_attachment_bit\0";
pub const XR_MSFT_scene_understanding: u32 = 1;
pub const XR_MSFT_scene_understanding_SPEC_VERSION: u32 = 2;
pub const XR_MSFT_SCENE_UNDERSTANDING_EXTENSION_NAME: &[u8; 28] = b"XR_MSFT_scene_understanding\0";
pub const XR_MSFT_scene_understanding_serialization: u32 = 1;
pub const XR_MSFT_scene_understanding_serialization_SPEC_VERSION: u32 = 2;
pub const XR_MSFT_SCENE_UNDERSTANDING_SERIALIZATION_EXTENSION_NAME: &[u8; 42] =
    b"XR_MSFT_scene_understanding_serialization\0";
pub const XR_FB_display_refresh_rate: u32 = 1;
pub const XR_FB_display_refresh_rate_SPEC_VERSION: u32 = 1;
pub const XR_FB_DISPLAY_REFRESH_RATE_EXTENSION_NAME: &[u8; 27] = b"XR_FB_display_refresh_rate\0";
pub const XR_HTC_vive_cosmos_controller_interaction: u32 = 1;
pub const XR_HTC_vive_cosmos_controller_interaction_SPEC_VERSION: u32 = 1;
pub const XR_HTC_VIVE_COSMOS_CONTROLLER_INTERACTION_EXTENSION_NAME: &[u8; 42] =
    b"XR_HTC_vive_cosmos_controller_interaction\0";
pub const XR_HTCX_vive_tracker_interaction: u32 = 1;
pub const XR_HTCX_vive_tracker_interaction_SPEC_VERSION: u32 = 3;
pub const XR_HTCX_VIVE_TRACKER_INTERACTION_EXTENSION_NAME: &[u8; 33] =
    b"XR_HTCX_vive_tracker_interaction\0";
pub const XR_HTC_facial_tracking: u32 = 1;
pub const XR_FACIAL_EXPRESSION_EYE_COUNT_HTC: u32 = 14;
pub const XR_FACIAL_EXPRESSION_LIP_COUNT_HTC: u32 = 37;
pub const XR_HTC_facial_tracking_SPEC_VERSION: u32 = 3;
pub const XR_HTC_FACIAL_TRACKING_EXTENSION_NAME: &[u8; 23] = b"XR_HTC_facial_tracking\0";
pub const XR_HTC_vive_focus3_controller_interaction: u32 = 1;
pub const XR_HTC_vive_focus3_controller_interaction_SPEC_VERSION: u32 = 2;
pub const XR_HTC_VIVE_FOCUS3_CONTROLLER_INTERACTION_EXTENSION_NAME: &[u8; 42] =
    b"XR_HTC_vive_focus3_controller_interaction\0";
pub const XR_HTC_hand_interaction: u32 = 1;
pub const XR_HTC_hand_interaction_SPEC_VERSION: u32 = 1;
pub const XR_HTC_HAND_INTERACTION_EXTENSION_NAME: &[u8; 24] = b"XR_HTC_hand_interaction\0";
pub const XR_HTC_vive_wrist_tracker_interaction: u32 = 1;
pub const XR_HTC_vive_wrist_tracker_interaction_SPEC_VERSION: u32 = 1;
pub const XR_HTC_VIVE_WRIST_TRACKER_INTERACTION_EXTENSION_NAME: &[u8; 38] =
    b"XR_HTC_vive_wrist_tracker_interaction\0";
pub const XR_FB_color_space: u32 = 1;
pub const XR_FB_color_space_SPEC_VERSION: u32 = 3;
pub const XR_FB_COLOR_SPACE_EXTENSION_NAME: &[u8; 18] = b"XR_FB_color_space\0";
pub const XR_FB_hand_tracking_mesh: u32 = 1;
pub const XR_FB_hand_tracking_mesh_SPEC_VERSION: u32 = 3;
pub const XR_FB_HAND_TRACKING_MESH_EXTENSION_NAME: &[u8; 25] = b"XR_FB_hand_tracking_mesh\0";
pub const XR_FB_hand_tracking_aim: u32 = 1;
pub const XR_FB_hand_tracking_aim_SPEC_VERSION: u32 = 2;
pub const XR_FB_HAND_TRACKING_AIM_EXTENSION_NAME: &[u8; 24] = b"XR_FB_hand_tracking_aim\0";
pub const XR_FB_hand_tracking_capsules: u32 = 1;
pub const XR_HAND_TRACKING_CAPSULE_POINT_COUNT_FB: u32 = 2;
pub const XR_HAND_TRACKING_CAPSULE_COUNT_FB: u32 = 19;
pub const XR_FB_hand_tracking_capsules_SPEC_VERSION: u32 = 3;
pub const XR_FB_HAND_TRACKING_CAPSULES_EXTENSION_NAME: &[u8; 29] =
    b"XR_FB_hand_tracking_capsules\0";
pub const XR_FB_HAND_TRACKING_CAPSULE_POINT_COUNT: u32 = 2;
pub const XR_FB_HAND_TRACKING_CAPSULE_COUNT: u32 = 19;
pub const XR_FB_spatial_entity: u32 = 1;
pub const XR_FB_spatial_entity_SPEC_VERSION: u32 = 3;
pub const XR_FB_SPATIAL_ENTITY_EXTENSION_NAME: &[u8; 21] = b"XR_FB_spatial_entity\0";
pub const XR_FB_foveation: u32 = 1;
pub const XR_FB_foveation_SPEC_VERSION: u32 = 1;
pub const XR_FB_FOVEATION_EXTENSION_NAME: &[u8; 16] = b"XR_FB_foveation\0";
pub const XR_FB_foveation_configuration: u32 = 1;
pub const XR_FB_foveation_configuration_SPEC_VERSION: u32 = 1;
pub const XR_FB_FOVEATION_CONFIGURATION_EXTENSION_NAME: &[u8; 30] =
    b"XR_FB_foveation_configuration\0";
pub const XR_FB_keyboard_tracking: u32 = 1;
pub const XR_MAX_KEYBOARD_TRACKING_NAME_SIZE_FB: u32 = 128;
pub const XR_FB_keyboard_tracking_SPEC_VERSION: u32 = 1;
pub const XR_FB_KEYBOARD_TRACKING_EXTENSION_NAME: &[u8; 24] = b"XR_FB_keyboard_tracking\0";
pub const XR_FB_triangle_mesh: u32 = 1;
pub const XR_FB_triangle_mesh_SPEC_VERSION: u32 = 2;
pub const XR_FB_TRIANGLE_MESH_EXTENSION_NAME: &[u8; 20] = b"XR_FB_triangle_mesh\0";
pub const XR_FB_passthrough: u32 = 1;
pub const XR_PASSTHROUGH_COLOR_MAP_MONO_SIZE_FB: u32 = 256;
pub const XR_FB_passthrough_SPEC_VERSION: u32 = 4;
pub const XR_FB_PASSTHROUGH_EXTENSION_NAME: &[u8; 18] = b"XR_FB_passthrough\0";
pub const XR_FB_render_model: u32 = 1;
pub const XR_NULL_RENDER_MODEL_KEY_FB: u32 = 0;
pub const XR_MAX_RENDER_MODEL_NAME_SIZE_FB: u32 = 64;
pub const XR_FB_render_model_SPEC_VERSION: u32 = 4;
pub const XR_FB_RENDER_MODEL_EXTENSION_NAME: &[u8; 19] = b"XR_FB_render_model\0";
pub const XR_VARJO_foveated_rendering: u32 = 1;
pub const XR_VARJO_foveated_rendering_SPEC_VERSION: u32 = 3;
pub const XR_VARJO_FOVEATED_RENDERING_EXTENSION_NAME: &[u8; 28] = b"XR_VARJO_foveated_rendering\0";
pub const XR_VARJO_composition_layer_depth_test: u32 = 1;
pub const XR_VARJO_composition_layer_depth_test_SPEC_VERSION: u32 = 2;
pub const XR_VARJO_COMPOSITION_LAYER_DEPTH_TEST_EXTENSION_NAME: &[u8; 38] =
    b"XR_VARJO_composition_layer_depth_test\0";
pub const XR_VARJO_environment_depth_estimation: u32 = 1;
pub const XR_VARJO_environment_depth_estimation_SPEC_VERSION: u32 = 1;
pub const XR_VARJO_ENVIRONMENT_DEPTH_ESTIMATION_EXTENSION_NAME: &[u8; 38] =
    b"XR_VARJO_environment_depth_estimation\0";
pub const XR_VARJO_marker_tracking: u32 = 1;
pub const XR_VARJO_marker_tracking_SPEC_VERSION: u32 = 1;
pub const XR_VARJO_MARKER_TRACKING_EXTENSION_NAME: &[u8; 25] = b"XR_VARJO_marker_tracking\0";
pub const XR_VARJO_view_offset: u32 = 1;
pub const XR_VARJO_view_offset_SPEC_VERSION: u32 = 1;
pub const XR_VARJO_VIEW_OFFSET_EXTENSION_NAME: &[u8; 21] = b"XR_VARJO_view_offset\0";
pub const XR_VARJO_xr4_controller_interaction: u32 = 1;
pub const XR_VARJO_xr4_controller_interaction_SPEC_VERSION: u32 = 2;
pub const XR_VARJO_XR4_CONTROLLER_INTERACTION_EXTENSION_NAME: &[u8; 36] =
    b"XR_VARJO_xr4_controller_interaction\0";
pub const XR_ML_ml2_controller_interaction: u32 = 1;
pub const XR_ML_ml2_controller_interaction_SPEC_VERSION: u32 = 1;
pub const XR_ML_ML2_CONTROLLER_INTERACTION_EXTENSION_NAME: &[u8; 33] =
    b"XR_ML_ml2_controller_interaction\0";
pub const XR_ML_frame_end_info: u32 = 1;
pub const XR_ML_frame_end_info_SPEC_VERSION: u32 = 1;
pub const XR_ML_FRAME_END_INFO_EXTENSION_NAME: &[u8; 21] = b"XR_ML_frame_end_info\0";
pub const XR_ML_global_dimmer: u32 = 1;
pub const XR_ML_global_dimmer_SPEC_VERSION: u32 = 1;
pub const XR_ML_GLOBAL_DIMMER_EXTENSION_NAME: &[u8; 20] = b"XR_ML_global_dimmer\0";
pub const XR_ML_marker_understanding: u32 = 1;
pub const XR_ML_marker_understanding_SPEC_VERSION: u32 = 1;
pub const XR_ML_MARKER_UNDERSTANDING_EXTENSION_NAME: &[u8; 27] = b"XR_ML_marker_understanding\0";
pub const XR_ML_localization_map: u32 = 1;
pub const XR_MAX_LOCALIZATION_MAP_NAME_LENGTH_ML: u32 = 64;
pub const XR_ML_localization_map_SPEC_VERSION: u32 = 1;
pub const XR_ML_LOCALIZATION_MAP_EXTENSION_NAME: &[u8; 23] = b"XR_ML_localization_map\0";
pub const XR_ML_spatial_anchors: u32 = 1;
pub const XR_ML_spatial_anchors_SPEC_VERSION: u32 = 1;
pub const XR_ML_SPATIAL_ANCHORS_EXTENSION_NAME: &[u8; 22] = b"XR_ML_spatial_anchors\0";
pub const XR_ML_spatial_anchors_storage: u32 = 1;
pub const XR_ML_spatial_anchors_storage_SPEC_VERSION: u32 = 1;
pub const XR_ML_SPATIAL_ANCHORS_STORAGE_EXTENSION_NAME: &[u8; 30] =
    b"XR_ML_spatial_anchors_storage\0";
pub const XR_MSFT_spatial_anchor_persistence: u32 = 1;
pub const XR_MAX_SPATIAL_ANCHOR_NAME_SIZE_MSFT: u32 = 256;
pub const XR_MSFT_spatial_anchor_persistence_SPEC_VERSION: u32 = 2;
pub const XR_MSFT_SPATIAL_ANCHOR_PERSISTENCE_EXTENSION_NAME: &[u8; 35] =
    b"XR_MSFT_spatial_anchor_persistence\0";
pub const XR_MSFT_scene_marker: u32 = 1;
pub const XR_MSFT_scene_marker_SPEC_VERSION: u32 = 1;
pub const XR_MSFT_SCENE_MARKER_EXTENSION_NAME: &[u8; 21] = b"XR_MSFT_scene_marker\0";
pub const XR_ULTRALEAP_hand_tracking_forearm: u32 = 1;
pub const XR_HAND_FOREARM_JOINT_COUNT_ULTRALEAP: u32 = 27;
pub const XR_ULTRALEAP_hand_tracking_forearm_SPEC_VERSION: u32 = 1;
pub const XR_ULTRALEAP_HAND_TRACKING_FOREARM_EXTENSION_NAME: &[u8; 35] =
    b"XR_ULTRALEAP_hand_tracking_forearm\0";
pub const XR_FB_spatial_entity_query: u32 = 1;
pub const XR_FB_spatial_entity_query_SPEC_VERSION: u32 = 1;
pub const XR_FB_SPATIAL_ENTITY_QUERY_EXTENSION_NAME: &[u8; 27] = b"XR_FB_spatial_entity_query\0";
pub const XR_FB_spatial_entity_storage: u32 = 1;
pub const XR_FB_spatial_entity_storage_SPEC_VERSION: u32 = 1;
pub const XR_FB_SPATIAL_ENTITY_STORAGE_EXTENSION_NAME: &[u8; 29] =
    b"XR_FB_spatial_entity_storage\0";
pub const XR_FB_touch_controller_pro: u32 = 1;
pub const XR_FB_touch_controller_pro_SPEC_VERSION: u32 = 1;
pub const XR_FB_TOUCH_CONTROLLER_PRO_EXTENSION_NAME: &[u8; 27] = b"XR_FB_touch_controller_pro\0";
pub const XR_FB_spatial_entity_sharing: u32 = 1;
pub const XR_FB_spatial_entity_sharing_SPEC_VERSION: u32 = 1;
pub const XR_FB_SPATIAL_ENTITY_SHARING_EXTENSION_NAME: &[u8; 29] =
    b"XR_FB_spatial_entity_sharing\0";
pub const XR_FB_space_warp: u32 = 1;
pub const XR_FB_space_warp_SPEC_VERSION: u32 = 2;
pub const XR_FB_SPACE_WARP_EXTENSION_NAME: &[u8; 17] = b"XR_FB_space_warp\0";
pub const XR_FB_haptic_amplitude_envelope: u32 = 1;
pub const XR_MAX_HAPTIC_AMPLITUDE_ENVELOPE_SAMPLES_FB: u32 = 4000;
pub const XR_FB_haptic_amplitude_envelope_SPEC_VERSION: u32 = 1;
pub const XR_FB_HAPTIC_AMPLITUDE_ENVELOPE_EXTENSION_NAME: &[u8; 32] =
    b"XR_FB_haptic_amplitude_envelope\0";
pub const XR_FB_scene: u32 = 1;
pub const XR_FB_scene_SPEC_VERSION: u32 = 4;
pub const XR_FB_SCENE_EXTENSION_NAME: &[u8; 12] = b"XR_FB_scene\0";
pub const XR_EXT_palm_pose: u32 = 1;
pub const XR_EXT_palm_pose_SPEC_VERSION: u32 = 3;
pub const XR_EXT_PALM_POSE_EXTENSION_NAME: &[u8; 17] = b"XR_EXT_palm_pose\0";
pub const XR_ALMALENCE_digital_lens_control: u32 = 1;
pub const XR_ALMALENCE_digital_lens_control_SPEC_VERSION: u32 = 1;
pub const XR_ALMALENCE_DIGITAL_LENS_CONTROL_EXTENSION_NAME: &[u8; 34] =
    b"XR_ALMALENCE_digital_lens_control\0";
pub const XR_FB_scene_capture: u32 = 1;
pub const XR_FB_scene_capture_SPEC_VERSION: u32 = 1;
pub const XR_FB_SCENE_CAPTURE_EXTENSION_NAME: &[u8; 20] = b"XR_FB_scene_capture\0";
pub const XR_FB_spatial_entity_container: u32 = 1;
pub const XR_FB_spatial_entity_container_SPEC_VERSION: u32 = 2;
pub const XR_FB_SPATIAL_ENTITY_CONTAINER_EXTENSION_NAME: &[u8; 31] =
    b"XR_FB_spatial_entity_container\0";
pub const XR_META_foveation_eye_tracked: u32 = 1;
pub const XR_FOVEATION_CENTER_SIZE_META: u32 = 2;
pub const XR_META_foveation_eye_tracked_SPEC_VERSION: u32 = 1;
pub const XR_META_FOVEATION_EYE_TRACKED_EXTENSION_NAME: &[u8; 30] =
    b"XR_META_foveation_eye_tracked\0";
pub const XR_FB_face_tracking: u32 = 1;
pub const XR_FB_face_tracking_SPEC_VERSION: u32 = 1;
pub const XR_FB_FACE_TRACKING_EXTENSION_NAME: &[u8; 20] = b"XR_FB_face_tracking\0";
pub const XR_FB_eye_tracking_social: u32 = 1;
pub const XR_FB_eye_tracking_social_SPEC_VERSION: u32 = 1;
pub const XR_FB_EYE_TRACKING_SOCIAL_EXTENSION_NAME: &[u8; 26] = b"XR_FB_eye_tracking_social\0";
pub const XR_FB_passthrough_keyboard_hands: u32 = 1;
pub const XR_FB_passthrough_keyboard_hands_SPEC_VERSION: u32 = 2;
pub const XR_FB_PASSTHROUGH_KEYBOARD_HANDS_EXTENSION_NAME: &[u8; 33] =
    b"XR_FB_passthrough_keyboard_hands\0";
pub const XR_FB_composition_layer_settings: u32 = 1;
pub const XR_FB_composition_layer_settings_SPEC_VERSION: u32 = 1;
pub const XR_FB_COMPOSITION_LAYER_SETTINGS_EXTENSION_NAME: &[u8; 33] =
    b"XR_FB_composition_layer_settings\0";
pub const XR_FB_touch_controller_proximity: u32 = 1;
pub const XR_FB_touch_controller_proximity_SPEC_VERSION: u32 = 1;
pub const XR_FB_TOUCH_CONTROLLER_PROXIMITY_EXTENSION_NAME: &[u8; 33] =
    b"XR_FB_touch_controller_proximity\0";
pub const XR_FB_haptic_pcm: u32 = 1;
pub const XR_MAX_HAPTIC_PCM_BUFFER_SIZE_FB: u32 = 4000;
pub const XR_FB_haptic_pcm_SPEC_VERSION: u32 = 1;
pub const XR_FB_HAPTIC_PCM_EXTENSION_NAME: &[u8; 17] = b"XR_FB_haptic_pcm\0";
pub const XR_FB_composition_layer_depth_test: u32 = 1;
pub const XR_FB_composition_layer_depth_test_SPEC_VERSION: u32 = 1;
pub const XR_FB_COMPOSITION_LAYER_DEPTH_TEST_EXTENSION_NAME: &[u8; 35] =
    b"XR_FB_composition_layer_depth_test\0";
pub const XR_META_local_dimming: u32 = 1;
pub const XR_META_local_dimming_SPEC_VERSION: u32 = 1;
pub const XR_META_LOCAL_DIMMING_EXTENSION_NAME: &[u8; 22] = b"XR_META_local_dimming\0";
pub const XR_META_passthrough_preferences: u32 = 1;
pub const XR_META_passthrough_preferences_SPEC_VERSION: u32 = 1;
pub const XR_META_PASSTHROUGH_PREFERENCES_EXTENSION_NAME: &[u8; 32] =
    b"XR_META_passthrough_preferences\0";
pub const XR_META_virtual_keyboard: u32 = 1;
pub const XR_MAX_VIRTUAL_KEYBOARD_COMMIT_TEXT_SIZE_META: u32 = 3992;
pub const XR_META_virtual_keyboard_SPEC_VERSION: u32 = 1;
pub const XR_META_VIRTUAL_KEYBOARD_EXTENSION_NAME: &[u8; 25] = b"XR_META_virtual_keyboard\0";
pub const XR_OCULUS_external_camera: u32 = 1;
pub const XR_MAX_EXTERNAL_CAMERA_NAME_SIZE_OCULUS: u32 = 32;
pub const XR_OCULUS_external_camera_SPEC_VERSION: u32 = 1;
pub const XR_OCULUS_EXTERNAL_CAMERA_EXTENSION_NAME: &[u8; 26] = b"XR_OCULUS_external_camera\0";
pub const XR_META_performance_metrics: u32 = 1;
pub const XR_META_performance_metrics_SPEC_VERSION: u32 = 2;
pub const XR_META_PERFORMANCE_METRICS_EXTENSION_NAME: &[u8; 28] = b"XR_META_performance_metrics\0";
pub const XR_FB_spatial_entity_storage_batch: u32 = 1;
pub const XR_FB_spatial_entity_storage_batch_SPEC_VERSION: u32 = 1;
pub const XR_FB_SPATIAL_ENTITY_STORAGE_BATCH_EXTENSION_NAME: &[u8; 35] =
    b"XR_FB_spatial_entity_storage_batch\0";
pub const XR_FB_spatial_entity_user: u32 = 1;
pub const XR_FB_spatial_entity_user_SPEC_VERSION: u32 = 1;
pub const XR_FB_SPATIAL_ENTITY_USER_EXTENSION_NAME: &[u8; 26] = b"XR_FB_spatial_entity_user\0";
pub const XR_META_headset_id: u32 = 1;
pub const XR_META_headset_id_SPEC_VERSION: u32 = 2;
pub const XR_META_HEADSET_ID_EXTENSION_NAME: &[u8; 19] = b"XR_META_headset_id\0";
pub const XR_META_recommended_layer_resolution: u32 = 1;
pub const XR_META_recommended_layer_resolution_SPEC_VERSION: u32 = 1;
pub const XR_META_RECOMMENDED_LAYER_RESOLUTION_EXTENSION_NAME: &[u8; 37] =
    b"XR_META_recommended_layer_resolution\0";
pub const XR_META_passthrough_color_lut: u32 = 1;
pub const XR_META_passthrough_color_lut_SPEC_VERSION: u32 = 1;
pub const XR_META_PASSTHROUGH_COLOR_LUT_EXTENSION_NAME: &[u8; 30] =
    b"XR_META_passthrough_color_lut\0";
pub const XR_META_spatial_entity_mesh: u32 = 1;
pub const XR_META_spatial_entity_mesh_SPEC_VERSION: u32 = 1;
pub const XR_META_SPATIAL_ENTITY_MESH_EXTENSION_NAME: &[u8; 28] = b"XR_META_spatial_entity_mesh\0";
pub const XR_META_automatic_layer_filter: u32 = 1;
pub const XR_META_automatic_layer_filter_SPEC_VERSION: u32 = 1;
pub const XR_META_AUTOMATIC_LAYER_FILTER_EXTENSION_NAME: &[u8; 31] =
    b"XR_META_automatic_layer_filter\0";
pub const XR_META_touch_controller_plus: u32 = 1;
pub const XR_META_touch_controller_plus_SPEC_VERSION: u32 = 1;
pub const XR_META_TOUCH_CONTROLLER_PLUS_EXTENSION_NAME: &[u8; 30] =
    b"XR_META_touch_controller_plus\0";
pub const XR_META_passthrough_layer_resumed_event: u32 = 1;
pub const XR_META_passthrough_layer_resumed_event_SPEC_VERSION: u32 = 1;
pub const XR_META_PASSTHROUGH_LAYER_RESUMED_EVENT_EXTENSION_NAME: &[u8; 40] =
    b"XR_META_passthrough_layer_resumed_event\0";
pub const XR_FB_face_tracking2: u32 = 1;
pub const XR_FB_face_tracking2_SPEC_VERSION: u32 = 1;
pub const XR_FB_FACE_TRACKING2_EXTENSION_NAME: &[u8; 21] = b"XR_FB_face_tracking2\0";
pub const XR_META_spatial_entity_sharing: u32 = 1;
pub const XR_META_spatial_entity_sharing_SPEC_VERSION: u32 = 1;
pub const XR_META_SPATIAL_ENTITY_SHARING_EXTENSION_NAME: &[u8; 31] =
    b"XR_META_spatial_entity_sharing\0";
pub const XR_MAX_SPACES_PER_SHARE_REQUEST_META: u32 = 32;
pub const XR_META_environment_depth: u32 = 1;
pub const XR_META_environment_depth_SPEC_VERSION: u32 = 1;
pub const XR_META_ENVIRONMENT_DEPTH_EXTENSION_NAME: &[u8; 26] = b"XR_META_environment_depth\0";
pub const XR_EXT_uuid: u32 = 1;
pub const XR_EXT_uuid_SPEC_VERSION: u32 = 1;
pub const XR_EXT_UUID_EXTENSION_NAME: &[u8; 12] = b"XR_EXT_uuid\0";
pub const XR_UUID_SIZE_EXT: u32 = 16;
pub const XR_EXT_hand_interaction: u32 = 1;
pub const XR_EXT_hand_interaction_SPEC_VERSION: u32 = 1;
pub const XR_EXT_HAND_INTERACTION_EXTENSION_NAME: &[u8; 24] = b"XR_EXT_hand_interaction\0";
pub const XR_QCOM_tracking_optimization_settings: u32 = 1;
pub const XR_QCOM_tracking_optimization_settings_SPEC_VERSION: u32 = 1;
pub const XR_QCOM_TRACKING_OPTIMIZATION_SETTINGS_EXTENSION_NAME: &[u8; 39] =
    b"XR_QCOM_tracking_optimization_settings\0";
pub const XR_HTC_passthrough: u32 = 1;
pub const XR_HTC_passthrough_SPEC_VERSION: u32 = 1;
pub const XR_HTC_PASSTHROUGH_EXTENSION_NAME: &[u8; 19] = b"XR_HTC_passthrough\0";
pub const XR_HTC_foveation: u32 = 1;
pub const XR_HTC_foveation_SPEC_VERSION: u32 = 1;
pub const XR_HTC_FOVEATION_EXTENSION_NAME: &[u8; 17] = b"XR_HTC_foveation\0";
pub const XR_HTC_anchor: u32 = 1;
pub const XR_MAX_SPATIAL_ANCHOR_NAME_SIZE_HTC: u32 = 256;
pub const XR_HTC_anchor_SPEC_VERSION: u32 = 1;
pub const XR_HTC_ANCHOR_EXTENSION_NAME: &[u8; 14] = b"XR_HTC_anchor\0";
pub const XR_HTC_body_tracking: u32 = 1;
pub const XR_BODY_JOINT_COUNT_HTC: u32 = 26;
pub const XR_HTC_body_tracking_SPEC_VERSION: u32 = 1;
pub const XR_HTC_BODY_TRACKING_EXTENSION_NAME: &[u8; 21] = b"XR_HTC_body_tracking\0";
pub const XR_EXT_active_action_set_priority: u32 = 1;
pub const XR_EXT_active_action_set_priority_SPEC_VERSION: u32 = 1;
pub const XR_EXT_ACTIVE_ACTION_SET_PRIORITY_EXTENSION_NAME: &[u8; 34] =
    b"XR_EXT_active_action_set_priority\0";
pub const XR_MNDX_force_feedback_curl: u32 = 1;
pub const XR_MNDX_force_feedback_curl_SPEC_VERSION: u32 = 1;
pub const XR_MNDX_FORCE_FEEDBACK_CURL_EXTENSION_NAME: &[u8; 28] = b"XR_MNDX_force_feedback_curl\0";
pub const XR_BD_controller_interaction: u32 = 1;
pub const XR_BD_controller_interaction_SPEC_VERSION: u32 = 2;
pub const XR_BD_CONTROLLER_INTERACTION_EXTENSION_NAME: &[u8; 29] =
    b"XR_BD_controller_interaction\0";
pub const XR_EXT_local_floor: u32 = 1;
pub const XR_EXT_local_floor_SPEC_VERSION: u32 = 1;
pub const XR_EXT_LOCAL_FLOOR_EXTENSION_NAME: &[u8; 19] = b"XR_EXT_local_floor\0";
pub const XR_EXT_hand_tracking_data_source: u32 = 1;
pub const XR_EXT_hand_tracking_data_source_SPEC_VERSION: u32 = 1;
pub const XR_EXT_HAND_TRACKING_DATA_SOURCE_EXTENSION_NAME: &[u8; 33] =
    b"XR_EXT_hand_tracking_data_source\0";
pub const XR_EXT_plane_detection: u32 = 1;
pub const XR_EXT_plane_detection_SPEC_VERSION: u32 = 2;
pub const XR_EXT_PLANE_DETECTION_EXTENSION_NAME: &[u8; 23] = b"XR_EXT_plane_detection\0";
pub const XR_OPPO_controller_interaction: u32 = 1;
pub const XR_OPPO_controller_interaction_SPEC_VERSION: u32 = 1;
pub const XR_OPPO_CONTROLLER_INTERACTION_EXTENSION_NAME: &[u8; 31] =
    b"XR_OPPO_controller_interaction\0";
pub const XR_EXT_future: u32 = 1;
pub const XR_EXT_future_SPEC_VERSION: u32 = 1;
pub const XR_EXT_FUTURE_EXTENSION_NAME: &[u8; 14] = b"XR_EXT_future\0";
pub const XR_NULL_FUTURE_EXT: u32 = 0;
pub const XR_EXT_user_presence: u32 = 1;
pub const XR_EXT_user_presence_SPEC_VERSION: u32 = 1;
pub const XR_EXT_USER_PRESENCE_EXTENSION_NAME: &[u8; 21] = b"XR_EXT_user_presence\0";
pub const XR_ML_user_calibration: u32 = 1;
pub const XR_ML_user_calibration_SPEC_VERSION: u32 = 1;
pub const XR_ML_USER_CALIBRATION_EXTENSION_NAME: &[u8; 23] = b"XR_ML_user_calibration\0";
pub const XR_ML_system_notifications: u32 = 1;
pub const XR_ML_system_notifications_SPEC_VERSION: u32 = 1;
pub const XR_ML_SYSTEM_NOTIFICATIONS_EXTENSION_NAME: &[u8; 27] = b"XR_ML_system_notifications\0";
pub const XR_ML_world_mesh_detection: u32 = 1;
pub const XR_ML_world_mesh_detection_SPEC_VERSION: u32 = 1;
pub const XR_ML_WORLD_MESH_DETECTION_EXTENSION_NAME: &[u8; 27] = b"XR_ML_world_mesh_detection\0";
pub const XR_ML_facial_expression: u32 = 1;
pub const XR_ML_facial_expression_SPEC_VERSION: u32 = 1;
pub const XR_ML_FACIAL_EXPRESSION_EXTENSION_NAME: &[u8; 24] = b"XR_ML_facial_expression\0";
pub const XR_ML_view_configuration_depth_range_change: u32 = 1;
pub const XR_ML_view_configuration_depth_range_change_SPEC_VERSION: u32 = 1;
pub const XR_ML_VIEW_CONFIGURATION_DEPTH_RANGE_CHANGE_EXTENSION_NAME: &[u8; 44] =
    b"XR_ML_view_configuration_depth_range_change\0";
pub const XR_YVR_controller_interaction: u32 = 1;
pub const XR_YVR_controller_interaction_SPEC_VERSION: u32 = 1;
pub const XR_YVR_CONTROLLER_INTERACTION_EXTENSION_NAME: &[u8; 30] =
    b"XR_YVR_controller_interaction\0";
pub const XR_EXT_composition_layer_inverted_alpha: u32 = 1;
pub const XR_EXT_composition_layer_inverted_alpha_SPEC_VERSION: u32 = 1;
pub const XR_EXT_COMPOSITION_LAYER_INVERTED_ALPHA_EXTENSION_NAME: &[u8; 40] =
    b"XR_EXT_composition_layer_inverted_alpha\0";
pub const XR_META_colocation_discovery: u32 = 1;
pub const XR_MAX_COLOCATION_DISCOVERY_BUFFER_SIZE_META: u32 = 1024;
pub const XR_META_colocation_discovery_SPEC_VERSION: u32 = 1;
pub const XR_META_COLOCATION_DISCOVERY_EXTENSION_NAME: &[u8; 29] =
    b"XR_META_colocation_discovery\0";
pub const XR_META_spatial_entity_group_sharing: u32 = 1;
pub const XR_META_spatial_entity_group_sharing_SPEC_VERSION: u32 = 1;
pub const XR_META_SPATIAL_ENTITY_GROUP_SHARING_EXTENSION_NAME: &[u8; 37] =
    b"XR_META_spatial_entity_group_sharing\0";
pub type XrVersion = u64;
pub type XrFlags64 = u64;
pub type XrSystemId = u64;
pub type XrBool32 = u32;
pub type XrPath = u64;
pub type XrTime = i64;
pub type XrDuration = i64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrInstance_T {
    _unused: [u8; 0],
}
pub type XrInstance = *mut XrInstance_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSession_T {
    _unused: [u8; 0],
}
pub type XrSession = *mut XrSession_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpace_T {
    _unused: [u8; 0],
}
pub type XrSpace = *mut XrSpace_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrAction_T {
    _unused: [u8; 0],
}
pub type XrAction = *mut XrAction_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchain_T {
    _unused: [u8; 0],
}
pub type XrSwapchain = *mut XrSwapchain_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionSet_T {
    _unused: [u8; 0],
}
pub type XrActionSet = *mut XrActionSet_T;
pub const XrResult_XR_SUCCESS: XrResult = 0;
pub const XrResult_XR_TIMEOUT_EXPIRED: XrResult = 1;
pub const XrResult_XR_SESSION_LOSS_PENDING: XrResult = 3;
pub const XrResult_XR_EVENT_UNAVAILABLE: XrResult = 4;
pub const XrResult_XR_SPACE_BOUNDS_UNAVAILABLE: XrResult = 7;
pub const XrResult_XR_SESSION_NOT_FOCUSED: XrResult = 8;
pub const XrResult_XR_FRAME_DISCARDED: XrResult = 9;
pub const XrResult_XR_ERROR_VALIDATION_FAILURE: XrResult = -1;
pub const XrResult_XR_ERROR_RUNTIME_FAILURE: XrResult = -2;
pub const XrResult_XR_ERROR_OUT_OF_MEMORY: XrResult = -3;
pub const XrResult_XR_ERROR_API_VERSION_UNSUPPORTED: XrResult = -4;
pub const XrResult_XR_ERROR_INITIALIZATION_FAILED: XrResult = -6;
pub const XrResult_XR_ERROR_FUNCTION_UNSUPPORTED: XrResult = -7;
pub const XrResult_XR_ERROR_FEATURE_UNSUPPORTED: XrResult = -8;
pub const XrResult_XR_ERROR_EXTENSION_NOT_PRESENT: XrResult = -9;
pub const XrResult_XR_ERROR_LIMIT_REACHED: XrResult = -10;
pub const XrResult_XR_ERROR_SIZE_INSUFFICIENT: XrResult = -11;
pub const XrResult_XR_ERROR_HANDLE_INVALID: XrResult = -12;
pub const XrResult_XR_ERROR_INSTANCE_LOST: XrResult = -13;
pub const XrResult_XR_ERROR_SESSION_RUNNING: XrResult = -14;
pub const XrResult_XR_ERROR_SESSION_NOT_RUNNING: XrResult = -16;
pub const XrResult_XR_ERROR_SESSION_LOST: XrResult = -17;
pub const XrResult_XR_ERROR_SYSTEM_INVALID: XrResult = -18;
pub const XrResult_XR_ERROR_PATH_INVALID: XrResult = -19;
pub const XrResult_XR_ERROR_PATH_COUNT_EXCEEDED: XrResult = -20;
pub const XrResult_XR_ERROR_PATH_FORMAT_INVALID: XrResult = -21;
pub const XrResult_XR_ERROR_PATH_UNSUPPORTED: XrResult = -22;
pub const XrResult_XR_ERROR_LAYER_INVALID: XrResult = -23;
pub const XrResult_XR_ERROR_LAYER_LIMIT_EXCEEDED: XrResult = -24;
pub const XrResult_XR_ERROR_SWAPCHAIN_RECT_INVALID: XrResult = -25;
pub const XrResult_XR_ERROR_SWAPCHAIN_FORMAT_UNSUPPORTED: XrResult = -26;
pub const XrResult_XR_ERROR_ACTION_TYPE_MISMATCH: XrResult = -27;
pub const XrResult_XR_ERROR_SESSION_NOT_READY: XrResult = -28;
pub const XrResult_XR_ERROR_SESSION_NOT_STOPPING: XrResult = -29;
pub const XrResult_XR_ERROR_TIME_INVALID: XrResult = -30;
pub const XrResult_XR_ERROR_REFERENCE_SPACE_UNSUPPORTED: XrResult = -31;
pub const XrResult_XR_ERROR_FILE_ACCESS_ERROR: XrResult = -32;
pub const XrResult_XR_ERROR_FILE_CONTENTS_INVALID: XrResult = -33;
pub const XrResult_XR_ERROR_FORM_FACTOR_UNSUPPORTED: XrResult = -34;
pub const XrResult_XR_ERROR_FORM_FACTOR_UNAVAILABLE: XrResult = -35;
pub const XrResult_XR_ERROR_API_LAYER_NOT_PRESENT: XrResult = -36;
pub const XrResult_XR_ERROR_CALL_ORDER_INVALID: XrResult = -37;
pub const XrResult_XR_ERROR_GRAPHICS_DEVICE_INVALID: XrResult = -38;
pub const XrResult_XR_ERROR_POSE_INVALID: XrResult = -39;
pub const XrResult_XR_ERROR_INDEX_OUT_OF_RANGE: XrResult = -40;
pub const XrResult_XR_ERROR_VIEW_CONFIGURATION_TYPE_UNSUPPORTED: XrResult = -41;
pub const XrResult_XR_ERROR_ENVIRONMENT_BLEND_MODE_UNSUPPORTED: XrResult = -42;
pub const XrResult_XR_ERROR_NAME_DUPLICATED: XrResult = -44;
pub const XrResult_XR_ERROR_NAME_INVALID: XrResult = -45;
pub const XrResult_XR_ERROR_ACTIONSET_NOT_ATTACHED: XrResult = -46;
pub const XrResult_XR_ERROR_ACTIONSETS_ALREADY_ATTACHED: XrResult = -47;
pub const XrResult_XR_ERROR_LOCALIZED_NAME_DUPLICATED: XrResult = -48;
pub const XrResult_XR_ERROR_LOCALIZED_NAME_INVALID: XrResult = -49;
pub const XrResult_XR_ERROR_GRAPHICS_REQUIREMENTS_CALL_MISSING: XrResult = -50;
pub const XrResult_XR_ERROR_RUNTIME_UNAVAILABLE: XrResult = -51;
pub const XrResult_XR_ERROR_EXTENSION_DEPENDENCY_NOT_ENABLED: XrResult = -1000710001;
pub const XrResult_XR_ERROR_PERMISSION_INSUFFICIENT: XrResult = -1000710000;
pub const XrResult_XR_ERROR_ANDROID_THREAD_SETTINGS_ID_INVALID_KHR: XrResult = -1000003000;
pub const XrResult_XR_ERROR_ANDROID_THREAD_SETTINGS_FAILURE_KHR: XrResult = -1000003001;
pub const XrResult_XR_ERROR_CREATE_SPATIAL_ANCHOR_FAILED_MSFT: XrResult = -1000039001;
pub const XrResult_XR_ERROR_SECONDARY_VIEW_CONFIGURATION_TYPE_NOT_ENABLED_MSFT: XrResult =
    -1000053000;
pub const XrResult_XR_ERROR_CONTROLLER_MODEL_KEY_INVALID_MSFT: XrResult = -1000055000;
pub const XrResult_XR_ERROR_REPROJECTION_MODE_UNSUPPORTED_MSFT: XrResult = -1000066000;
pub const XrResult_XR_ERROR_COMPUTE_NEW_SCENE_NOT_COMPLETED_MSFT: XrResult = -1000097000;
pub const XrResult_XR_ERROR_SCENE_COMPONENT_ID_INVALID_MSFT: XrResult = -1000097001;
pub const XrResult_XR_ERROR_SCENE_COMPONENT_TYPE_MISMATCH_MSFT: XrResult = -1000097002;
pub const XrResult_XR_ERROR_SCENE_MESH_BUFFER_ID_INVALID_MSFT: XrResult = -1000097003;
pub const XrResult_XR_ERROR_SCENE_COMPUTE_FEATURE_INCOMPATIBLE_MSFT: XrResult = -1000097004;
pub const XrResult_XR_ERROR_SCENE_COMPUTE_CONSISTENCY_MISMATCH_MSFT: XrResult = -1000097005;
pub const XrResult_XR_ERROR_DISPLAY_REFRESH_RATE_UNSUPPORTED_FB: XrResult = -1000101000;
pub const XrResult_XR_ERROR_COLOR_SPACE_UNSUPPORTED_FB: XrResult = -1000108000;
pub const XrResult_XR_ERROR_SPACE_COMPONENT_NOT_SUPPORTED_FB: XrResult = -1000113000;
pub const XrResult_XR_ERROR_SPACE_COMPONENT_NOT_ENABLED_FB: XrResult = -1000113001;
pub const XrResult_XR_ERROR_SPACE_COMPONENT_STATUS_PENDING_FB: XrResult = -1000113002;
pub const XrResult_XR_ERROR_SPACE_COMPONENT_STATUS_ALREADY_SET_FB: XrResult = -1000113003;
pub const XrResult_XR_ERROR_UNEXPECTED_STATE_PASSTHROUGH_FB: XrResult = -1000118000;
pub const XrResult_XR_ERROR_FEATURE_ALREADY_CREATED_PASSTHROUGH_FB: XrResult = -1000118001;
pub const XrResult_XR_ERROR_FEATURE_REQUIRED_PASSTHROUGH_FB: XrResult = -1000118002;
pub const XrResult_XR_ERROR_NOT_PERMITTED_PASSTHROUGH_FB: XrResult = -1000118003;
pub const XrResult_XR_ERROR_INSUFFICIENT_RESOURCES_PASSTHROUGH_FB: XrResult = -1000118004;
pub const XrResult_XR_ERROR_UNKNOWN_PASSTHROUGH_FB: XrResult = -1000118050;
pub const XrResult_XR_ERROR_RENDER_MODEL_KEY_INVALID_FB: XrResult = -1000119000;
pub const XrResult_XR_RENDER_MODEL_UNAVAILABLE_FB: XrResult = 1000119020;
pub const XrResult_XR_ERROR_MARKER_NOT_TRACKED_VARJO: XrResult = -1000124000;
pub const XrResult_XR_ERROR_MARKER_ID_INVALID_VARJO: XrResult = -1000124001;
pub const XrResult_XR_ERROR_MARKER_DETECTOR_PERMISSION_DENIED_ML: XrResult = -1000138000;
pub const XrResult_XR_ERROR_MARKER_DETECTOR_LOCATE_FAILED_ML: XrResult = -1000138001;
pub const XrResult_XR_ERROR_MARKER_DETECTOR_INVALID_DATA_QUERY_ML: XrResult = -1000138002;
pub const XrResult_XR_ERROR_MARKER_DETECTOR_INVALID_CREATE_INFO_ML: XrResult = -1000138003;
pub const XrResult_XR_ERROR_MARKER_INVALID_ML: XrResult = -1000138004;
pub const XrResult_XR_ERROR_LOCALIZATION_MAP_INCOMPATIBLE_ML: XrResult = -1000139000;
pub const XrResult_XR_ERROR_LOCALIZATION_MAP_UNAVAILABLE_ML: XrResult = -1000139001;
pub const XrResult_XR_ERROR_LOCALIZATION_MAP_FAIL_ML: XrResult = -1000139002;
pub const XrResult_XR_ERROR_LOCALIZATION_MAP_IMPORT_EXPORT_PERMISSION_DENIED_ML: XrResult =
    -1000139003;
pub const XrResult_XR_ERROR_LOCALIZATION_MAP_PERMISSION_DENIED_ML: XrResult = -1000139004;
pub const XrResult_XR_ERROR_LOCALIZATION_MAP_ALREADY_EXISTS_ML: XrResult = -1000139005;
pub const XrResult_XR_ERROR_LOCALIZATION_MAP_CANNOT_EXPORT_CLOUD_MAP_ML: XrResult = -1000139006;
pub const XrResult_XR_ERROR_SPATIAL_ANCHORS_PERMISSION_DENIED_ML: XrResult = -1000140000;
pub const XrResult_XR_ERROR_SPATIAL_ANCHORS_NOT_LOCALIZED_ML: XrResult = -1000140001;
pub const XrResult_XR_ERROR_SPATIAL_ANCHORS_OUT_OF_MAP_BOUNDS_ML: XrResult = -1000140002;
pub const XrResult_XR_ERROR_SPATIAL_ANCHORS_SPACE_NOT_LOCATABLE_ML: XrResult = -1000140003;
pub const XrResult_XR_ERROR_SPATIAL_ANCHORS_ANCHOR_NOT_FOUND_ML: XrResult = -1000141000;
pub const XrResult_XR_ERROR_SPATIAL_ANCHOR_NAME_NOT_FOUND_MSFT: XrResult = -1000142001;
pub const XrResult_XR_ERROR_SPATIAL_ANCHOR_NAME_INVALID_MSFT: XrResult = -1000142002;
pub const XrResult_XR_SCENE_MARKER_DATA_NOT_STRING_MSFT: XrResult = 1000147000;
pub const XrResult_XR_ERROR_SPACE_MAPPING_INSUFFICIENT_FB: XrResult = -1000169000;
pub const XrResult_XR_ERROR_SPACE_LOCALIZATION_FAILED_FB: XrResult = -1000169001;
pub const XrResult_XR_ERROR_SPACE_NETWORK_TIMEOUT_FB: XrResult = -1000169002;
pub const XrResult_XR_ERROR_SPACE_NETWORK_REQUEST_FAILED_FB: XrResult = -1000169003;
pub const XrResult_XR_ERROR_SPACE_CLOUD_STORAGE_DISABLED_FB: XrResult = -1000169004;
pub const XrResult_XR_ERROR_PASSTHROUGH_COLOR_LUT_BUFFER_SIZE_MISMATCH_META: XrResult = -1000266000;
pub const XrResult_XR_ENVIRONMENT_DEPTH_NOT_AVAILABLE_META: XrResult = 1000291000;
pub const XrResult_XR_ERROR_HINT_ALREADY_SET_QCOM: XrResult = -1000306000;
pub const XrResult_XR_ERROR_NOT_AN_ANCHOR_HTC: XrResult = -1000319000;
pub const XrResult_XR_ERROR_SPACE_NOT_LOCATABLE_EXT: XrResult = -1000429000;
pub const XrResult_XR_ERROR_PLANE_DETECTION_PERMISSION_DENIED_EXT: XrResult = -1000429001;
pub const XrResult_XR_ERROR_FUTURE_PENDING_EXT: XrResult = -1000469001;
pub const XrResult_XR_ERROR_FUTURE_INVALID_EXT: XrResult = -1000469002;
pub const XrResult_XR_ERROR_SYSTEM_NOTIFICATION_PERMISSION_DENIED_ML: XrResult = -1000473000;
pub const XrResult_XR_ERROR_SYSTEM_NOTIFICATION_INCOMPATIBLE_SKU_ML: XrResult = -1000473001;
pub const XrResult_XR_ERROR_WORLD_MESH_DETECTOR_PERMISSION_DENIED_ML: XrResult = -1000474000;
pub const XrResult_XR_ERROR_WORLD_MESH_DETECTOR_SPACE_NOT_LOCATABLE_ML: XrResult = -1000474001;
pub const XrResult_XR_ERROR_FACIAL_EXPRESSION_PERMISSION_DENIED_ML: XrResult = 1000482000;
pub const XrResult_XR_ERROR_COLOCATION_DISCOVERY_NETWORK_FAILED_META: XrResult = -1000571001;
pub const XrResult_XR_ERROR_COLOCATION_DISCOVERY_NO_DISCOVERY_METHOD_META: XrResult = -1000571002;
pub const XrResult_XR_COLOCATION_DISCOVERY_ALREADY_ADVERTISING_META: XrResult = 1000571003;
pub const XrResult_XR_COLOCATION_DISCOVERY_ALREADY_DISCOVERING_META: XrResult = 1000571004;
pub const XrResult_XR_ERROR_SPACE_GROUP_NOT_FOUND_META: XrResult = -1000572002;
pub const XrResult_XR_ERROR_EXTENSION_DEPENDENCY_NOT_ENABLED_KHR: XrResult = -1000710001;
pub const XrResult_XR_ERROR_PERMISSION_INSUFFICIENT_KHR: XrResult = -1000710000;
pub const XrResult_XR_RESULT_MAX_ENUM: XrResult = 2147483647;
pub type XrResult = ::std::os::raw::c_int;
pub const XrStructureType_XR_TYPE_UNKNOWN: XrStructureType = 0;
pub const XrStructureType_XR_TYPE_API_LAYER_PROPERTIES: XrStructureType = 1;
pub const XrStructureType_XR_TYPE_EXTENSION_PROPERTIES: XrStructureType = 2;
pub const XrStructureType_XR_TYPE_INSTANCE_CREATE_INFO: XrStructureType = 3;
pub const XrStructureType_XR_TYPE_SYSTEM_GET_INFO: XrStructureType = 4;
pub const XrStructureType_XR_TYPE_SYSTEM_PROPERTIES: XrStructureType = 5;
pub const XrStructureType_XR_TYPE_VIEW_LOCATE_INFO: XrStructureType = 6;
pub const XrStructureType_XR_TYPE_VIEW: XrStructureType = 7;
pub const XrStructureType_XR_TYPE_SESSION_CREATE_INFO: XrStructureType = 8;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_CREATE_INFO: XrStructureType = 9;
pub const XrStructureType_XR_TYPE_SESSION_BEGIN_INFO: XrStructureType = 10;
pub const XrStructureType_XR_TYPE_VIEW_STATE: XrStructureType = 11;
pub const XrStructureType_XR_TYPE_FRAME_END_INFO: XrStructureType = 12;
pub const XrStructureType_XR_TYPE_HAPTIC_VIBRATION: XrStructureType = 13;
pub const XrStructureType_XR_TYPE_EVENT_DATA_BUFFER: XrStructureType = 16;
pub const XrStructureType_XR_TYPE_EVENT_DATA_INSTANCE_LOSS_PENDING: XrStructureType = 17;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SESSION_STATE_CHANGED: XrStructureType = 18;
pub const XrStructureType_XR_TYPE_ACTION_STATE_BOOLEAN: XrStructureType = 23;
pub const XrStructureType_XR_TYPE_ACTION_STATE_FLOAT: XrStructureType = 24;
pub const XrStructureType_XR_TYPE_ACTION_STATE_VECTOR2F: XrStructureType = 25;
pub const XrStructureType_XR_TYPE_ACTION_STATE_POSE: XrStructureType = 27;
pub const XrStructureType_XR_TYPE_ACTION_SET_CREATE_INFO: XrStructureType = 28;
pub const XrStructureType_XR_TYPE_ACTION_CREATE_INFO: XrStructureType = 29;
pub const XrStructureType_XR_TYPE_INSTANCE_PROPERTIES: XrStructureType = 32;
pub const XrStructureType_XR_TYPE_FRAME_WAIT_INFO: XrStructureType = 33;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_PROJECTION: XrStructureType = 35;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_QUAD: XrStructureType = 36;
pub const XrStructureType_XR_TYPE_REFERENCE_SPACE_CREATE_INFO: XrStructureType = 37;
pub const XrStructureType_XR_TYPE_ACTION_SPACE_CREATE_INFO: XrStructureType = 38;
pub const XrStructureType_XR_TYPE_EVENT_DATA_REFERENCE_SPACE_CHANGE_PENDING: XrStructureType = 40;
pub const XrStructureType_XR_TYPE_VIEW_CONFIGURATION_VIEW: XrStructureType = 41;
pub const XrStructureType_XR_TYPE_SPACE_LOCATION: XrStructureType = 42;
pub const XrStructureType_XR_TYPE_SPACE_VELOCITY: XrStructureType = 43;
pub const XrStructureType_XR_TYPE_FRAME_STATE: XrStructureType = 44;
pub const XrStructureType_XR_TYPE_VIEW_CONFIGURATION_PROPERTIES: XrStructureType = 45;
pub const XrStructureType_XR_TYPE_FRAME_BEGIN_INFO: XrStructureType = 46;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_PROJECTION_VIEW: XrStructureType = 48;
pub const XrStructureType_XR_TYPE_EVENT_DATA_EVENTS_LOST: XrStructureType = 49;
pub const XrStructureType_XR_TYPE_INTERACTION_PROFILE_SUGGESTED_BINDING: XrStructureType = 51;
pub const XrStructureType_XR_TYPE_EVENT_DATA_INTERACTION_PROFILE_CHANGED: XrStructureType = 52;
pub const XrStructureType_XR_TYPE_INTERACTION_PROFILE_STATE: XrStructureType = 53;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_ACQUIRE_INFO: XrStructureType = 55;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_WAIT_INFO: XrStructureType = 56;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_RELEASE_INFO: XrStructureType = 57;
pub const XrStructureType_XR_TYPE_ACTION_STATE_GET_INFO: XrStructureType = 58;
pub const XrStructureType_XR_TYPE_HAPTIC_ACTION_INFO: XrStructureType = 59;
pub const XrStructureType_XR_TYPE_SESSION_ACTION_SETS_ATTACH_INFO: XrStructureType = 60;
pub const XrStructureType_XR_TYPE_ACTIONS_SYNC_INFO: XrStructureType = 61;
pub const XrStructureType_XR_TYPE_BOUND_SOURCES_FOR_ACTION_ENUMERATE_INFO: XrStructureType = 62;
pub const XrStructureType_XR_TYPE_INPUT_SOURCE_LOCALIZED_NAME_GET_INFO: XrStructureType = 63;
pub const XrStructureType_XR_TYPE_SPACES_LOCATE_INFO: XrStructureType = 1000471000;
pub const XrStructureType_XR_TYPE_SPACE_LOCATIONS: XrStructureType = 1000471001;
pub const XrStructureType_XR_TYPE_SPACE_VELOCITIES: XrStructureType = 1000471002;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_CUBE_KHR: XrStructureType = 1000006000;
pub const XrStructureType_XR_TYPE_INSTANCE_CREATE_INFO_ANDROID_KHR: XrStructureType = 1000008000;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_DEPTH_INFO_KHR: XrStructureType = 1000010000;
pub const XrStructureType_XR_TYPE_VULKAN_SWAPCHAIN_FORMAT_LIST_CREATE_INFO_KHR: XrStructureType =
    1000014000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_PERF_SETTINGS_EXT: XrStructureType = 1000015000;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_CYLINDER_KHR: XrStructureType = 1000017000;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_EQUIRECT_KHR: XrStructureType = 1000018000;
pub const XrStructureType_XR_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT: XrStructureType = 1000019000;
pub const XrStructureType_XR_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT: XrStructureType =
    1000019001;
pub const XrStructureType_XR_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT: XrStructureType =
    1000019002;
pub const XrStructureType_XR_TYPE_DEBUG_UTILS_LABEL_EXT: XrStructureType = 1000019003;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_OPENGL_WIN32_KHR: XrStructureType = 1000023000;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_OPENGL_XLIB_KHR: XrStructureType = 1000023001;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_OPENGL_XCB_KHR: XrStructureType = 1000023002;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_OPENGL_WAYLAND_KHR: XrStructureType = 1000023003;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_KHR: XrStructureType = 1000023004;
pub const XrStructureType_XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_KHR: XrStructureType = 1000023005;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_OPENGL_ES_ANDROID_KHR: XrStructureType =
    1000024001;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_ES_KHR: XrStructureType = 1000024002;
pub const XrStructureType_XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_ES_KHR: XrStructureType = 1000024003;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_VULKAN_KHR: XrStructureType = 1000025000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_VULKAN_KHR: XrStructureType = 1000025001;
pub const XrStructureType_XR_TYPE_GRAPHICS_REQUIREMENTS_VULKAN_KHR: XrStructureType = 1000025002;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_D3D11_KHR: XrStructureType = 1000027000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_D3D11_KHR: XrStructureType = 1000027001;
pub const XrStructureType_XR_TYPE_GRAPHICS_REQUIREMENTS_D3D11_KHR: XrStructureType = 1000027002;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_D3D12_KHR: XrStructureType = 1000028000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_D3D12_KHR: XrStructureType = 1000028001;
pub const XrStructureType_XR_TYPE_GRAPHICS_REQUIREMENTS_D3D12_KHR: XrStructureType = 1000028002;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_METAL_KHR: XrStructureType = 1000029000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_METAL_KHR: XrStructureType = 1000029001;
pub const XrStructureType_XR_TYPE_GRAPHICS_REQUIREMENTS_METAL_KHR: XrStructureType = 1000029002;
pub const XrStructureType_XR_TYPE_SYSTEM_EYE_GAZE_INTERACTION_PROPERTIES_EXT: XrStructureType =
    1000030000;
pub const XrStructureType_XR_TYPE_EYE_GAZE_SAMPLE_TIME_EXT: XrStructureType = 1000030001;
pub const XrStructureType_XR_TYPE_VISIBILITY_MASK_KHR: XrStructureType = 1000031000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_VISIBILITY_MASK_CHANGED_KHR: XrStructureType =
    1000031001;
pub const XrStructureType_XR_TYPE_SESSION_CREATE_INFO_OVERLAY_EXTX: XrStructureType = 1000033000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_MAIN_SESSION_VISIBILITY_CHANGED_EXTX: XrStructureType =
    1000033003;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_COLOR_SCALE_BIAS_KHR: XrStructureType =
    1000034000;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_MSFT: XrStructureType = 1000039000;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHOR_SPACE_CREATE_INFO_MSFT: XrStructureType =
    1000039001;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_IMAGE_LAYOUT_FB: XrStructureType = 1000040000;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_ALPHA_BLEND_FB: XrStructureType = 1000041001;
pub const XrStructureType_XR_TYPE_VIEW_CONFIGURATION_DEPTH_RANGE_EXT: XrStructureType = 1000046000;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_EGL_MNDX: XrStructureType = 1000048004;
pub const XrStructureType_XR_TYPE_SPATIAL_GRAPH_NODE_SPACE_CREATE_INFO_MSFT: XrStructureType =
    1000049000;
pub const XrStructureType_XR_TYPE_SPATIAL_GRAPH_STATIC_NODE_BINDING_CREATE_INFO_MSFT:
    XrStructureType = 1000049001;
pub const XrStructureType_XR_TYPE_SPATIAL_GRAPH_NODE_BINDING_PROPERTIES_GET_INFO_MSFT:
    XrStructureType = 1000049002;
pub const XrStructureType_XR_TYPE_SPATIAL_GRAPH_NODE_BINDING_PROPERTIES_MSFT: XrStructureType =
    1000049003;
pub const XrStructureType_XR_TYPE_SYSTEM_HAND_TRACKING_PROPERTIES_EXT: XrStructureType = 1000051000;
pub const XrStructureType_XR_TYPE_HAND_TRACKER_CREATE_INFO_EXT: XrStructureType = 1000051001;
pub const XrStructureType_XR_TYPE_HAND_JOINTS_LOCATE_INFO_EXT: XrStructureType = 1000051002;
pub const XrStructureType_XR_TYPE_HAND_JOINT_LOCATIONS_EXT: XrStructureType = 1000051003;
pub const XrStructureType_XR_TYPE_HAND_JOINT_VELOCITIES_EXT: XrStructureType = 1000051004;
pub const XrStructureType_XR_TYPE_SYSTEM_HAND_TRACKING_MESH_PROPERTIES_MSFT: XrStructureType =
    1000052000;
pub const XrStructureType_XR_TYPE_HAND_MESH_SPACE_CREATE_INFO_MSFT: XrStructureType = 1000052001;
pub const XrStructureType_XR_TYPE_HAND_MESH_UPDATE_INFO_MSFT: XrStructureType = 1000052002;
pub const XrStructureType_XR_TYPE_HAND_MESH_MSFT: XrStructureType = 1000052003;
pub const XrStructureType_XR_TYPE_HAND_POSE_TYPE_INFO_MSFT: XrStructureType = 1000052004;
pub const XrStructureType_XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SESSION_BEGIN_INFO_MSFT:
    XrStructureType = 1000053000;
pub const XrStructureType_XR_TYPE_SECONDARY_VIEW_CONFIGURATION_STATE_MSFT: XrStructureType =
    1000053001;
pub const XrStructureType_XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_STATE_MSFT: XrStructureType =
    1000053002;
pub const XrStructureType_XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_END_INFO_MSFT:
    XrStructureType = 1000053003;
pub const XrStructureType_XR_TYPE_SECONDARY_VIEW_CONFIGURATION_LAYER_INFO_MSFT: XrStructureType =
    1000053004;
pub const XrStructureType_XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SWAPCHAIN_CREATE_INFO_MSFT:
    XrStructureType = 1000053005;
pub const XrStructureType_XR_TYPE_CONTROLLER_MODEL_KEY_STATE_MSFT: XrStructureType = 1000055000;
pub const XrStructureType_XR_TYPE_CONTROLLER_MODEL_NODE_PROPERTIES_MSFT: XrStructureType =
    1000055001;
pub const XrStructureType_XR_TYPE_CONTROLLER_MODEL_PROPERTIES_MSFT: XrStructureType = 1000055002;
pub const XrStructureType_XR_TYPE_CONTROLLER_MODEL_NODE_STATE_MSFT: XrStructureType = 1000055003;
pub const XrStructureType_XR_TYPE_CONTROLLER_MODEL_STATE_MSFT: XrStructureType = 1000055004;
pub const XrStructureType_XR_TYPE_VIEW_CONFIGURATION_VIEW_FOV_EPIC: XrStructureType = 1000059000;
pub const XrStructureType_XR_TYPE_HOLOGRAPHIC_WINDOW_ATTACHMENT_MSFT: XrStructureType = 1000063000;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_REPROJECTION_INFO_MSFT: XrStructureType =
    1000066000;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_REPROJECTION_PLANE_OVERRIDE_MSFT:
    XrStructureType = 1000066001;
pub const XrStructureType_XR_TYPE_ANDROID_SURFACE_SWAPCHAIN_CREATE_INFO_FB: XrStructureType =
    1000070000;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_SECURE_CONTENT_FB: XrStructureType = 1000072000;
pub const XrStructureType_XR_TYPE_BODY_TRACKER_CREATE_INFO_FB: XrStructureType = 1000076001;
pub const XrStructureType_XR_TYPE_BODY_JOINTS_LOCATE_INFO_FB: XrStructureType = 1000076002;
pub const XrStructureType_XR_TYPE_SYSTEM_BODY_TRACKING_PROPERTIES_FB: XrStructureType = 1000076004;
pub const XrStructureType_XR_TYPE_BODY_JOINT_LOCATIONS_FB: XrStructureType = 1000076005;
pub const XrStructureType_XR_TYPE_BODY_SKELETON_FB: XrStructureType = 1000076006;
pub const XrStructureType_XR_TYPE_INTERACTION_PROFILE_DPAD_BINDING_EXT: XrStructureType =
    1000078000;
pub const XrStructureType_XR_TYPE_INTERACTION_PROFILE_ANALOG_THRESHOLD_VALVE: XrStructureType =
    1000079000;
pub const XrStructureType_XR_TYPE_HAND_JOINTS_MOTION_RANGE_INFO_EXT: XrStructureType = 1000080000;
pub const XrStructureType_XR_TYPE_LOADER_INIT_INFO_ANDROID_KHR: XrStructureType = 1000089000;
pub const XrStructureType_XR_TYPE_VULKAN_INSTANCE_CREATE_INFO_KHR: XrStructureType = 1000090000;
pub const XrStructureType_XR_TYPE_VULKAN_DEVICE_CREATE_INFO_KHR: XrStructureType = 1000090001;
pub const XrStructureType_XR_TYPE_VULKAN_GRAPHICS_DEVICE_GET_INFO_KHR: XrStructureType = 1000090003;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_EQUIRECT2_KHR: XrStructureType = 1000091000;
pub const XrStructureType_XR_TYPE_SCENE_OBSERVER_CREATE_INFO_MSFT: XrStructureType = 1000097000;
pub const XrStructureType_XR_TYPE_SCENE_CREATE_INFO_MSFT: XrStructureType = 1000097001;
pub const XrStructureType_XR_TYPE_NEW_SCENE_COMPUTE_INFO_MSFT: XrStructureType = 1000097002;
pub const XrStructureType_XR_TYPE_VISUAL_MESH_COMPUTE_LOD_INFO_MSFT: XrStructureType = 1000097003;
pub const XrStructureType_XR_TYPE_SCENE_COMPONENTS_MSFT: XrStructureType = 1000097004;
pub const XrStructureType_XR_TYPE_SCENE_COMPONENTS_GET_INFO_MSFT: XrStructureType = 1000097005;
pub const XrStructureType_XR_TYPE_SCENE_COMPONENT_LOCATIONS_MSFT: XrStructureType = 1000097006;
pub const XrStructureType_XR_TYPE_SCENE_COMPONENTS_LOCATE_INFO_MSFT: XrStructureType = 1000097007;
pub const XrStructureType_XR_TYPE_SCENE_OBJECTS_MSFT: XrStructureType = 1000097008;
pub const XrStructureType_XR_TYPE_SCENE_COMPONENT_PARENT_FILTER_INFO_MSFT: XrStructureType =
    1000097009;
pub const XrStructureType_XR_TYPE_SCENE_OBJECT_TYPES_FILTER_INFO_MSFT: XrStructureType = 1000097010;
pub const XrStructureType_XR_TYPE_SCENE_PLANES_MSFT: XrStructureType = 1000097011;
pub const XrStructureType_XR_TYPE_SCENE_PLANE_ALIGNMENT_FILTER_INFO_MSFT: XrStructureType =
    1000097012;
pub const XrStructureType_XR_TYPE_SCENE_MESHES_MSFT: XrStructureType = 1000097013;
pub const XrStructureType_XR_TYPE_SCENE_MESH_BUFFERS_GET_INFO_MSFT: XrStructureType = 1000097014;
pub const XrStructureType_XR_TYPE_SCENE_MESH_BUFFERS_MSFT: XrStructureType = 1000097015;
pub const XrStructureType_XR_TYPE_SCENE_MESH_VERTEX_BUFFER_MSFT: XrStructureType = 1000097016;
pub const XrStructureType_XR_TYPE_SCENE_MESH_INDICES_UINT32_MSFT: XrStructureType = 1000097017;
pub const XrStructureType_XR_TYPE_SCENE_MESH_INDICES_UINT16_MSFT: XrStructureType = 1000097018;
pub const XrStructureType_XR_TYPE_SERIALIZED_SCENE_FRAGMENT_DATA_GET_INFO_MSFT: XrStructureType =
    1000098000;
pub const XrStructureType_XR_TYPE_SCENE_DESERIALIZE_INFO_MSFT: XrStructureType = 1000098001;
pub const XrStructureType_XR_TYPE_EVENT_DATA_DISPLAY_REFRESH_RATE_CHANGED_FB: XrStructureType =
    1000101000;
pub const XrStructureType_XR_TYPE_VIVE_TRACKER_PATHS_HTCX: XrStructureType = 1000103000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_VIVE_TRACKER_CONNECTED_HTCX: XrStructureType =
    1000103001;
pub const XrStructureType_XR_TYPE_SYSTEM_FACIAL_TRACKING_PROPERTIES_HTC: XrStructureType =
    1000104000;
pub const XrStructureType_XR_TYPE_FACIAL_TRACKER_CREATE_INFO_HTC: XrStructureType = 1000104001;
pub const XrStructureType_XR_TYPE_FACIAL_EXPRESSIONS_HTC: XrStructureType = 1000104002;
pub const XrStructureType_XR_TYPE_SYSTEM_COLOR_SPACE_PROPERTIES_FB: XrStructureType = 1000108000;
pub const XrStructureType_XR_TYPE_HAND_TRACKING_MESH_FB: XrStructureType = 1000110001;
pub const XrStructureType_XR_TYPE_HAND_TRACKING_SCALE_FB: XrStructureType = 1000110003;
pub const XrStructureType_XR_TYPE_HAND_TRACKING_AIM_STATE_FB: XrStructureType = 1000111001;
pub const XrStructureType_XR_TYPE_HAND_TRACKING_CAPSULES_STATE_FB: XrStructureType = 1000112000;
pub const XrStructureType_XR_TYPE_SYSTEM_SPATIAL_ENTITY_PROPERTIES_FB: XrStructureType = 1000113004;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_FB: XrStructureType = 1000113003;
pub const XrStructureType_XR_TYPE_SPACE_COMPONENT_STATUS_SET_INFO_FB: XrStructureType = 1000113007;
pub const XrStructureType_XR_TYPE_SPACE_COMPONENT_STATUS_FB: XrStructureType = 1000113001;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SPATIAL_ANCHOR_CREATE_COMPLETE_FB: XrStructureType =
    1000113005;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SPACE_SET_STATUS_COMPLETE_FB: XrStructureType =
    1000113006;
pub const XrStructureType_XR_TYPE_FOVEATION_PROFILE_CREATE_INFO_FB: XrStructureType = 1000114000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_CREATE_INFO_FOVEATION_FB: XrStructureType = 1000114001;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_STATE_FOVEATION_FB: XrStructureType = 1000114002;
pub const XrStructureType_XR_TYPE_FOVEATION_LEVEL_PROFILE_CREATE_INFO_FB: XrStructureType =
    1000115000;
pub const XrStructureType_XR_TYPE_KEYBOARD_SPACE_CREATE_INFO_FB: XrStructureType = 1000116009;
pub const XrStructureType_XR_TYPE_KEYBOARD_TRACKING_QUERY_FB: XrStructureType = 1000116004;
pub const XrStructureType_XR_TYPE_SYSTEM_KEYBOARD_TRACKING_PROPERTIES_FB: XrStructureType =
    1000116002;
pub const XrStructureType_XR_TYPE_TRIANGLE_MESH_CREATE_INFO_FB: XrStructureType = 1000117001;
pub const XrStructureType_XR_TYPE_SYSTEM_PASSTHROUGH_PROPERTIES_FB: XrStructureType = 1000118000;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_CREATE_INFO_FB: XrStructureType = 1000118001;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_LAYER_CREATE_INFO_FB: XrStructureType = 1000118002;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_PASSTHROUGH_FB: XrStructureType = 1000118003;
pub const XrStructureType_XR_TYPE_GEOMETRY_INSTANCE_CREATE_INFO_FB: XrStructureType = 1000118004;
pub const XrStructureType_XR_TYPE_GEOMETRY_INSTANCE_TRANSFORM_FB: XrStructureType = 1000118005;
pub const XrStructureType_XR_TYPE_SYSTEM_PASSTHROUGH_PROPERTIES2_FB: XrStructureType = 1000118006;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_STYLE_FB: XrStructureType = 1000118020;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_COLOR_MAP_MONO_TO_RGBA_FB: XrStructureType =
    1000118021;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_COLOR_MAP_MONO_TO_MONO_FB: XrStructureType =
    1000118022;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_BRIGHTNESS_CONTRAST_SATURATION_FB: XrStructureType =
    1000118023;
pub const XrStructureType_XR_TYPE_EVENT_DATA_PASSTHROUGH_STATE_CHANGED_FB: XrStructureType =
    1000118030;
pub const XrStructureType_XR_TYPE_RENDER_MODEL_PATH_INFO_FB: XrStructureType = 1000119000;
pub const XrStructureType_XR_TYPE_RENDER_MODEL_PROPERTIES_FB: XrStructureType = 1000119001;
pub const XrStructureType_XR_TYPE_RENDER_MODEL_BUFFER_FB: XrStructureType = 1000119002;
pub const XrStructureType_XR_TYPE_RENDER_MODEL_LOAD_INFO_FB: XrStructureType = 1000119003;
pub const XrStructureType_XR_TYPE_SYSTEM_RENDER_MODEL_PROPERTIES_FB: XrStructureType = 1000119004;
pub const XrStructureType_XR_TYPE_RENDER_MODEL_CAPABILITIES_REQUEST_FB: XrStructureType =
    1000119005;
pub const XrStructureType_XR_TYPE_BINDING_MODIFICATIONS_KHR: XrStructureType = 1000120000;
pub const XrStructureType_XR_TYPE_VIEW_LOCATE_FOVEATED_RENDERING_VARJO: XrStructureType =
    1000121000;
pub const XrStructureType_XR_TYPE_FOVEATED_VIEW_CONFIGURATION_VIEW_VARJO: XrStructureType =
    1000121001;
pub const XrStructureType_XR_TYPE_SYSTEM_FOVEATED_RENDERING_PROPERTIES_VARJO: XrStructureType =
    1000121002;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_DEPTH_TEST_VARJO: XrStructureType = 1000122000;
pub const XrStructureType_XR_TYPE_SYSTEM_MARKER_TRACKING_PROPERTIES_VARJO: XrStructureType =
    1000124000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_MARKER_TRACKING_UPDATE_VARJO: XrStructureType =
    1000124001;
pub const XrStructureType_XR_TYPE_MARKER_SPACE_CREATE_INFO_VARJO: XrStructureType = 1000124002;
pub const XrStructureType_XR_TYPE_FRAME_END_INFO_ML: XrStructureType = 1000135000;
pub const XrStructureType_XR_TYPE_GLOBAL_DIMMER_FRAME_END_INFO_ML: XrStructureType = 1000136000;
pub const XrStructureType_XR_TYPE_COORDINATE_SPACE_CREATE_INFO_ML: XrStructureType = 1000137000;
pub const XrStructureType_XR_TYPE_SYSTEM_MARKER_UNDERSTANDING_PROPERTIES_ML: XrStructureType =
    1000138000;
pub const XrStructureType_XR_TYPE_MARKER_DETECTOR_CREATE_INFO_ML: XrStructureType = 1000138001;
pub const XrStructureType_XR_TYPE_MARKER_DETECTOR_ARUCO_INFO_ML: XrStructureType = 1000138002;
pub const XrStructureType_XR_TYPE_MARKER_DETECTOR_SIZE_INFO_ML: XrStructureType = 1000138003;
pub const XrStructureType_XR_TYPE_MARKER_DETECTOR_APRIL_TAG_INFO_ML: XrStructureType = 1000138004;
pub const XrStructureType_XR_TYPE_MARKER_DETECTOR_CUSTOM_PROFILE_INFO_ML: XrStructureType =
    1000138005;
pub const XrStructureType_XR_TYPE_MARKER_DETECTOR_SNAPSHOT_INFO_ML: XrStructureType = 1000138006;
pub const XrStructureType_XR_TYPE_MARKER_DETECTOR_STATE_ML: XrStructureType = 1000138007;
pub const XrStructureType_XR_TYPE_MARKER_SPACE_CREATE_INFO_ML: XrStructureType = 1000138008;
pub const XrStructureType_XR_TYPE_LOCALIZATION_MAP_ML: XrStructureType = 1000139000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_LOCALIZATION_CHANGED_ML: XrStructureType = 1000139001;
pub const XrStructureType_XR_TYPE_MAP_LOCALIZATION_REQUEST_INFO_ML: XrStructureType = 1000139002;
pub const XrStructureType_XR_TYPE_LOCALIZATION_MAP_IMPORT_INFO_ML: XrStructureType = 1000139003;
pub const XrStructureType_XR_TYPE_LOCALIZATION_ENABLE_EVENTS_INFO_ML: XrStructureType = 1000139004;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHORS_CREATE_INFO_FROM_POSE_ML: XrStructureType =
    1000140000;
pub const XrStructureType_XR_TYPE_CREATE_SPATIAL_ANCHORS_COMPLETION_ML: XrStructureType =
    1000140001;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHOR_STATE_ML: XrStructureType = 1000140002;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHORS_CREATE_STORAGE_INFO_ML: XrStructureType =
    1000141000;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHORS_QUERY_INFO_RADIUS_ML: XrStructureType =
    1000141001;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHORS_QUERY_COMPLETION_ML: XrStructureType = 1000141002;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHORS_CREATE_INFO_FROM_UUIDS_ML: XrStructureType =
    1000141003;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHORS_PUBLISH_INFO_ML: XrStructureType = 1000141004;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHORS_PUBLISH_COMPLETION_ML: XrStructureType =
    1000141005;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHORS_DELETE_INFO_ML: XrStructureType = 1000141006;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHORS_DELETE_COMPLETION_ML: XrStructureType =
    1000141007;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHORS_UPDATE_EXPIRATION_INFO_ML: XrStructureType =
    1000141008;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHORS_UPDATE_EXPIRATION_COMPLETION_ML: XrStructureType =
    1000141009;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHORS_PUBLISH_COMPLETION_DETAILS_ML: XrStructureType =
    1000141010;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHORS_DELETE_COMPLETION_DETAILS_ML: XrStructureType =
    1000141011;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHORS_UPDATE_EXPIRATION_COMPLETION_DETAILS_ML:
    XrStructureType = 1000141012;
pub const XrStructureType_XR_TYPE_EVENT_DATA_HEADSET_FIT_CHANGED_ML: XrStructureType = 1000472000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_EYE_CALIBRATION_CHANGED_ML: XrStructureType =
    1000472001;
pub const XrStructureType_XR_TYPE_USER_CALIBRATION_ENABLE_EVENTS_INFO_ML: XrStructureType =
    1000472002;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHOR_PERSISTENCE_INFO_MSFT: XrStructureType =
    1000142000;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHOR_FROM_PERSISTED_ANCHOR_CREATE_INFO_MSFT:
    XrStructureType = 1000142001;
pub const XrStructureType_XR_TYPE_SCENE_MARKERS_MSFT: XrStructureType = 1000147000;
pub const XrStructureType_XR_TYPE_SCENE_MARKER_TYPE_FILTER_MSFT: XrStructureType = 1000147001;
pub const XrStructureType_XR_TYPE_SCENE_MARKER_QR_CODES_MSFT: XrStructureType = 1000147002;
pub const XrStructureType_XR_TYPE_SPACE_QUERY_INFO_FB: XrStructureType = 1000156001;
pub const XrStructureType_XR_TYPE_SPACE_QUERY_RESULTS_FB: XrStructureType = 1000156002;
pub const XrStructureType_XR_TYPE_SPACE_STORAGE_LOCATION_FILTER_INFO_FB: XrStructureType =
    1000156003;
pub const XrStructureType_XR_TYPE_SPACE_UUID_FILTER_INFO_FB: XrStructureType = 1000156054;
pub const XrStructureType_XR_TYPE_SPACE_COMPONENT_FILTER_INFO_FB: XrStructureType = 1000156052;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SPACE_QUERY_RESULTS_AVAILABLE_FB: XrStructureType =
    1000156103;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SPACE_QUERY_COMPLETE_FB: XrStructureType = 1000156104;
pub const XrStructureType_XR_TYPE_SPACE_SAVE_INFO_FB: XrStructureType = 1000158000;
pub const XrStructureType_XR_TYPE_SPACE_ERASE_INFO_FB: XrStructureType = 1000158001;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SPACE_SAVE_COMPLETE_FB: XrStructureType = 1000158106;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SPACE_ERASE_COMPLETE_FB: XrStructureType = 1000158107;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_FOVEATION_VULKAN_FB: XrStructureType = 1000160000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_STATE_ANDROID_SURFACE_DIMENSIONS_FB: XrStructureType =
    1000161000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_STATE_SAMPLER_OPENGL_ES_FB: XrStructureType =
    1000162000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_STATE_SAMPLER_VULKAN_FB: XrStructureType = 1000163000;
pub const XrStructureType_XR_TYPE_SPACE_SHARE_INFO_FB: XrStructureType = 1000169001;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SPACE_SHARE_COMPLETE_FB: XrStructureType = 1000169002;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_SPACE_WARP_INFO_FB: XrStructureType =
    1000171000;
pub const XrStructureType_XR_TYPE_SYSTEM_SPACE_WARP_PROPERTIES_FB: XrStructureType = 1000171001;
pub const XrStructureType_XR_TYPE_HAPTIC_AMPLITUDE_ENVELOPE_VIBRATION_FB: XrStructureType =
    1000173001;
pub const XrStructureType_XR_TYPE_SEMANTIC_LABELS_FB: XrStructureType = 1000175000;
pub const XrStructureType_XR_TYPE_ROOM_LAYOUT_FB: XrStructureType = 1000175001;
pub const XrStructureType_XR_TYPE_BOUNDARY_2D_FB: XrStructureType = 1000175002;
pub const XrStructureType_XR_TYPE_SEMANTIC_LABELS_SUPPORT_INFO_FB: XrStructureType = 1000175010;
pub const XrStructureType_XR_TYPE_DIGITAL_LENS_CONTROL_ALMALENCE: XrStructureType = 1000196000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SCENE_CAPTURE_COMPLETE_FB: XrStructureType =
    1000198001;
pub const XrStructureType_XR_TYPE_SCENE_CAPTURE_REQUEST_INFO_FB: XrStructureType = 1000198050;
pub const XrStructureType_XR_TYPE_SPACE_CONTAINER_FB: XrStructureType = 1000199000;
pub const XrStructureType_XR_TYPE_FOVEATION_EYE_TRACKED_PROFILE_CREATE_INFO_META: XrStructureType =
    1000200000;
pub const XrStructureType_XR_TYPE_FOVEATION_EYE_TRACKED_STATE_META: XrStructureType = 1000200001;
pub const XrStructureType_XR_TYPE_SYSTEM_FOVEATION_EYE_TRACKED_PROPERTIES_META: XrStructureType =
    1000200002;
pub const XrStructureType_XR_TYPE_SYSTEM_FACE_TRACKING_PROPERTIES_FB: XrStructureType = 1000201004;
pub const XrStructureType_XR_TYPE_FACE_TRACKER_CREATE_INFO_FB: XrStructureType = 1000201005;
pub const XrStructureType_XR_TYPE_FACE_EXPRESSION_INFO_FB: XrStructureType = 1000201002;
pub const XrStructureType_XR_TYPE_FACE_EXPRESSION_WEIGHTS_FB: XrStructureType = 1000201006;
pub const XrStructureType_XR_TYPE_EYE_TRACKER_CREATE_INFO_FB: XrStructureType = 1000202001;
pub const XrStructureType_XR_TYPE_EYE_GAZES_INFO_FB: XrStructureType = 1000202002;
pub const XrStructureType_XR_TYPE_EYE_GAZES_FB: XrStructureType = 1000202003;
pub const XrStructureType_XR_TYPE_SYSTEM_EYE_TRACKING_PROPERTIES_FB: XrStructureType = 1000202004;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_KEYBOARD_HANDS_INTENSITY_FB: XrStructureType =
    1000203002;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_SETTINGS_FB: XrStructureType = 1000204000;
pub const XrStructureType_XR_TYPE_HAPTIC_PCM_VIBRATION_FB: XrStructureType = 1000209001;
pub const XrStructureType_XR_TYPE_DEVICE_PCM_SAMPLE_RATE_STATE_FB: XrStructureType = 1000209002;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_DEPTH_TEST_FB: XrStructureType = 1000212000;
pub const XrStructureType_XR_TYPE_LOCAL_DIMMING_FRAME_END_INFO_META: XrStructureType = 1000216000;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_PREFERENCES_META: XrStructureType = 1000217000;
pub const XrStructureType_XR_TYPE_SYSTEM_VIRTUAL_KEYBOARD_PROPERTIES_META: XrStructureType =
    1000219001;
pub const XrStructureType_XR_TYPE_VIRTUAL_KEYBOARD_CREATE_INFO_META: XrStructureType = 1000219002;
pub const XrStructureType_XR_TYPE_VIRTUAL_KEYBOARD_SPACE_CREATE_INFO_META: XrStructureType =
    1000219003;
pub const XrStructureType_XR_TYPE_VIRTUAL_KEYBOARD_LOCATION_INFO_META: XrStructureType = 1000219004;
pub const XrStructureType_XR_TYPE_VIRTUAL_KEYBOARD_MODEL_VISIBILITY_SET_INFO_META: XrStructureType =
    1000219005;
pub const XrStructureType_XR_TYPE_VIRTUAL_KEYBOARD_ANIMATION_STATE_META: XrStructureType =
    1000219006;
pub const XrStructureType_XR_TYPE_VIRTUAL_KEYBOARD_MODEL_ANIMATION_STATES_META: XrStructureType =
    1000219007;
pub const XrStructureType_XR_TYPE_VIRTUAL_KEYBOARD_TEXTURE_DATA_META: XrStructureType = 1000219009;
pub const XrStructureType_XR_TYPE_VIRTUAL_KEYBOARD_INPUT_INFO_META: XrStructureType = 1000219010;
pub const XrStructureType_XR_TYPE_VIRTUAL_KEYBOARD_TEXT_CONTEXT_CHANGE_INFO_META: XrStructureType =
    1000219011;
pub const XrStructureType_XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_COMMIT_TEXT_META: XrStructureType =
    1000219014;
pub const XrStructureType_XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_BACKSPACE_META: XrStructureType =
    1000219015;
pub const XrStructureType_XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_ENTER_META: XrStructureType =
    1000219016;
pub const XrStructureType_XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_SHOWN_META: XrStructureType =
    1000219017;
pub const XrStructureType_XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_HIDDEN_META: XrStructureType =
    1000219018;
pub const XrStructureType_XR_TYPE_EXTERNAL_CAMERA_OCULUS: XrStructureType = 1000226000;
pub const XrStructureType_XR_TYPE_VULKAN_SWAPCHAIN_CREATE_INFO_META: XrStructureType = 1000227000;
pub const XrStructureType_XR_TYPE_PERFORMANCE_METRICS_STATE_META: XrStructureType = 1000232001;
pub const XrStructureType_XR_TYPE_PERFORMANCE_METRICS_COUNTER_META: XrStructureType = 1000232002;
pub const XrStructureType_XR_TYPE_SPACE_LIST_SAVE_INFO_FB: XrStructureType = 1000238000;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SPACE_LIST_SAVE_COMPLETE_FB: XrStructureType =
    1000238001;
pub const XrStructureType_XR_TYPE_SPACE_USER_CREATE_INFO_FB: XrStructureType = 1000241001;
pub const XrStructureType_XR_TYPE_SYSTEM_HEADSET_ID_PROPERTIES_META: XrStructureType = 1000245000;
pub const XrStructureType_XR_TYPE_RECOMMENDED_LAYER_RESOLUTION_META: XrStructureType = 1000254000;
pub const XrStructureType_XR_TYPE_RECOMMENDED_LAYER_RESOLUTION_GET_INFO_META: XrStructureType =
    1000254001;
pub const XrStructureType_XR_TYPE_SYSTEM_PASSTHROUGH_COLOR_LUT_PROPERTIES_META: XrStructureType =
    1000266000;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_COLOR_LUT_CREATE_INFO_META: XrStructureType =
    1000266001;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_COLOR_LUT_UPDATE_INFO_META: XrStructureType =
    1000266002;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_COLOR_MAP_LUT_META: XrStructureType = 1000266100;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_COLOR_MAP_INTERPOLATED_LUT_META: XrStructureType =
    1000266101;
pub const XrStructureType_XR_TYPE_SPACE_TRIANGLE_MESH_GET_INFO_META: XrStructureType = 1000269001;
pub const XrStructureType_XR_TYPE_SPACE_TRIANGLE_MESH_META: XrStructureType = 1000269002;
pub const XrStructureType_XR_TYPE_EVENT_DATA_PASSTHROUGH_LAYER_RESUMED_META: XrStructureType =
    1000282000;
pub const XrStructureType_XR_TYPE_SYSTEM_FACE_TRACKING_PROPERTIES2_FB: XrStructureType = 1000287013;
pub const XrStructureType_XR_TYPE_FACE_TRACKER_CREATE_INFO2_FB: XrStructureType = 1000287014;
pub const XrStructureType_XR_TYPE_FACE_EXPRESSION_INFO2_FB: XrStructureType = 1000287015;
pub const XrStructureType_XR_TYPE_FACE_EXPRESSION_WEIGHTS2_FB: XrStructureType = 1000287016;
pub const XrStructureType_XR_TYPE_SYSTEM_SPATIAL_ENTITY_SHARING_PROPERTIES_META: XrStructureType =
    1000290000;
pub const XrStructureType_XR_TYPE_SHARE_SPACES_INFO_META: XrStructureType = 1000290001;
pub const XrStructureType_XR_TYPE_EVENT_DATA_SHARE_SPACES_COMPLETE_META: XrStructureType =
    1000290002;
pub const XrStructureType_XR_TYPE_ENVIRONMENT_DEPTH_PROVIDER_CREATE_INFO_META: XrStructureType =
    1000291000;
pub const XrStructureType_XR_TYPE_ENVIRONMENT_DEPTH_SWAPCHAIN_CREATE_INFO_META: XrStructureType =
    1000291001;
pub const XrStructureType_XR_TYPE_ENVIRONMENT_DEPTH_SWAPCHAIN_STATE_META: XrStructureType =
    1000291002;
pub const XrStructureType_XR_TYPE_ENVIRONMENT_DEPTH_IMAGE_ACQUIRE_INFO_META: XrStructureType =
    1000291003;
pub const XrStructureType_XR_TYPE_ENVIRONMENT_DEPTH_IMAGE_VIEW_META: XrStructureType = 1000291004;
pub const XrStructureType_XR_TYPE_ENVIRONMENT_DEPTH_IMAGE_META: XrStructureType = 1000291005;
pub const XrStructureType_XR_TYPE_ENVIRONMENT_DEPTH_HAND_REMOVAL_SET_INFO_META: XrStructureType =
    1000291006;
pub const XrStructureType_XR_TYPE_SYSTEM_ENVIRONMENT_DEPTH_PROPERTIES_META: XrStructureType =
    1000291007;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_CREATE_INFO_HTC: XrStructureType = 1000317001;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_COLOR_HTC: XrStructureType = 1000317002;
pub const XrStructureType_XR_TYPE_PASSTHROUGH_MESH_TRANSFORM_INFO_HTC: XrStructureType = 1000317003;
pub const XrStructureType_XR_TYPE_COMPOSITION_LAYER_PASSTHROUGH_HTC: XrStructureType = 1000317004;
pub const XrStructureType_XR_TYPE_FOVEATION_APPLY_INFO_HTC: XrStructureType = 1000318000;
pub const XrStructureType_XR_TYPE_FOVEATION_DYNAMIC_MODE_INFO_HTC: XrStructureType = 1000318001;
pub const XrStructureType_XR_TYPE_FOVEATION_CUSTOM_MODE_INFO_HTC: XrStructureType = 1000318002;
pub const XrStructureType_XR_TYPE_SYSTEM_ANCHOR_PROPERTIES_HTC: XrStructureType = 1000319000;
pub const XrStructureType_XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_HTC: XrStructureType = 1000319001;
pub const XrStructureType_XR_TYPE_SYSTEM_BODY_TRACKING_PROPERTIES_HTC: XrStructureType = 1000320000;
pub const XrStructureType_XR_TYPE_BODY_TRACKER_CREATE_INFO_HTC: XrStructureType = 1000320001;
pub const XrStructureType_XR_TYPE_BODY_JOINTS_LOCATE_INFO_HTC: XrStructureType = 1000320002;
pub const XrStructureType_XR_TYPE_BODY_JOINT_LOCATIONS_HTC: XrStructureType = 1000320003;
pub const XrStructureType_XR_TYPE_BODY_SKELETON_HTC: XrStructureType = 1000320004;
pub const XrStructureType_XR_TYPE_ACTIVE_ACTION_SET_PRIORITIES_EXT: XrStructureType = 1000373000;
pub const XrStructureType_XR_TYPE_SYSTEM_FORCE_FEEDBACK_CURL_PROPERTIES_MNDX: XrStructureType =
    1000375000;
pub const XrStructureType_XR_TYPE_FORCE_FEEDBACK_CURL_APPLY_LOCATIONS_MNDX: XrStructureType =
    1000375001;
pub const XrStructureType_XR_TYPE_HAND_TRACKING_DATA_SOURCE_INFO_EXT: XrStructureType = 1000428000;
pub const XrStructureType_XR_TYPE_HAND_TRACKING_DATA_SOURCE_STATE_EXT: XrStructureType = 1000428001;
pub const XrStructureType_XR_TYPE_PLANE_DETECTOR_CREATE_INFO_EXT: XrStructureType = 1000429001;
pub const XrStructureType_XR_TYPE_PLANE_DETECTOR_BEGIN_INFO_EXT: XrStructureType = 1000429002;
pub const XrStructureType_XR_TYPE_PLANE_DETECTOR_GET_INFO_EXT: XrStructureType = 1000429003;
pub const XrStructureType_XR_TYPE_PLANE_DETECTOR_LOCATIONS_EXT: XrStructureType = 1000429004;
pub const XrStructureType_XR_TYPE_PLANE_DETECTOR_LOCATION_EXT: XrStructureType = 1000429005;
pub const XrStructureType_XR_TYPE_PLANE_DETECTOR_POLYGON_BUFFER_EXT: XrStructureType = 1000429006;
pub const XrStructureType_XR_TYPE_SYSTEM_PLANE_DETECTION_PROPERTIES_EXT: XrStructureType =
    1000429007;
pub const XrStructureType_XR_TYPE_FUTURE_CANCEL_INFO_EXT: XrStructureType = 1000469000;
pub const XrStructureType_XR_TYPE_FUTURE_POLL_INFO_EXT: XrStructureType = 1000469001;
pub const XrStructureType_XR_TYPE_FUTURE_COMPLETION_EXT: XrStructureType = 1000469002;
pub const XrStructureType_XR_TYPE_FUTURE_POLL_RESULT_EXT: XrStructureType = 1000469003;
pub const XrStructureType_XR_TYPE_EVENT_DATA_USER_PRESENCE_CHANGED_EXT: XrStructureType =
    1000470000;
pub const XrStructureType_XR_TYPE_SYSTEM_USER_PRESENCE_PROPERTIES_EXT: XrStructureType = 1000470001;
pub const XrStructureType_XR_TYPE_SYSTEM_NOTIFICATIONS_SET_INFO_ML: XrStructureType = 1000473000;
pub const XrStructureType_XR_TYPE_WORLD_MESH_DETECTOR_CREATE_INFO_ML: XrStructureType = 1000474001;
pub const XrStructureType_XR_TYPE_WORLD_MESH_STATE_REQUEST_INFO_ML: XrStructureType = 1000474002;
pub const XrStructureType_XR_TYPE_WORLD_MESH_BLOCK_STATE_ML: XrStructureType = 1000474003;
pub const XrStructureType_XR_TYPE_WORLD_MESH_STATE_REQUEST_COMPLETION_ML: XrStructureType =
    1000474004;
pub const XrStructureType_XR_TYPE_WORLD_MESH_BUFFER_RECOMMENDED_SIZE_INFO_ML: XrStructureType =
    1000474005;
pub const XrStructureType_XR_TYPE_WORLD_MESH_BUFFER_SIZE_ML: XrStructureType = 1000474006;
pub const XrStructureType_XR_TYPE_WORLD_MESH_BUFFER_ML: XrStructureType = 1000474007;
pub const XrStructureType_XR_TYPE_WORLD_MESH_BLOCK_REQUEST_ML: XrStructureType = 1000474008;
pub const XrStructureType_XR_TYPE_WORLD_MESH_GET_INFO_ML: XrStructureType = 1000474009;
pub const XrStructureType_XR_TYPE_WORLD_MESH_BLOCK_ML: XrStructureType = 1000474010;
pub const XrStructureType_XR_TYPE_WORLD_MESH_REQUEST_COMPLETION_ML: XrStructureType = 1000474011;
pub const XrStructureType_XR_TYPE_WORLD_MESH_REQUEST_COMPLETION_INFO_ML: XrStructureType =
    1000474012;
pub const XrStructureType_XR_TYPE_SYSTEM_FACIAL_EXPRESSION_PROPERTIES_ML: XrStructureType =
    1000482004;
pub const XrStructureType_XR_TYPE_FACIAL_EXPRESSION_CLIENT_CREATE_INFO_ML: XrStructureType =
    1000482005;
pub const XrStructureType_XR_TYPE_FACIAL_EXPRESSION_BLEND_SHAPE_GET_INFO_ML: XrStructureType =
    1000482006;
pub const XrStructureType_XR_TYPE_FACIAL_EXPRESSION_BLEND_SHAPE_PROPERTIES_ML: XrStructureType =
    1000482007;
pub const XrStructureType_XR_TYPE_COLOCATION_DISCOVERY_START_INFO_META: XrStructureType =
    1000571010;
pub const XrStructureType_XR_TYPE_COLOCATION_DISCOVERY_STOP_INFO_META: XrStructureType = 1000571011;
pub const XrStructureType_XR_TYPE_COLOCATION_ADVERTISEMENT_START_INFO_META: XrStructureType =
    1000571012;
pub const XrStructureType_XR_TYPE_COLOCATION_ADVERTISEMENT_STOP_INFO_META: XrStructureType =
    1000571013;
pub const XrStructureType_XR_TYPE_EVENT_DATA_START_COLOCATION_ADVERTISEMENT_COMPLETE_META:
    XrStructureType = 1000571020;
pub const XrStructureType_XR_TYPE_EVENT_DATA_STOP_COLOCATION_ADVERTISEMENT_COMPLETE_META:
    XrStructureType = 1000571021;
pub const XrStructureType_XR_TYPE_EVENT_DATA_COLOCATION_ADVERTISEMENT_COMPLETE_META:
    XrStructureType = 1000571022;
pub const XrStructureType_XR_TYPE_EVENT_DATA_START_COLOCATION_DISCOVERY_COMPLETE_META:
    XrStructureType = 1000571023;
pub const XrStructureType_XR_TYPE_EVENT_DATA_COLOCATION_DISCOVERY_RESULT_META: XrStructureType =
    1000571024;
pub const XrStructureType_XR_TYPE_EVENT_DATA_COLOCATION_DISCOVERY_COMPLETE_META: XrStructureType =
    1000571025;
pub const XrStructureType_XR_TYPE_EVENT_DATA_STOP_COLOCATION_DISCOVERY_COMPLETE_META:
    XrStructureType = 1000571026;
pub const XrStructureType_XR_TYPE_SYSTEM_COLOCATION_DISCOVERY_PROPERTIES_META: XrStructureType =
    1000571030;
pub const XrStructureType_XR_TYPE_SHARE_SPACES_RECIPIENT_GROUPS_META: XrStructureType = 1000572000;
pub const XrStructureType_XR_TYPE_SPACE_GROUP_UUID_FILTER_INFO_META: XrStructureType = 1000572001;
pub const XrStructureType_XR_TYPE_SYSTEM_SPATIAL_ENTITY_GROUP_SHARING_PROPERTIES_META:
    XrStructureType = 1000572100;
pub const XrStructureType_XR_TYPE_GRAPHICS_BINDING_VULKAN2_KHR: XrStructureType = 1000025000;
pub const XrStructureType_XR_TYPE_SWAPCHAIN_IMAGE_VULKAN2_KHR: XrStructureType = 1000025001;
pub const XrStructureType_XR_TYPE_GRAPHICS_REQUIREMENTS_VULKAN2_KHR: XrStructureType = 1000025002;
pub const XrStructureType_XR_TYPE_DEVICE_PCM_SAMPLE_RATE_GET_INFO_FB: XrStructureType = 1000209002;
pub const XrStructureType_XR_TYPE_SPACES_LOCATE_INFO_KHR: XrStructureType = 1000471000;
pub const XrStructureType_XR_TYPE_SPACE_LOCATIONS_KHR: XrStructureType = 1000471001;
pub const XrStructureType_XR_TYPE_SPACE_VELOCITIES_KHR: XrStructureType = 1000471002;
pub const XrStructureType_XR_STRUCTURE_TYPE_MAX_ENUM: XrStructureType = 2147483647;
pub type XrStructureType = ::std::os::raw::c_uint;
pub const XrFormFactor_XR_FORM_FACTOR_HEAD_MOUNTED_DISPLAY: XrFormFactor = 1;
pub const XrFormFactor_XR_FORM_FACTOR_HANDHELD_DISPLAY: XrFormFactor = 2;
pub const XrFormFactor_XR_FORM_FACTOR_MAX_ENUM: XrFormFactor = 2147483647;
pub type XrFormFactor = ::std::os::raw::c_uint;
pub const XrViewConfigurationType_XR_VIEW_CONFIGURATION_TYPE_PRIMARY_MONO: XrViewConfigurationType =
    1;
pub const XrViewConfigurationType_XR_VIEW_CONFIGURATION_TYPE_PRIMARY_STEREO:
    XrViewConfigurationType = 2;
pub const XrViewConfigurationType_XR_VIEW_CONFIGURATION_TYPE_PRIMARY_STEREO_WITH_FOVEATED_INSET:
    XrViewConfigurationType = 1000037000;
pub const XrViewConfigurationType_XR_VIEW_CONFIGURATION_TYPE_SECONDARY_MONO_FIRST_PERSON_OBSERVER_MSFT : XrViewConfigurationType = 1000054000 ;
pub const XrViewConfigurationType_XR_VIEW_CONFIGURATION_TYPE_PRIMARY_QUAD_VARJO:
    XrViewConfigurationType = 1000037000;
pub const XrViewConfigurationType_XR_VIEW_CONFIGURATION_TYPE_MAX_ENUM: XrViewConfigurationType =
    2147483647;
pub type XrViewConfigurationType = ::std::os::raw::c_uint;
pub const XrEnvironmentBlendMode_XR_ENVIRONMENT_BLEND_MODE_OPAQUE: XrEnvironmentBlendMode = 1;
pub const XrEnvironmentBlendMode_XR_ENVIRONMENT_BLEND_MODE_ADDITIVE: XrEnvironmentBlendMode = 2;
pub const XrEnvironmentBlendMode_XR_ENVIRONMENT_BLEND_MODE_ALPHA_BLEND: XrEnvironmentBlendMode = 3;
pub const XrEnvironmentBlendMode_XR_ENVIRONMENT_BLEND_MODE_MAX_ENUM: XrEnvironmentBlendMode =
    2147483647;
pub type XrEnvironmentBlendMode = ::std::os::raw::c_uint;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_VIEW: XrReferenceSpaceType = 1;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_LOCAL: XrReferenceSpaceType = 2;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_STAGE: XrReferenceSpaceType = 3;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_LOCAL_FLOOR: XrReferenceSpaceType =
    1000426000;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_UNBOUNDED_MSFT: XrReferenceSpaceType =
    1000038000;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_COMBINED_EYE_VARJO: XrReferenceSpaceType =
    1000121000;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_LOCALIZATION_MAP_ML: XrReferenceSpaceType =
    1000139000;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_LOCAL_FLOOR_EXT: XrReferenceSpaceType =
    1000426000;
pub const XrReferenceSpaceType_XR_REFERENCE_SPACE_TYPE_MAX_ENUM: XrReferenceSpaceType = 2147483647;
pub type XrReferenceSpaceType = ::std::os::raw::c_uint;
pub const XrActionType_XR_ACTION_TYPE_BOOLEAN_INPUT: XrActionType = 1;
pub const XrActionType_XR_ACTION_TYPE_FLOAT_INPUT: XrActionType = 2;
pub const XrActionType_XR_ACTION_TYPE_VECTOR2F_INPUT: XrActionType = 3;
pub const XrActionType_XR_ACTION_TYPE_POSE_INPUT: XrActionType = 4;
pub const XrActionType_XR_ACTION_TYPE_VIBRATION_OUTPUT: XrActionType = 100;
pub const XrActionType_XR_ACTION_TYPE_MAX_ENUM: XrActionType = 2147483647;
pub type XrActionType = ::std::os::raw::c_uint;
pub const XrEyeVisibility_XR_EYE_VISIBILITY_BOTH: XrEyeVisibility = 0;
pub const XrEyeVisibility_XR_EYE_VISIBILITY_LEFT: XrEyeVisibility = 1;
pub const XrEyeVisibility_XR_EYE_VISIBILITY_RIGHT: XrEyeVisibility = 2;
pub const XrEyeVisibility_XR_EYE_VISIBILITY_MAX_ENUM: XrEyeVisibility = 2147483647;
pub type XrEyeVisibility = ::std::os::raw::c_uint;
pub const XrSessionState_XR_SESSION_STATE_UNKNOWN: XrSessionState = 0;
pub const XrSessionState_XR_SESSION_STATE_IDLE: XrSessionState = 1;
pub const XrSessionState_XR_SESSION_STATE_READY: XrSessionState = 2;
pub const XrSessionState_XR_SESSION_STATE_SYNCHRONIZED: XrSessionState = 3;
pub const XrSessionState_XR_SESSION_STATE_VISIBLE: XrSessionState = 4;
pub const XrSessionState_XR_SESSION_STATE_FOCUSED: XrSessionState = 5;
pub const XrSessionState_XR_SESSION_STATE_STOPPING: XrSessionState = 6;
pub const XrSessionState_XR_SESSION_STATE_LOSS_PENDING: XrSessionState = 7;
pub const XrSessionState_XR_SESSION_STATE_EXITING: XrSessionState = 8;
pub const XrSessionState_XR_SESSION_STATE_MAX_ENUM: XrSessionState = 2147483647;
pub type XrSessionState = ::std::os::raw::c_uint;
pub const XrObjectType_XR_OBJECT_TYPE_UNKNOWN: XrObjectType = 0;
pub const XrObjectType_XR_OBJECT_TYPE_INSTANCE: XrObjectType = 1;
pub const XrObjectType_XR_OBJECT_TYPE_SESSION: XrObjectType = 2;
pub const XrObjectType_XR_OBJECT_TYPE_SWAPCHAIN: XrObjectType = 3;
pub const XrObjectType_XR_OBJECT_TYPE_SPACE: XrObjectType = 4;
pub const XrObjectType_XR_OBJECT_TYPE_ACTION_SET: XrObjectType = 5;
pub const XrObjectType_XR_OBJECT_TYPE_ACTION: XrObjectType = 6;
pub const XrObjectType_XR_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT: XrObjectType = 1000019000;
pub const XrObjectType_XR_OBJECT_TYPE_SPATIAL_ANCHOR_MSFT: XrObjectType = 1000039000;
pub const XrObjectType_XR_OBJECT_TYPE_SPATIAL_GRAPH_NODE_BINDING_MSFT: XrObjectType = 1000049000;
pub const XrObjectType_XR_OBJECT_TYPE_HAND_TRACKER_EXT: XrObjectType = 1000051000;
pub const XrObjectType_XR_OBJECT_TYPE_BODY_TRACKER_FB: XrObjectType = 1000076000;
pub const XrObjectType_XR_OBJECT_TYPE_SCENE_OBSERVER_MSFT: XrObjectType = 1000097000;
pub const XrObjectType_XR_OBJECT_TYPE_SCENE_MSFT: XrObjectType = 1000097001;
pub const XrObjectType_XR_OBJECT_TYPE_FACIAL_TRACKER_HTC: XrObjectType = 1000104000;
pub const XrObjectType_XR_OBJECT_TYPE_FOVEATION_PROFILE_FB: XrObjectType = 1000114000;
pub const XrObjectType_XR_OBJECT_TYPE_TRIANGLE_MESH_FB: XrObjectType = 1000117000;
pub const XrObjectType_XR_OBJECT_TYPE_PASSTHROUGH_FB: XrObjectType = 1000118000;
pub const XrObjectType_XR_OBJECT_TYPE_PASSTHROUGH_LAYER_FB: XrObjectType = 1000118002;
pub const XrObjectType_XR_OBJECT_TYPE_GEOMETRY_INSTANCE_FB: XrObjectType = 1000118004;
pub const XrObjectType_XR_OBJECT_TYPE_MARKER_DETECTOR_ML: XrObjectType = 1000138000;
pub const XrObjectType_XR_OBJECT_TYPE_EXPORTED_LOCALIZATION_MAP_ML: XrObjectType = 1000139000;
pub const XrObjectType_XR_OBJECT_TYPE_SPATIAL_ANCHORS_STORAGE_ML: XrObjectType = 1000141000;
pub const XrObjectType_XR_OBJECT_TYPE_SPATIAL_ANCHOR_STORE_CONNECTION_MSFT: XrObjectType =
    1000142000;
pub const XrObjectType_XR_OBJECT_TYPE_FACE_TRACKER_FB: XrObjectType = 1000201000;
pub const XrObjectType_XR_OBJECT_TYPE_EYE_TRACKER_FB: XrObjectType = 1000202000;
pub const XrObjectType_XR_OBJECT_TYPE_VIRTUAL_KEYBOARD_META: XrObjectType = 1000219000;
pub const XrObjectType_XR_OBJECT_TYPE_SPACE_USER_FB: XrObjectType = 1000241000;
pub const XrObjectType_XR_OBJECT_TYPE_PASSTHROUGH_COLOR_LUT_META: XrObjectType = 1000266000;
pub const XrObjectType_XR_OBJECT_TYPE_FACE_TRACKER2_FB: XrObjectType = 1000287012;
pub const XrObjectType_XR_OBJECT_TYPE_ENVIRONMENT_DEPTH_PROVIDER_META: XrObjectType = 1000291000;
pub const XrObjectType_XR_OBJECT_TYPE_ENVIRONMENT_DEPTH_SWAPCHAIN_META: XrObjectType = 1000291001;
pub const XrObjectType_XR_OBJECT_TYPE_PASSTHROUGH_HTC: XrObjectType = 1000317000;
pub const XrObjectType_XR_OBJECT_TYPE_BODY_TRACKER_HTC: XrObjectType = 1000320000;
pub const XrObjectType_XR_OBJECT_TYPE_PLANE_DETECTOR_EXT: XrObjectType = 1000429000;
pub const XrObjectType_XR_OBJECT_TYPE_WORLD_MESH_DETECTOR_ML: XrObjectType = 1000474000;
pub const XrObjectType_XR_OBJECT_TYPE_FACIAL_EXPRESSION_CLIENT_ML: XrObjectType = 1000482000;
pub const XrObjectType_XR_OBJECT_TYPE_MAX_ENUM: XrObjectType = 2147483647;
pub type XrObjectType = ::std::os::raw::c_uint;
pub type XrInstanceCreateFlags = XrFlags64;
pub type XrSessionCreateFlags = XrFlags64;
pub type XrSpaceVelocityFlags = XrFlags64;
pub const XR_SPACE_VELOCITY_LINEAR_VALID_BIT: XrSpaceVelocityFlags = 1;
pub const XR_SPACE_VELOCITY_ANGULAR_VALID_BIT: XrSpaceVelocityFlags = 2;
pub type XrSpaceLocationFlags = XrFlags64;
pub const XR_SPACE_LOCATION_ORIENTATION_VALID_BIT: XrSpaceLocationFlags = 1;
pub const XR_SPACE_LOCATION_POSITION_VALID_BIT: XrSpaceLocationFlags = 2;
pub const XR_SPACE_LOCATION_ORIENTATION_TRACKED_BIT: XrSpaceLocationFlags = 4;
pub const XR_SPACE_LOCATION_POSITION_TRACKED_BIT: XrSpaceLocationFlags = 8;
pub type XrSwapchainCreateFlags = XrFlags64;
pub const XR_SWAPCHAIN_CREATE_PROTECTED_CONTENT_BIT: XrSwapchainCreateFlags = 1;
pub const XR_SWAPCHAIN_CREATE_STATIC_IMAGE_BIT: XrSwapchainCreateFlags = 2;
pub type XrSwapchainUsageFlags = XrFlags64;
pub const XR_SWAPCHAIN_USAGE_COLOR_ATTACHMENT_BIT: XrSwapchainUsageFlags = 1;
pub const XR_SWAPCHAIN_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT: XrSwapchainUsageFlags = 2;
pub const XR_SWAPCHAIN_USAGE_UNORDERED_ACCESS_BIT: XrSwapchainUsageFlags = 4;
pub const XR_SWAPCHAIN_USAGE_TRANSFER_SRC_BIT: XrSwapchainUsageFlags = 8;
pub const XR_SWAPCHAIN_USAGE_TRANSFER_DST_BIT: XrSwapchainUsageFlags = 16;
pub const XR_SWAPCHAIN_USAGE_SAMPLED_BIT: XrSwapchainUsageFlags = 32;
pub const XR_SWAPCHAIN_USAGE_MUTABLE_FORMAT_BIT: XrSwapchainUsageFlags = 64;
pub const XR_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_MND: XrSwapchainUsageFlags = 128;
pub const XR_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_KHR: XrSwapchainUsageFlags = 128;
pub type XrCompositionLayerFlags = XrFlags64;
pub const XR_COMPOSITION_LAYER_CORRECT_CHROMATIC_ABERRATION_BIT: XrCompositionLayerFlags = 1;
pub const XR_COMPOSITION_LAYER_BLEND_TEXTURE_SOURCE_ALPHA_BIT: XrCompositionLayerFlags = 2;
pub const XR_COMPOSITION_LAYER_UNPREMULTIPLIED_ALPHA_BIT: XrCompositionLayerFlags = 4;
pub const XR_COMPOSITION_LAYER_INVERTED_ALPHA_BIT_EXT: XrCompositionLayerFlags = 8;
pub type XrViewStateFlags = XrFlags64;
pub const XR_VIEW_STATE_ORIENTATION_VALID_BIT: XrViewStateFlags = 1;
pub const XR_VIEW_STATE_POSITION_VALID_BIT: XrViewStateFlags = 2;
pub const XR_VIEW_STATE_ORIENTATION_TRACKED_BIT: XrViewStateFlags = 4;
pub const XR_VIEW_STATE_POSITION_TRACKED_BIT: XrViewStateFlags = 8;
pub type XrInputSourceLocalizedNameFlags = XrFlags64;
pub const XR_INPUT_SOURCE_LOCALIZED_NAME_USER_PATH_BIT: XrInputSourceLocalizedNameFlags = 1;
pub const XR_INPUT_SOURCE_LOCALIZED_NAME_INTERACTION_PROFILE_BIT: XrInputSourceLocalizedNameFlags =
    2;
pub const XR_INPUT_SOURCE_LOCALIZED_NAME_COMPONENT_BIT: XrInputSourceLocalizedNameFlags = 4;
pub type PFN_xrVoidFunction = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrApiLayerProperties {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub layerName: [::std::os::raw::c_char; 256usize],
    pub specVersion: XrVersion,
    pub layerVersion: u32,
    pub description: [::std::os::raw::c_char; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrApiLayerProperties"][::std::mem::size_of::<XrApiLayerProperties>() - 544usize];
    ["Alignment of XrApiLayerProperties"][::std::mem::align_of::<XrApiLayerProperties>() - 8usize];
    ["Offset of field: XrApiLayerProperties::type_"]
        [::std::mem::offset_of!(XrApiLayerProperties, type_) - 0usize];
    ["Offset of field: XrApiLayerProperties::next"]
        [::std::mem::offset_of!(XrApiLayerProperties, next) - 8usize];
    ["Offset of field: XrApiLayerProperties::layerName"]
        [::std::mem::offset_of!(XrApiLayerProperties, layerName) - 16usize];
    ["Offset of field: XrApiLayerProperties::specVersion"]
        [::std::mem::offset_of!(XrApiLayerProperties, specVersion) - 272usize];
    ["Offset of field: XrApiLayerProperties::layerVersion"]
        [::std::mem::offset_of!(XrApiLayerProperties, layerVersion) - 280usize];
    ["Offset of field: XrApiLayerProperties::description"]
        [::std::mem::offset_of!(XrApiLayerProperties, description) - 284usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrExtensionProperties {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub extensionName: [::std::os::raw::c_char; 128usize],
    pub extensionVersion: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrExtensionProperties"][::std::mem::size_of::<XrExtensionProperties>() - 152usize];
    ["Alignment of XrExtensionProperties"]
        [::std::mem::align_of::<XrExtensionProperties>() - 8usize];
    ["Offset of field: XrExtensionProperties::type_"]
        [::std::mem::offset_of!(XrExtensionProperties, type_) - 0usize];
    ["Offset of field: XrExtensionProperties::next"]
        [::std::mem::offset_of!(XrExtensionProperties, next) - 8usize];
    ["Offset of field: XrExtensionProperties::extensionName"]
        [::std::mem::offset_of!(XrExtensionProperties, extensionName) - 16usize];
    ["Offset of field: XrExtensionProperties::extensionVersion"]
        [::std::mem::offset_of!(XrExtensionProperties, extensionVersion) - 144usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrApplicationInfo {
    pub applicationName: [::std::os::raw::c_char; 128usize],
    pub applicationVersion: u32,
    pub engineName: [::std::os::raw::c_char; 128usize],
    pub engineVersion: u32,
    pub apiVersion: XrVersion,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrApplicationInfo"][::std::mem::size_of::<XrApplicationInfo>() - 272usize];
    ["Alignment of XrApplicationInfo"][::std::mem::align_of::<XrApplicationInfo>() - 8usize];
    ["Offset of field: XrApplicationInfo::applicationName"]
        [::std::mem::offset_of!(XrApplicationInfo, applicationName) - 0usize];
    ["Offset of field: XrApplicationInfo::applicationVersion"]
        [::std::mem::offset_of!(XrApplicationInfo, applicationVersion) - 128usize];
    ["Offset of field: XrApplicationInfo::engineName"]
        [::std::mem::offset_of!(XrApplicationInfo, engineName) - 132usize];
    ["Offset of field: XrApplicationInfo::engineVersion"]
        [::std::mem::offset_of!(XrApplicationInfo, engineVersion) - 260usize];
    ["Offset of field: XrApplicationInfo::apiVersion"]
        [::std::mem::offset_of!(XrApplicationInfo, apiVersion) - 264usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrInstanceCreateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub createFlags: XrInstanceCreateFlags,
    pub applicationInfo: XrApplicationInfo,
    pub enabledApiLayerCount: u32,
    pub enabledApiLayerNames: *const *const ::std::os::raw::c_char,
    pub enabledExtensionCount: u32,
    pub enabledExtensionNames: *const *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrInstanceCreateInfo"][::std::mem::size_of::<XrInstanceCreateInfo>() - 328usize];
    ["Alignment of XrInstanceCreateInfo"][::std::mem::align_of::<XrInstanceCreateInfo>() - 8usize];
    ["Offset of field: XrInstanceCreateInfo::type_"]
        [::std::mem::offset_of!(XrInstanceCreateInfo, type_) - 0usize];
    ["Offset of field: XrInstanceCreateInfo::next"]
        [::std::mem::offset_of!(XrInstanceCreateInfo, next) - 8usize];
    ["Offset of field: XrInstanceCreateInfo::createFlags"]
        [::std::mem::offset_of!(XrInstanceCreateInfo, createFlags) - 16usize];
    ["Offset of field: XrInstanceCreateInfo::applicationInfo"]
        [::std::mem::offset_of!(XrInstanceCreateInfo, applicationInfo) - 24usize];
    ["Offset of field: XrInstanceCreateInfo::enabledApiLayerCount"]
        [::std::mem::offset_of!(XrInstanceCreateInfo, enabledApiLayerCount) - 296usize];
    ["Offset of field: XrInstanceCreateInfo::enabledApiLayerNames"]
        [::std::mem::offset_of!(XrInstanceCreateInfo, enabledApiLayerNames) - 304usize];
    ["Offset of field: XrInstanceCreateInfo::enabledExtensionCount"]
        [::std::mem::offset_of!(XrInstanceCreateInfo, enabledExtensionCount) - 312usize];
    ["Offset of field: XrInstanceCreateInfo::enabledExtensionNames"]
        [::std::mem::offset_of!(XrInstanceCreateInfo, enabledExtensionNames) - 320usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrInstanceProperties {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub runtimeVersion: XrVersion,
    pub runtimeName: [::std::os::raw::c_char; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrInstanceProperties"][::std::mem::size_of::<XrInstanceProperties>() - 152usize];
    ["Alignment of XrInstanceProperties"][::std::mem::align_of::<XrInstanceProperties>() - 8usize];
    ["Offset of field: XrInstanceProperties::type_"]
        [::std::mem::offset_of!(XrInstanceProperties, type_) - 0usize];
    ["Offset of field: XrInstanceProperties::next"]
        [::std::mem::offset_of!(XrInstanceProperties, next) - 8usize];
    ["Offset of field: XrInstanceProperties::runtimeVersion"]
        [::std::mem::offset_of!(XrInstanceProperties, runtimeVersion) - 16usize];
    ["Offset of field: XrInstanceProperties::runtimeName"]
        [::std::mem::offset_of!(XrInstanceProperties, runtimeName) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataBuffer {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub varying: [u8; 4000usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataBuffer"][::std::mem::size_of::<XrEventDataBuffer>() - 4016usize];
    ["Alignment of XrEventDataBuffer"][::std::mem::align_of::<XrEventDataBuffer>() - 8usize];
    ["Offset of field: XrEventDataBuffer::type_"]
        [::std::mem::offset_of!(XrEventDataBuffer, type_) - 0usize];
    ["Offset of field: XrEventDataBuffer::next"]
        [::std::mem::offset_of!(XrEventDataBuffer, next) - 8usize];
    ["Offset of field: XrEventDataBuffer::varying"]
        [::std::mem::offset_of!(XrEventDataBuffer, varying) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemGetInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub formFactor: XrFormFactor,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemGetInfo"][::std::mem::size_of::<XrSystemGetInfo>() - 24usize];
    ["Alignment of XrSystemGetInfo"][::std::mem::align_of::<XrSystemGetInfo>() - 8usize];
    ["Offset of field: XrSystemGetInfo::type_"]
        [::std::mem::offset_of!(XrSystemGetInfo, type_) - 0usize];
    ["Offset of field: XrSystemGetInfo::next"]
        [::std::mem::offset_of!(XrSystemGetInfo, next) - 8usize];
    ["Offset of field: XrSystemGetInfo::formFactor"]
        [::std::mem::offset_of!(XrSystemGetInfo, formFactor) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemGraphicsProperties {
    pub maxSwapchainImageHeight: u32,
    pub maxSwapchainImageWidth: u32,
    pub maxLayerCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemGraphicsProperties"]
        [::std::mem::size_of::<XrSystemGraphicsProperties>() - 12usize];
    ["Alignment of XrSystemGraphicsProperties"]
        [::std::mem::align_of::<XrSystemGraphicsProperties>() - 4usize];
    ["Offset of field: XrSystemGraphicsProperties::maxSwapchainImageHeight"]
        [::std::mem::offset_of!(XrSystemGraphicsProperties, maxSwapchainImageHeight) - 0usize];
    ["Offset of field: XrSystemGraphicsProperties::maxSwapchainImageWidth"]
        [::std::mem::offset_of!(XrSystemGraphicsProperties, maxSwapchainImageWidth) - 4usize];
    ["Offset of field: XrSystemGraphicsProperties::maxLayerCount"]
        [::std::mem::offset_of!(XrSystemGraphicsProperties, maxLayerCount) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemTrackingProperties {
    pub orientationTracking: XrBool32,
    pub positionTracking: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemTrackingProperties"]
        [::std::mem::size_of::<XrSystemTrackingProperties>() - 8usize];
    ["Alignment of XrSystemTrackingProperties"]
        [::std::mem::align_of::<XrSystemTrackingProperties>() - 4usize];
    ["Offset of field: XrSystemTrackingProperties::orientationTracking"]
        [::std::mem::offset_of!(XrSystemTrackingProperties, orientationTracking) - 0usize];
    ["Offset of field: XrSystemTrackingProperties::positionTracking"]
        [::std::mem::offset_of!(XrSystemTrackingProperties, positionTracking) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemProperties {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub systemId: XrSystemId,
    pub vendorId: u32,
    pub systemName: [::std::os::raw::c_char; 256usize],
    pub graphicsProperties: XrSystemGraphicsProperties,
    pub trackingProperties: XrSystemTrackingProperties,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemProperties"][::std::mem::size_of::<XrSystemProperties>() - 304usize];
    ["Alignment of XrSystemProperties"][::std::mem::align_of::<XrSystemProperties>() - 8usize];
    ["Offset of field: XrSystemProperties::type_"]
        [::std::mem::offset_of!(XrSystemProperties, type_) - 0usize];
    ["Offset of field: XrSystemProperties::next"]
        [::std::mem::offset_of!(XrSystemProperties, next) - 8usize];
    ["Offset of field: XrSystemProperties::systemId"]
        [::std::mem::offset_of!(XrSystemProperties, systemId) - 16usize];
    ["Offset of field: XrSystemProperties::vendorId"]
        [::std::mem::offset_of!(XrSystemProperties, vendorId) - 24usize];
    ["Offset of field: XrSystemProperties::systemName"]
        [::std::mem::offset_of!(XrSystemProperties, systemName) - 28usize];
    ["Offset of field: XrSystemProperties::graphicsProperties"]
        [::std::mem::offset_of!(XrSystemProperties, graphicsProperties) - 284usize];
    ["Offset of field: XrSystemProperties::trackingProperties"]
        [::std::mem::offset_of!(XrSystemProperties, trackingProperties) - 296usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSessionCreateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub createFlags: XrSessionCreateFlags,
    pub systemId: XrSystemId,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSessionCreateInfo"][::std::mem::size_of::<XrSessionCreateInfo>() - 32usize];
    ["Alignment of XrSessionCreateInfo"][::std::mem::align_of::<XrSessionCreateInfo>() - 8usize];
    ["Offset of field: XrSessionCreateInfo::type_"]
        [::std::mem::offset_of!(XrSessionCreateInfo, type_) - 0usize];
    ["Offset of field: XrSessionCreateInfo::next"]
        [::std::mem::offset_of!(XrSessionCreateInfo, next) - 8usize];
    ["Offset of field: XrSessionCreateInfo::createFlags"]
        [::std::mem::offset_of!(XrSessionCreateInfo, createFlags) - 16usize];
    ["Offset of field: XrSessionCreateInfo::systemId"]
        [::std::mem::offset_of!(XrSessionCreateInfo, systemId) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVector3f {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrVector3f"][::std::mem::size_of::<XrVector3f>() - 12usize];
    ["Alignment of XrVector3f"][::std::mem::align_of::<XrVector3f>() - 4usize];
    ["Offset of field: XrVector3f::x"][::std::mem::offset_of!(XrVector3f, x) - 0usize];
    ["Offset of field: XrVector3f::y"][::std::mem::offset_of!(XrVector3f, y) - 4usize];
    ["Offset of field: XrVector3f::z"][::std::mem::offset_of!(XrVector3f, z) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceVelocity {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub velocityFlags: XrSpaceVelocityFlags,
    pub linearVelocity: XrVector3f,
    pub angularVelocity: XrVector3f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceVelocity"][::std::mem::size_of::<XrSpaceVelocity>() - 48usize];
    ["Alignment of XrSpaceVelocity"][::std::mem::align_of::<XrSpaceVelocity>() - 8usize];
    ["Offset of field: XrSpaceVelocity::type_"]
        [::std::mem::offset_of!(XrSpaceVelocity, type_) - 0usize];
    ["Offset of field: XrSpaceVelocity::next"]
        [::std::mem::offset_of!(XrSpaceVelocity, next) - 8usize];
    ["Offset of field: XrSpaceVelocity::velocityFlags"]
        [::std::mem::offset_of!(XrSpaceVelocity, velocityFlags) - 16usize];
    ["Offset of field: XrSpaceVelocity::linearVelocity"]
        [::std::mem::offset_of!(XrSpaceVelocity, linearVelocity) - 24usize];
    ["Offset of field: XrSpaceVelocity::angularVelocity"]
        [::std::mem::offset_of!(XrSpaceVelocity, angularVelocity) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrQuaternionf {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrQuaternionf"][::std::mem::size_of::<XrQuaternionf>() - 16usize];
    ["Alignment of XrQuaternionf"][::std::mem::align_of::<XrQuaternionf>() - 4usize];
    ["Offset of field: XrQuaternionf::x"][::std::mem::offset_of!(XrQuaternionf, x) - 0usize];
    ["Offset of field: XrQuaternionf::y"][::std::mem::offset_of!(XrQuaternionf, y) - 4usize];
    ["Offset of field: XrQuaternionf::z"][::std::mem::offset_of!(XrQuaternionf, z) - 8usize];
    ["Offset of field: XrQuaternionf::w"][::std::mem::offset_of!(XrQuaternionf, w) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPosef {
    pub orientation: XrQuaternionf,
    pub position: XrVector3f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPosef"][::std::mem::size_of::<XrPosef>() - 28usize];
    ["Alignment of XrPosef"][::std::mem::align_of::<XrPosef>() - 4usize];
    ["Offset of field: XrPosef::orientation"]
        [::std::mem::offset_of!(XrPosef, orientation) - 0usize];
    ["Offset of field: XrPosef::position"][::std::mem::offset_of!(XrPosef, position) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrReferenceSpaceCreateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub referenceSpaceType: XrReferenceSpaceType,
    pub poseInReferenceSpace: XrPosef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrReferenceSpaceCreateInfo"]
        [::std::mem::size_of::<XrReferenceSpaceCreateInfo>() - 48usize];
    ["Alignment of XrReferenceSpaceCreateInfo"]
        [::std::mem::align_of::<XrReferenceSpaceCreateInfo>() - 8usize];
    ["Offset of field: XrReferenceSpaceCreateInfo::type_"]
        [::std::mem::offset_of!(XrReferenceSpaceCreateInfo, type_) - 0usize];
    ["Offset of field: XrReferenceSpaceCreateInfo::next"]
        [::std::mem::offset_of!(XrReferenceSpaceCreateInfo, next) - 8usize];
    ["Offset of field: XrReferenceSpaceCreateInfo::referenceSpaceType"]
        [::std::mem::offset_of!(XrReferenceSpaceCreateInfo, referenceSpaceType) - 16usize];
    ["Offset of field: XrReferenceSpaceCreateInfo::poseInReferenceSpace"]
        [::std::mem::offset_of!(XrReferenceSpaceCreateInfo, poseInReferenceSpace) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrExtent2Df {
    pub width: f32,
    pub height: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrExtent2Df"][::std::mem::size_of::<XrExtent2Df>() - 8usize];
    ["Alignment of XrExtent2Df"][::std::mem::align_of::<XrExtent2Df>() - 4usize];
    ["Offset of field: XrExtent2Df::width"][::std::mem::offset_of!(XrExtent2Df, width) - 0usize];
    ["Offset of field: XrExtent2Df::height"][::std::mem::offset_of!(XrExtent2Df, height) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionSpaceCreateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub action: XrAction,
    pub subactionPath: XrPath,
    pub poseInActionSpace: XrPosef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrActionSpaceCreateInfo"][::std::mem::size_of::<XrActionSpaceCreateInfo>() - 64usize];
    ["Alignment of XrActionSpaceCreateInfo"]
        [::std::mem::align_of::<XrActionSpaceCreateInfo>() - 8usize];
    ["Offset of field: XrActionSpaceCreateInfo::type_"]
        [::std::mem::offset_of!(XrActionSpaceCreateInfo, type_) - 0usize];
    ["Offset of field: XrActionSpaceCreateInfo::next"]
        [::std::mem::offset_of!(XrActionSpaceCreateInfo, next) - 8usize];
    ["Offset of field: XrActionSpaceCreateInfo::action"]
        [::std::mem::offset_of!(XrActionSpaceCreateInfo, action) - 16usize];
    ["Offset of field: XrActionSpaceCreateInfo::subactionPath"]
        [::std::mem::offset_of!(XrActionSpaceCreateInfo, subactionPath) - 24usize];
    ["Offset of field: XrActionSpaceCreateInfo::poseInActionSpace"]
        [::std::mem::offset_of!(XrActionSpaceCreateInfo, poseInActionSpace) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceLocation {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub locationFlags: XrSpaceLocationFlags,
    pub pose: XrPosef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceLocation"][::std::mem::size_of::<XrSpaceLocation>() - 56usize];
    ["Alignment of XrSpaceLocation"][::std::mem::align_of::<XrSpaceLocation>() - 8usize];
    ["Offset of field: XrSpaceLocation::type_"]
        [::std::mem::offset_of!(XrSpaceLocation, type_) - 0usize];
    ["Offset of field: XrSpaceLocation::next"]
        [::std::mem::offset_of!(XrSpaceLocation, next) - 8usize];
    ["Offset of field: XrSpaceLocation::locationFlags"]
        [::std::mem::offset_of!(XrSpaceLocation, locationFlags) - 16usize];
    ["Offset of field: XrSpaceLocation::pose"]
        [::std::mem::offset_of!(XrSpaceLocation, pose) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViewConfigurationProperties {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub viewConfigurationType: XrViewConfigurationType,
    pub fovMutable: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrViewConfigurationProperties"]
        [::std::mem::size_of::<XrViewConfigurationProperties>() - 24usize];
    ["Alignment of XrViewConfigurationProperties"]
        [::std::mem::align_of::<XrViewConfigurationProperties>() - 8usize];
    ["Offset of field: XrViewConfigurationProperties::type_"]
        [::std::mem::offset_of!(XrViewConfigurationProperties, type_) - 0usize];
    ["Offset of field: XrViewConfigurationProperties::next"]
        [::std::mem::offset_of!(XrViewConfigurationProperties, next) - 8usize];
    ["Offset of field: XrViewConfigurationProperties::viewConfigurationType"]
        [::std::mem::offset_of!(XrViewConfigurationProperties, viewConfigurationType) - 16usize];
    ["Offset of field: XrViewConfigurationProperties::fovMutable"]
        [::std::mem::offset_of!(XrViewConfigurationProperties, fovMutable) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViewConfigurationView {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub recommendedImageRectWidth: u32,
    pub maxImageRectWidth: u32,
    pub recommendedImageRectHeight: u32,
    pub maxImageRectHeight: u32,
    pub recommendedSwapchainSampleCount: u32,
    pub maxSwapchainSampleCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrViewConfigurationView"][::std::mem::size_of::<XrViewConfigurationView>() - 40usize];
    ["Alignment of XrViewConfigurationView"]
        [::std::mem::align_of::<XrViewConfigurationView>() - 8usize];
    ["Offset of field: XrViewConfigurationView::type_"]
        [::std::mem::offset_of!(XrViewConfigurationView, type_) - 0usize];
    ["Offset of field: XrViewConfigurationView::next"]
        [::std::mem::offset_of!(XrViewConfigurationView, next) - 8usize];
    ["Offset of field: XrViewConfigurationView::recommendedImageRectWidth"]
        [::std::mem::offset_of!(XrViewConfigurationView, recommendedImageRectWidth) - 16usize];
    ["Offset of field: XrViewConfigurationView::maxImageRectWidth"]
        [::std::mem::offset_of!(XrViewConfigurationView, maxImageRectWidth) - 20usize];
    ["Offset of field: XrViewConfigurationView::recommendedImageRectHeight"]
        [::std::mem::offset_of!(XrViewConfigurationView, recommendedImageRectHeight) - 24usize];
    ["Offset of field: XrViewConfigurationView::maxImageRectHeight"]
        [::std::mem::offset_of!(XrViewConfigurationView, maxImageRectHeight) - 28usize];
    ["Offset of field: XrViewConfigurationView::recommendedSwapchainSampleCount"][::std::mem::offset_of!(
        XrViewConfigurationView,
        recommendedSwapchainSampleCount
    ) - 32usize];
    ["Offset of field: XrViewConfigurationView::maxSwapchainSampleCount"]
        [::std::mem::offset_of!(XrViewConfigurationView, maxSwapchainSampleCount) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainCreateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub createFlags: XrSwapchainCreateFlags,
    pub usageFlags: XrSwapchainUsageFlags,
    pub format: i64,
    pub sampleCount: u32,
    pub width: u32,
    pub height: u32,
    pub faceCount: u32,
    pub arraySize: u32,
    pub mipCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSwapchainCreateInfo"][::std::mem::size_of::<XrSwapchainCreateInfo>() - 64usize];
    ["Alignment of XrSwapchainCreateInfo"]
        [::std::mem::align_of::<XrSwapchainCreateInfo>() - 8usize];
    ["Offset of field: XrSwapchainCreateInfo::type_"]
        [::std::mem::offset_of!(XrSwapchainCreateInfo, type_) - 0usize];
    ["Offset of field: XrSwapchainCreateInfo::next"]
        [::std::mem::offset_of!(XrSwapchainCreateInfo, next) - 8usize];
    ["Offset of field: XrSwapchainCreateInfo::createFlags"]
        [::std::mem::offset_of!(XrSwapchainCreateInfo, createFlags) - 16usize];
    ["Offset of field: XrSwapchainCreateInfo::usageFlags"]
        [::std::mem::offset_of!(XrSwapchainCreateInfo, usageFlags) - 24usize];
    ["Offset of field: XrSwapchainCreateInfo::format"]
        [::std::mem::offset_of!(XrSwapchainCreateInfo, format) - 32usize];
    ["Offset of field: XrSwapchainCreateInfo::sampleCount"]
        [::std::mem::offset_of!(XrSwapchainCreateInfo, sampleCount) - 40usize];
    ["Offset of field: XrSwapchainCreateInfo::width"]
        [::std::mem::offset_of!(XrSwapchainCreateInfo, width) - 44usize];
    ["Offset of field: XrSwapchainCreateInfo::height"]
        [::std::mem::offset_of!(XrSwapchainCreateInfo, height) - 48usize];
    ["Offset of field: XrSwapchainCreateInfo::faceCount"]
        [::std::mem::offset_of!(XrSwapchainCreateInfo, faceCount) - 52usize];
    ["Offset of field: XrSwapchainCreateInfo::arraySize"]
        [::std::mem::offset_of!(XrSwapchainCreateInfo, arraySize) - 56usize];
    ["Offset of field: XrSwapchainCreateInfo::mipCount"]
        [::std::mem::offset_of!(XrSwapchainCreateInfo, mipCount) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainImageBaseHeader {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSwapchainImageBaseHeader"]
        [::std::mem::size_of::<XrSwapchainImageBaseHeader>() - 16usize];
    ["Alignment of XrSwapchainImageBaseHeader"]
        [::std::mem::align_of::<XrSwapchainImageBaseHeader>() - 8usize];
    ["Offset of field: XrSwapchainImageBaseHeader::type_"]
        [::std::mem::offset_of!(XrSwapchainImageBaseHeader, type_) - 0usize];
    ["Offset of field: XrSwapchainImageBaseHeader::next"]
        [::std::mem::offset_of!(XrSwapchainImageBaseHeader, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainImageAcquireInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSwapchainImageAcquireInfo"]
        [::std::mem::size_of::<XrSwapchainImageAcquireInfo>() - 16usize];
    ["Alignment of XrSwapchainImageAcquireInfo"]
        [::std::mem::align_of::<XrSwapchainImageAcquireInfo>() - 8usize];
    ["Offset of field: XrSwapchainImageAcquireInfo::type_"]
        [::std::mem::offset_of!(XrSwapchainImageAcquireInfo, type_) - 0usize];
    ["Offset of field: XrSwapchainImageAcquireInfo::next"]
        [::std::mem::offset_of!(XrSwapchainImageAcquireInfo, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainImageWaitInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub timeout: XrDuration,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSwapchainImageWaitInfo"]
        [::std::mem::size_of::<XrSwapchainImageWaitInfo>() - 24usize];
    ["Alignment of XrSwapchainImageWaitInfo"]
        [::std::mem::align_of::<XrSwapchainImageWaitInfo>() - 8usize];
    ["Offset of field: XrSwapchainImageWaitInfo::type_"]
        [::std::mem::offset_of!(XrSwapchainImageWaitInfo, type_) - 0usize];
    ["Offset of field: XrSwapchainImageWaitInfo::next"]
        [::std::mem::offset_of!(XrSwapchainImageWaitInfo, next) - 8usize];
    ["Offset of field: XrSwapchainImageWaitInfo::timeout"]
        [::std::mem::offset_of!(XrSwapchainImageWaitInfo, timeout) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainImageReleaseInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSwapchainImageReleaseInfo"]
        [::std::mem::size_of::<XrSwapchainImageReleaseInfo>() - 16usize];
    ["Alignment of XrSwapchainImageReleaseInfo"]
        [::std::mem::align_of::<XrSwapchainImageReleaseInfo>() - 8usize];
    ["Offset of field: XrSwapchainImageReleaseInfo::type_"]
        [::std::mem::offset_of!(XrSwapchainImageReleaseInfo, type_) - 0usize];
    ["Offset of field: XrSwapchainImageReleaseInfo::next"]
        [::std::mem::offset_of!(XrSwapchainImageReleaseInfo, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSessionBeginInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub primaryViewConfigurationType: XrViewConfigurationType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSessionBeginInfo"][::std::mem::size_of::<XrSessionBeginInfo>() - 24usize];
    ["Alignment of XrSessionBeginInfo"][::std::mem::align_of::<XrSessionBeginInfo>() - 8usize];
    ["Offset of field: XrSessionBeginInfo::type_"]
        [::std::mem::offset_of!(XrSessionBeginInfo, type_) - 0usize];
    ["Offset of field: XrSessionBeginInfo::next"]
        [::std::mem::offset_of!(XrSessionBeginInfo, next) - 8usize];
    ["Offset of field: XrSessionBeginInfo::primaryViewConfigurationType"]
        [::std::mem::offset_of!(XrSessionBeginInfo, primaryViewConfigurationType) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFrameWaitInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFrameWaitInfo"][::std::mem::size_of::<XrFrameWaitInfo>() - 16usize];
    ["Alignment of XrFrameWaitInfo"][::std::mem::align_of::<XrFrameWaitInfo>() - 8usize];
    ["Offset of field: XrFrameWaitInfo::type_"]
        [::std::mem::offset_of!(XrFrameWaitInfo, type_) - 0usize];
    ["Offset of field: XrFrameWaitInfo::next"]
        [::std::mem::offset_of!(XrFrameWaitInfo, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFrameState {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub predictedDisplayTime: XrTime,
    pub predictedDisplayPeriod: XrDuration,
    pub shouldRender: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFrameState"][::std::mem::size_of::<XrFrameState>() - 40usize];
    ["Alignment of XrFrameState"][::std::mem::align_of::<XrFrameState>() - 8usize];
    ["Offset of field: XrFrameState::type_"][::std::mem::offset_of!(XrFrameState, type_) - 0usize];
    ["Offset of field: XrFrameState::next"][::std::mem::offset_of!(XrFrameState, next) - 8usize];
    ["Offset of field: XrFrameState::predictedDisplayTime"]
        [::std::mem::offset_of!(XrFrameState, predictedDisplayTime) - 16usize];
    ["Offset of field: XrFrameState::predictedDisplayPeriod"]
        [::std::mem::offset_of!(XrFrameState, predictedDisplayPeriod) - 24usize];
    ["Offset of field: XrFrameState::shouldRender"]
        [::std::mem::offset_of!(XrFrameState, shouldRender) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFrameBeginInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFrameBeginInfo"][::std::mem::size_of::<XrFrameBeginInfo>() - 16usize];
    ["Alignment of XrFrameBeginInfo"][::std::mem::align_of::<XrFrameBeginInfo>() - 8usize];
    ["Offset of field: XrFrameBeginInfo::type_"]
        [::std::mem::offset_of!(XrFrameBeginInfo, type_) - 0usize];
    ["Offset of field: XrFrameBeginInfo::next"]
        [::std::mem::offset_of!(XrFrameBeginInfo, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerBaseHeader {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCompositionLayerBaseHeader"]
        [::std::mem::size_of::<XrCompositionLayerBaseHeader>() - 32usize];
    ["Alignment of XrCompositionLayerBaseHeader"]
        [::std::mem::align_of::<XrCompositionLayerBaseHeader>() - 8usize];
    ["Offset of field: XrCompositionLayerBaseHeader::type_"]
        [::std::mem::offset_of!(XrCompositionLayerBaseHeader, type_) - 0usize];
    ["Offset of field: XrCompositionLayerBaseHeader::next"]
        [::std::mem::offset_of!(XrCompositionLayerBaseHeader, next) - 8usize];
    ["Offset of field: XrCompositionLayerBaseHeader::layerFlags"]
        [::std::mem::offset_of!(XrCompositionLayerBaseHeader, layerFlags) - 16usize];
    ["Offset of field: XrCompositionLayerBaseHeader::space"]
        [::std::mem::offset_of!(XrCompositionLayerBaseHeader, space) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFrameEndInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub displayTime: XrTime,
    pub environmentBlendMode: XrEnvironmentBlendMode,
    pub layerCount: u32,
    pub layers: *const *const XrCompositionLayerBaseHeader,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFrameEndInfo"][::std::mem::size_of::<XrFrameEndInfo>() - 40usize];
    ["Alignment of XrFrameEndInfo"][::std::mem::align_of::<XrFrameEndInfo>() - 8usize];
    ["Offset of field: XrFrameEndInfo::type_"]
        [::std::mem::offset_of!(XrFrameEndInfo, type_) - 0usize];
    ["Offset of field: XrFrameEndInfo::next"]
        [::std::mem::offset_of!(XrFrameEndInfo, next) - 8usize];
    ["Offset of field: XrFrameEndInfo::displayTime"]
        [::std::mem::offset_of!(XrFrameEndInfo, displayTime) - 16usize];
    ["Offset of field: XrFrameEndInfo::environmentBlendMode"]
        [::std::mem::offset_of!(XrFrameEndInfo, environmentBlendMode) - 24usize];
    ["Offset of field: XrFrameEndInfo::layerCount"]
        [::std::mem::offset_of!(XrFrameEndInfo, layerCount) - 28usize];
    ["Offset of field: XrFrameEndInfo::layers"]
        [::std::mem::offset_of!(XrFrameEndInfo, layers) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViewLocateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub viewConfigurationType: XrViewConfigurationType,
    pub displayTime: XrTime,
    pub space: XrSpace,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrViewLocateInfo"][::std::mem::size_of::<XrViewLocateInfo>() - 40usize];
    ["Alignment of XrViewLocateInfo"][::std::mem::align_of::<XrViewLocateInfo>() - 8usize];
    ["Offset of field: XrViewLocateInfo::type_"]
        [::std::mem::offset_of!(XrViewLocateInfo, type_) - 0usize];
    ["Offset of field: XrViewLocateInfo::next"]
        [::std::mem::offset_of!(XrViewLocateInfo, next) - 8usize];
    ["Offset of field: XrViewLocateInfo::viewConfigurationType"]
        [::std::mem::offset_of!(XrViewLocateInfo, viewConfigurationType) - 16usize];
    ["Offset of field: XrViewLocateInfo::displayTime"]
        [::std::mem::offset_of!(XrViewLocateInfo, displayTime) - 24usize];
    ["Offset of field: XrViewLocateInfo::space"]
        [::std::mem::offset_of!(XrViewLocateInfo, space) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViewState {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub viewStateFlags: XrViewStateFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrViewState"][::std::mem::size_of::<XrViewState>() - 24usize];
    ["Alignment of XrViewState"][::std::mem::align_of::<XrViewState>() - 8usize];
    ["Offset of field: XrViewState::type_"][::std::mem::offset_of!(XrViewState, type_) - 0usize];
    ["Offset of field: XrViewState::next"][::std::mem::offset_of!(XrViewState, next) - 8usize];
    ["Offset of field: XrViewState::viewStateFlags"]
        [::std::mem::offset_of!(XrViewState, viewStateFlags) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFovf {
    pub angleLeft: f32,
    pub angleRight: f32,
    pub angleUp: f32,
    pub angleDown: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFovf"][::std::mem::size_of::<XrFovf>() - 16usize];
    ["Alignment of XrFovf"][::std::mem::align_of::<XrFovf>() - 4usize];
    ["Offset of field: XrFovf::angleLeft"][::std::mem::offset_of!(XrFovf, angleLeft) - 0usize];
    ["Offset of field: XrFovf::angleRight"][::std::mem::offset_of!(XrFovf, angleRight) - 4usize];
    ["Offset of field: XrFovf::angleUp"][::std::mem::offset_of!(XrFovf, angleUp) - 8usize];
    ["Offset of field: XrFovf::angleDown"][::std::mem::offset_of!(XrFovf, angleDown) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrView {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub pose: XrPosef,
    pub fov: XrFovf,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrView"][::std::mem::size_of::<XrView>() - 64usize];
    ["Alignment of XrView"][::std::mem::align_of::<XrView>() - 8usize];
    ["Offset of field: XrView::type_"][::std::mem::offset_of!(XrView, type_) - 0usize];
    ["Offset of field: XrView::next"][::std::mem::offset_of!(XrView, next) - 8usize];
    ["Offset of field: XrView::pose"][::std::mem::offset_of!(XrView, pose) - 16usize];
    ["Offset of field: XrView::fov"][::std::mem::offset_of!(XrView, fov) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionSetCreateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub actionSetName: [::std::os::raw::c_char; 64usize],
    pub localizedActionSetName: [::std::os::raw::c_char; 128usize],
    pub priority: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrActionSetCreateInfo"][::std::mem::size_of::<XrActionSetCreateInfo>() - 216usize];
    ["Alignment of XrActionSetCreateInfo"]
        [::std::mem::align_of::<XrActionSetCreateInfo>() - 8usize];
    ["Offset of field: XrActionSetCreateInfo::type_"]
        [::std::mem::offset_of!(XrActionSetCreateInfo, type_) - 0usize];
    ["Offset of field: XrActionSetCreateInfo::next"]
        [::std::mem::offset_of!(XrActionSetCreateInfo, next) - 8usize];
    ["Offset of field: XrActionSetCreateInfo::actionSetName"]
        [::std::mem::offset_of!(XrActionSetCreateInfo, actionSetName) - 16usize];
    ["Offset of field: XrActionSetCreateInfo::localizedActionSetName"]
        [::std::mem::offset_of!(XrActionSetCreateInfo, localizedActionSetName) - 80usize];
    ["Offset of field: XrActionSetCreateInfo::priority"]
        [::std::mem::offset_of!(XrActionSetCreateInfo, priority) - 208usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionCreateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub actionName: [::std::os::raw::c_char; 64usize],
    pub actionType: XrActionType,
    pub countSubactionPaths: u32,
    pub subactionPaths: *const XrPath,
    pub localizedActionName: [::std::os::raw::c_char; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrActionCreateInfo"][::std::mem::size_of::<XrActionCreateInfo>() - 224usize];
    ["Alignment of XrActionCreateInfo"][::std::mem::align_of::<XrActionCreateInfo>() - 8usize];
    ["Offset of field: XrActionCreateInfo::type_"]
        [::std::mem::offset_of!(XrActionCreateInfo, type_) - 0usize];
    ["Offset of field: XrActionCreateInfo::next"]
        [::std::mem::offset_of!(XrActionCreateInfo, next) - 8usize];
    ["Offset of field: XrActionCreateInfo::actionName"]
        [::std::mem::offset_of!(XrActionCreateInfo, actionName) - 16usize];
    ["Offset of field: XrActionCreateInfo::actionType"]
        [::std::mem::offset_of!(XrActionCreateInfo, actionType) - 80usize];
    ["Offset of field: XrActionCreateInfo::countSubactionPaths"]
        [::std::mem::offset_of!(XrActionCreateInfo, countSubactionPaths) - 84usize];
    ["Offset of field: XrActionCreateInfo::subactionPaths"]
        [::std::mem::offset_of!(XrActionCreateInfo, subactionPaths) - 88usize];
    ["Offset of field: XrActionCreateInfo::localizedActionName"]
        [::std::mem::offset_of!(XrActionCreateInfo, localizedActionName) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionSuggestedBinding {
    pub action: XrAction,
    pub binding: XrPath,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrActionSuggestedBinding"]
        [::std::mem::size_of::<XrActionSuggestedBinding>() - 16usize];
    ["Alignment of XrActionSuggestedBinding"]
        [::std::mem::align_of::<XrActionSuggestedBinding>() - 8usize];
    ["Offset of field: XrActionSuggestedBinding::action"]
        [::std::mem::offset_of!(XrActionSuggestedBinding, action) - 0usize];
    ["Offset of field: XrActionSuggestedBinding::binding"]
        [::std::mem::offset_of!(XrActionSuggestedBinding, binding) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrInteractionProfileSuggestedBinding {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub interactionProfile: XrPath,
    pub countSuggestedBindings: u32,
    pub suggestedBindings: *const XrActionSuggestedBinding,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrInteractionProfileSuggestedBinding"]
        [::std::mem::size_of::<XrInteractionProfileSuggestedBinding>() - 40usize];
    ["Alignment of XrInteractionProfileSuggestedBinding"]
        [::std::mem::align_of::<XrInteractionProfileSuggestedBinding>() - 8usize];
    ["Offset of field: XrInteractionProfileSuggestedBinding::type_"]
        [::std::mem::offset_of!(XrInteractionProfileSuggestedBinding, type_) - 0usize];
    ["Offset of field: XrInteractionProfileSuggestedBinding::next"]
        [::std::mem::offset_of!(XrInteractionProfileSuggestedBinding, next) - 8usize];
    ["Offset of field: XrInteractionProfileSuggestedBinding::interactionProfile"][::std::mem::offset_of!(
        XrInteractionProfileSuggestedBinding,
        interactionProfile
    ) - 16usize];
    ["Offset of field: XrInteractionProfileSuggestedBinding::countSuggestedBindings"][::std::mem::offset_of!(
        XrInteractionProfileSuggestedBinding,
        countSuggestedBindings
    ) - 24usize];
    ["Offset of field: XrInteractionProfileSuggestedBinding::suggestedBindings"]
        [::std::mem::offset_of!(XrInteractionProfileSuggestedBinding, suggestedBindings) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSessionActionSetsAttachInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub countActionSets: u32,
    pub actionSets: *const XrActionSet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSessionActionSetsAttachInfo"]
        [::std::mem::size_of::<XrSessionActionSetsAttachInfo>() - 32usize];
    ["Alignment of XrSessionActionSetsAttachInfo"]
        [::std::mem::align_of::<XrSessionActionSetsAttachInfo>() - 8usize];
    ["Offset of field: XrSessionActionSetsAttachInfo::type_"]
        [::std::mem::offset_of!(XrSessionActionSetsAttachInfo, type_) - 0usize];
    ["Offset of field: XrSessionActionSetsAttachInfo::next"]
        [::std::mem::offset_of!(XrSessionActionSetsAttachInfo, next) - 8usize];
    ["Offset of field: XrSessionActionSetsAttachInfo::countActionSets"]
        [::std::mem::offset_of!(XrSessionActionSetsAttachInfo, countActionSets) - 16usize];
    ["Offset of field: XrSessionActionSetsAttachInfo::actionSets"]
        [::std::mem::offset_of!(XrSessionActionSetsAttachInfo, actionSets) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrInteractionProfileState {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub interactionProfile: XrPath,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrInteractionProfileState"]
        [::std::mem::size_of::<XrInteractionProfileState>() - 24usize];
    ["Alignment of XrInteractionProfileState"]
        [::std::mem::align_of::<XrInteractionProfileState>() - 8usize];
    ["Offset of field: XrInteractionProfileState::type_"]
        [::std::mem::offset_of!(XrInteractionProfileState, type_) - 0usize];
    ["Offset of field: XrInteractionProfileState::next"]
        [::std::mem::offset_of!(XrInteractionProfileState, next) - 8usize];
    ["Offset of field: XrInteractionProfileState::interactionProfile"]
        [::std::mem::offset_of!(XrInteractionProfileState, interactionProfile) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionStateGetInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub action: XrAction,
    pub subactionPath: XrPath,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrActionStateGetInfo"][::std::mem::size_of::<XrActionStateGetInfo>() - 32usize];
    ["Alignment of XrActionStateGetInfo"][::std::mem::align_of::<XrActionStateGetInfo>() - 8usize];
    ["Offset of field: XrActionStateGetInfo::type_"]
        [::std::mem::offset_of!(XrActionStateGetInfo, type_) - 0usize];
    ["Offset of field: XrActionStateGetInfo::next"]
        [::std::mem::offset_of!(XrActionStateGetInfo, next) - 8usize];
    ["Offset of field: XrActionStateGetInfo::action"]
        [::std::mem::offset_of!(XrActionStateGetInfo, action) - 16usize];
    ["Offset of field: XrActionStateGetInfo::subactionPath"]
        [::std::mem::offset_of!(XrActionStateGetInfo, subactionPath) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionStateBoolean {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub currentState: XrBool32,
    pub changedSinceLastSync: XrBool32,
    pub lastChangeTime: XrTime,
    pub isActive: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrActionStateBoolean"][::std::mem::size_of::<XrActionStateBoolean>() - 40usize];
    ["Alignment of XrActionStateBoolean"][::std::mem::align_of::<XrActionStateBoolean>() - 8usize];
    ["Offset of field: XrActionStateBoolean::type_"]
        [::std::mem::offset_of!(XrActionStateBoolean, type_) - 0usize];
    ["Offset of field: XrActionStateBoolean::next"]
        [::std::mem::offset_of!(XrActionStateBoolean, next) - 8usize];
    ["Offset of field: XrActionStateBoolean::currentState"]
        [::std::mem::offset_of!(XrActionStateBoolean, currentState) - 16usize];
    ["Offset of field: XrActionStateBoolean::changedSinceLastSync"]
        [::std::mem::offset_of!(XrActionStateBoolean, changedSinceLastSync) - 20usize];
    ["Offset of field: XrActionStateBoolean::lastChangeTime"]
        [::std::mem::offset_of!(XrActionStateBoolean, lastChangeTime) - 24usize];
    ["Offset of field: XrActionStateBoolean::isActive"]
        [::std::mem::offset_of!(XrActionStateBoolean, isActive) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionStateFloat {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub currentState: f32,
    pub changedSinceLastSync: XrBool32,
    pub lastChangeTime: XrTime,
    pub isActive: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrActionStateFloat"][::std::mem::size_of::<XrActionStateFloat>() - 40usize];
    ["Alignment of XrActionStateFloat"][::std::mem::align_of::<XrActionStateFloat>() - 8usize];
    ["Offset of field: XrActionStateFloat::type_"]
        [::std::mem::offset_of!(XrActionStateFloat, type_) - 0usize];
    ["Offset of field: XrActionStateFloat::next"]
        [::std::mem::offset_of!(XrActionStateFloat, next) - 8usize];
    ["Offset of field: XrActionStateFloat::currentState"]
        [::std::mem::offset_of!(XrActionStateFloat, currentState) - 16usize];
    ["Offset of field: XrActionStateFloat::changedSinceLastSync"]
        [::std::mem::offset_of!(XrActionStateFloat, changedSinceLastSync) - 20usize];
    ["Offset of field: XrActionStateFloat::lastChangeTime"]
        [::std::mem::offset_of!(XrActionStateFloat, lastChangeTime) - 24usize];
    ["Offset of field: XrActionStateFloat::isActive"]
        [::std::mem::offset_of!(XrActionStateFloat, isActive) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVector2f {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrVector2f"][::std::mem::size_of::<XrVector2f>() - 8usize];
    ["Alignment of XrVector2f"][::std::mem::align_of::<XrVector2f>() - 4usize];
    ["Offset of field: XrVector2f::x"][::std::mem::offset_of!(XrVector2f, x) - 0usize];
    ["Offset of field: XrVector2f::y"][::std::mem::offset_of!(XrVector2f, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionStateVector2f {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub currentState: XrVector2f,
    pub changedSinceLastSync: XrBool32,
    pub lastChangeTime: XrTime,
    pub isActive: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrActionStateVector2f"][::std::mem::size_of::<XrActionStateVector2f>() - 48usize];
    ["Alignment of XrActionStateVector2f"]
        [::std::mem::align_of::<XrActionStateVector2f>() - 8usize];
    ["Offset of field: XrActionStateVector2f::type_"]
        [::std::mem::offset_of!(XrActionStateVector2f, type_) - 0usize];
    ["Offset of field: XrActionStateVector2f::next"]
        [::std::mem::offset_of!(XrActionStateVector2f, next) - 8usize];
    ["Offset of field: XrActionStateVector2f::currentState"]
        [::std::mem::offset_of!(XrActionStateVector2f, currentState) - 16usize];
    ["Offset of field: XrActionStateVector2f::changedSinceLastSync"]
        [::std::mem::offset_of!(XrActionStateVector2f, changedSinceLastSync) - 24usize];
    ["Offset of field: XrActionStateVector2f::lastChangeTime"]
        [::std::mem::offset_of!(XrActionStateVector2f, lastChangeTime) - 32usize];
    ["Offset of field: XrActionStateVector2f::isActive"]
        [::std::mem::offset_of!(XrActionStateVector2f, isActive) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionStatePose {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub isActive: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrActionStatePose"][::std::mem::size_of::<XrActionStatePose>() - 24usize];
    ["Alignment of XrActionStatePose"][::std::mem::align_of::<XrActionStatePose>() - 8usize];
    ["Offset of field: XrActionStatePose::type_"]
        [::std::mem::offset_of!(XrActionStatePose, type_) - 0usize];
    ["Offset of field: XrActionStatePose::next"]
        [::std::mem::offset_of!(XrActionStatePose, next) - 8usize];
    ["Offset of field: XrActionStatePose::isActive"]
        [::std::mem::offset_of!(XrActionStatePose, isActive) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActiveActionSet {
    pub actionSet: XrActionSet,
    pub subactionPath: XrPath,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrActiveActionSet"][::std::mem::size_of::<XrActiveActionSet>() - 16usize];
    ["Alignment of XrActiveActionSet"][::std::mem::align_of::<XrActiveActionSet>() - 8usize];
    ["Offset of field: XrActiveActionSet::actionSet"]
        [::std::mem::offset_of!(XrActiveActionSet, actionSet) - 0usize];
    ["Offset of field: XrActiveActionSet::subactionPath"]
        [::std::mem::offset_of!(XrActiveActionSet, subactionPath) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActionsSyncInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub countActiveActionSets: u32,
    pub activeActionSets: *const XrActiveActionSet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrActionsSyncInfo"][::std::mem::size_of::<XrActionsSyncInfo>() - 32usize];
    ["Alignment of XrActionsSyncInfo"][::std::mem::align_of::<XrActionsSyncInfo>() - 8usize];
    ["Offset of field: XrActionsSyncInfo::type_"]
        [::std::mem::offset_of!(XrActionsSyncInfo, type_) - 0usize];
    ["Offset of field: XrActionsSyncInfo::next"]
        [::std::mem::offset_of!(XrActionsSyncInfo, next) - 8usize];
    ["Offset of field: XrActionsSyncInfo::countActiveActionSets"]
        [::std::mem::offset_of!(XrActionsSyncInfo, countActiveActionSets) - 16usize];
    ["Offset of field: XrActionsSyncInfo::activeActionSets"]
        [::std::mem::offset_of!(XrActionsSyncInfo, activeActionSets) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBoundSourcesForActionEnumerateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub action: XrAction,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrBoundSourcesForActionEnumerateInfo"]
        [::std::mem::size_of::<XrBoundSourcesForActionEnumerateInfo>() - 24usize];
    ["Alignment of XrBoundSourcesForActionEnumerateInfo"]
        [::std::mem::align_of::<XrBoundSourcesForActionEnumerateInfo>() - 8usize];
    ["Offset of field: XrBoundSourcesForActionEnumerateInfo::type_"]
        [::std::mem::offset_of!(XrBoundSourcesForActionEnumerateInfo, type_) - 0usize];
    ["Offset of field: XrBoundSourcesForActionEnumerateInfo::next"]
        [::std::mem::offset_of!(XrBoundSourcesForActionEnumerateInfo, next) - 8usize];
    ["Offset of field: XrBoundSourcesForActionEnumerateInfo::action"]
        [::std::mem::offset_of!(XrBoundSourcesForActionEnumerateInfo, action) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrInputSourceLocalizedNameGetInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub sourcePath: XrPath,
    pub whichComponents: XrInputSourceLocalizedNameFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrInputSourceLocalizedNameGetInfo"]
        [::std::mem::size_of::<XrInputSourceLocalizedNameGetInfo>() - 32usize];
    ["Alignment of XrInputSourceLocalizedNameGetInfo"]
        [::std::mem::align_of::<XrInputSourceLocalizedNameGetInfo>() - 8usize];
    ["Offset of field: XrInputSourceLocalizedNameGetInfo::type_"]
        [::std::mem::offset_of!(XrInputSourceLocalizedNameGetInfo, type_) - 0usize];
    ["Offset of field: XrInputSourceLocalizedNameGetInfo::next"]
        [::std::mem::offset_of!(XrInputSourceLocalizedNameGetInfo, next) - 8usize];
    ["Offset of field: XrInputSourceLocalizedNameGetInfo::sourcePath"]
        [::std::mem::offset_of!(XrInputSourceLocalizedNameGetInfo, sourcePath) - 16usize];
    ["Offset of field: XrInputSourceLocalizedNameGetInfo::whichComponents"]
        [::std::mem::offset_of!(XrInputSourceLocalizedNameGetInfo, whichComponents) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHapticActionInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub action: XrAction,
    pub subactionPath: XrPath,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHapticActionInfo"][::std::mem::size_of::<XrHapticActionInfo>() - 32usize];
    ["Alignment of XrHapticActionInfo"][::std::mem::align_of::<XrHapticActionInfo>() - 8usize];
    ["Offset of field: XrHapticActionInfo::type_"]
        [::std::mem::offset_of!(XrHapticActionInfo, type_) - 0usize];
    ["Offset of field: XrHapticActionInfo::next"]
        [::std::mem::offset_of!(XrHapticActionInfo, next) - 8usize];
    ["Offset of field: XrHapticActionInfo::action"]
        [::std::mem::offset_of!(XrHapticActionInfo, action) - 16usize];
    ["Offset of field: XrHapticActionInfo::subactionPath"]
        [::std::mem::offset_of!(XrHapticActionInfo, subactionPath) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHapticBaseHeader {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHapticBaseHeader"][::std::mem::size_of::<XrHapticBaseHeader>() - 16usize];
    ["Alignment of XrHapticBaseHeader"][::std::mem::align_of::<XrHapticBaseHeader>() - 8usize];
    ["Offset of field: XrHapticBaseHeader::type_"]
        [::std::mem::offset_of!(XrHapticBaseHeader, type_) - 0usize];
    ["Offset of field: XrHapticBaseHeader::next"]
        [::std::mem::offset_of!(XrHapticBaseHeader, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBaseInStructure {
    pub type_: XrStructureType,
    pub next: *const XrBaseInStructure,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrBaseInStructure"][::std::mem::size_of::<XrBaseInStructure>() - 16usize];
    ["Alignment of XrBaseInStructure"][::std::mem::align_of::<XrBaseInStructure>() - 8usize];
    ["Offset of field: XrBaseInStructure::type_"]
        [::std::mem::offset_of!(XrBaseInStructure, type_) - 0usize];
    ["Offset of field: XrBaseInStructure::next"]
        [::std::mem::offset_of!(XrBaseInStructure, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBaseOutStructure {
    pub type_: XrStructureType,
    pub next: *mut XrBaseOutStructure,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrBaseOutStructure"][::std::mem::size_of::<XrBaseOutStructure>() - 16usize];
    ["Alignment of XrBaseOutStructure"][::std::mem::align_of::<XrBaseOutStructure>() - 8usize];
    ["Offset of field: XrBaseOutStructure::type_"]
        [::std::mem::offset_of!(XrBaseOutStructure, type_) - 0usize];
    ["Offset of field: XrBaseOutStructure::next"]
        [::std::mem::offset_of!(XrBaseOutStructure, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrOffset2Di {
    pub x: i32,
    pub y: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrOffset2Di"][::std::mem::size_of::<XrOffset2Di>() - 8usize];
    ["Alignment of XrOffset2Di"][::std::mem::align_of::<XrOffset2Di>() - 4usize];
    ["Offset of field: XrOffset2Di::x"][::std::mem::offset_of!(XrOffset2Di, x) - 0usize];
    ["Offset of field: XrOffset2Di::y"][::std::mem::offset_of!(XrOffset2Di, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrExtent2Di {
    pub width: i32,
    pub height: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrExtent2Di"][::std::mem::size_of::<XrExtent2Di>() - 8usize];
    ["Alignment of XrExtent2Di"][::std::mem::align_of::<XrExtent2Di>() - 4usize];
    ["Offset of field: XrExtent2Di::width"][::std::mem::offset_of!(XrExtent2Di, width) - 0usize];
    ["Offset of field: XrExtent2Di::height"][::std::mem::offset_of!(XrExtent2Di, height) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRect2Di {
    pub offset: XrOffset2Di,
    pub extent: XrExtent2Di,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrRect2Di"][::std::mem::size_of::<XrRect2Di>() - 16usize];
    ["Alignment of XrRect2Di"][::std::mem::align_of::<XrRect2Di>() - 4usize];
    ["Offset of field: XrRect2Di::offset"][::std::mem::offset_of!(XrRect2Di, offset) - 0usize];
    ["Offset of field: XrRect2Di::extent"][::std::mem::offset_of!(XrRect2Di, extent) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainSubImage {
    pub swapchain: XrSwapchain,
    pub imageRect: XrRect2Di,
    pub imageArrayIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSwapchainSubImage"][::std::mem::size_of::<XrSwapchainSubImage>() - 32usize];
    ["Alignment of XrSwapchainSubImage"][::std::mem::align_of::<XrSwapchainSubImage>() - 8usize];
    ["Offset of field: XrSwapchainSubImage::swapchain"]
        [::std::mem::offset_of!(XrSwapchainSubImage, swapchain) - 0usize];
    ["Offset of field: XrSwapchainSubImage::imageRect"]
        [::std::mem::offset_of!(XrSwapchainSubImage, imageRect) - 8usize];
    ["Offset of field: XrSwapchainSubImage::imageArrayIndex"]
        [::std::mem::offset_of!(XrSwapchainSubImage, imageArrayIndex) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerProjectionView {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub pose: XrPosef,
    pub fov: XrFovf,
    pub subImage: XrSwapchainSubImage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCompositionLayerProjectionView"]
        [::std::mem::size_of::<XrCompositionLayerProjectionView>() - 96usize];
    ["Alignment of XrCompositionLayerProjectionView"]
        [::std::mem::align_of::<XrCompositionLayerProjectionView>() - 8usize];
    ["Offset of field: XrCompositionLayerProjectionView::type_"]
        [::std::mem::offset_of!(XrCompositionLayerProjectionView, type_) - 0usize];
    ["Offset of field: XrCompositionLayerProjectionView::next"]
        [::std::mem::offset_of!(XrCompositionLayerProjectionView, next) - 8usize];
    ["Offset of field: XrCompositionLayerProjectionView::pose"]
        [::std::mem::offset_of!(XrCompositionLayerProjectionView, pose) - 16usize];
    ["Offset of field: XrCompositionLayerProjectionView::fov"]
        [::std::mem::offset_of!(XrCompositionLayerProjectionView, fov) - 44usize];
    ["Offset of field: XrCompositionLayerProjectionView::subImage"]
        [::std::mem::offset_of!(XrCompositionLayerProjectionView, subImage) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerProjection {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub viewCount: u32,
    pub views: *const XrCompositionLayerProjectionView,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCompositionLayerProjection"]
        [::std::mem::size_of::<XrCompositionLayerProjection>() - 48usize];
    ["Alignment of XrCompositionLayerProjection"]
        [::std::mem::align_of::<XrCompositionLayerProjection>() - 8usize];
    ["Offset of field: XrCompositionLayerProjection::type_"]
        [::std::mem::offset_of!(XrCompositionLayerProjection, type_) - 0usize];
    ["Offset of field: XrCompositionLayerProjection::next"]
        [::std::mem::offset_of!(XrCompositionLayerProjection, next) - 8usize];
    ["Offset of field: XrCompositionLayerProjection::layerFlags"]
        [::std::mem::offset_of!(XrCompositionLayerProjection, layerFlags) - 16usize];
    ["Offset of field: XrCompositionLayerProjection::space"]
        [::std::mem::offset_of!(XrCompositionLayerProjection, space) - 24usize];
    ["Offset of field: XrCompositionLayerProjection::viewCount"]
        [::std::mem::offset_of!(XrCompositionLayerProjection, viewCount) - 32usize];
    ["Offset of field: XrCompositionLayerProjection::views"]
        [::std::mem::offset_of!(XrCompositionLayerProjection, views) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerQuad {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub eyeVisibility: XrEyeVisibility,
    pub subImage: XrSwapchainSubImage,
    pub pose: XrPosef,
    pub size: XrExtent2Df,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCompositionLayerQuad"][::std::mem::size_of::<XrCompositionLayerQuad>() - 112usize];
    ["Alignment of XrCompositionLayerQuad"]
        [::std::mem::align_of::<XrCompositionLayerQuad>() - 8usize];
    ["Offset of field: XrCompositionLayerQuad::type_"]
        [::std::mem::offset_of!(XrCompositionLayerQuad, type_) - 0usize];
    ["Offset of field: XrCompositionLayerQuad::next"]
        [::std::mem::offset_of!(XrCompositionLayerQuad, next) - 8usize];
    ["Offset of field: XrCompositionLayerQuad::layerFlags"]
        [::std::mem::offset_of!(XrCompositionLayerQuad, layerFlags) - 16usize];
    ["Offset of field: XrCompositionLayerQuad::space"]
        [::std::mem::offset_of!(XrCompositionLayerQuad, space) - 24usize];
    ["Offset of field: XrCompositionLayerQuad::eyeVisibility"]
        [::std::mem::offset_of!(XrCompositionLayerQuad, eyeVisibility) - 32usize];
    ["Offset of field: XrCompositionLayerQuad::subImage"]
        [::std::mem::offset_of!(XrCompositionLayerQuad, subImage) - 40usize];
    ["Offset of field: XrCompositionLayerQuad::pose"]
        [::std::mem::offset_of!(XrCompositionLayerQuad, pose) - 72usize];
    ["Offset of field: XrCompositionLayerQuad::size"]
        [::std::mem::offset_of!(XrCompositionLayerQuad, size) - 100usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataBaseHeader {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataBaseHeader"][::std::mem::size_of::<XrEventDataBaseHeader>() - 16usize];
    ["Alignment of XrEventDataBaseHeader"]
        [::std::mem::align_of::<XrEventDataBaseHeader>() - 8usize];
    ["Offset of field: XrEventDataBaseHeader::type_"]
        [::std::mem::offset_of!(XrEventDataBaseHeader, type_) - 0usize];
    ["Offset of field: XrEventDataBaseHeader::next"]
        [::std::mem::offset_of!(XrEventDataBaseHeader, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataEventsLost {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub lostEventCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataEventsLost"][::std::mem::size_of::<XrEventDataEventsLost>() - 24usize];
    ["Alignment of XrEventDataEventsLost"]
        [::std::mem::align_of::<XrEventDataEventsLost>() - 8usize];
    ["Offset of field: XrEventDataEventsLost::type_"]
        [::std::mem::offset_of!(XrEventDataEventsLost, type_) - 0usize];
    ["Offset of field: XrEventDataEventsLost::next"]
        [::std::mem::offset_of!(XrEventDataEventsLost, next) - 8usize];
    ["Offset of field: XrEventDataEventsLost::lostEventCount"]
        [::std::mem::offset_of!(XrEventDataEventsLost, lostEventCount) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataInstanceLossPending {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub lossTime: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataInstanceLossPending"]
        [::std::mem::size_of::<XrEventDataInstanceLossPending>() - 24usize];
    ["Alignment of XrEventDataInstanceLossPending"]
        [::std::mem::align_of::<XrEventDataInstanceLossPending>() - 8usize];
    ["Offset of field: XrEventDataInstanceLossPending::type_"]
        [::std::mem::offset_of!(XrEventDataInstanceLossPending, type_) - 0usize];
    ["Offset of field: XrEventDataInstanceLossPending::next"]
        [::std::mem::offset_of!(XrEventDataInstanceLossPending, next) - 8usize];
    ["Offset of field: XrEventDataInstanceLossPending::lossTime"]
        [::std::mem::offset_of!(XrEventDataInstanceLossPending, lossTime) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataSessionStateChanged {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub session: XrSession,
    pub state: XrSessionState,
    pub time: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataSessionStateChanged"]
        [::std::mem::size_of::<XrEventDataSessionStateChanged>() - 40usize];
    ["Alignment of XrEventDataSessionStateChanged"]
        [::std::mem::align_of::<XrEventDataSessionStateChanged>() - 8usize];
    ["Offset of field: XrEventDataSessionStateChanged::type_"]
        [::std::mem::offset_of!(XrEventDataSessionStateChanged, type_) - 0usize];
    ["Offset of field: XrEventDataSessionStateChanged::next"]
        [::std::mem::offset_of!(XrEventDataSessionStateChanged, next) - 8usize];
    ["Offset of field: XrEventDataSessionStateChanged::session"]
        [::std::mem::offset_of!(XrEventDataSessionStateChanged, session) - 16usize];
    ["Offset of field: XrEventDataSessionStateChanged::state"]
        [::std::mem::offset_of!(XrEventDataSessionStateChanged, state) - 24usize];
    ["Offset of field: XrEventDataSessionStateChanged::time"]
        [::std::mem::offset_of!(XrEventDataSessionStateChanged, time) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataReferenceSpaceChangePending {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub session: XrSession,
    pub referenceSpaceType: XrReferenceSpaceType,
    pub changeTime: XrTime,
    pub poseValid: XrBool32,
    pub poseInPreviousSpace: XrPosef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataReferenceSpaceChangePending"]
        [::std::mem::size_of::<XrEventDataReferenceSpaceChangePending>() - 72usize];
    ["Alignment of XrEventDataReferenceSpaceChangePending"]
        [::std::mem::align_of::<XrEventDataReferenceSpaceChangePending>() - 8usize];
    ["Offset of field: XrEventDataReferenceSpaceChangePending::type_"]
        [::std::mem::offset_of!(XrEventDataReferenceSpaceChangePending, type_) - 0usize];
    ["Offset of field: XrEventDataReferenceSpaceChangePending::next"]
        [::std::mem::offset_of!(XrEventDataReferenceSpaceChangePending, next) - 8usize];
    ["Offset of field: XrEventDataReferenceSpaceChangePending::session"]
        [::std::mem::offset_of!(XrEventDataReferenceSpaceChangePending, session) - 16usize];
    ["Offset of field: XrEventDataReferenceSpaceChangePending::referenceSpaceType"][::std::mem::offset_of!(
        XrEventDataReferenceSpaceChangePending,
        referenceSpaceType
    ) - 24usize];
    ["Offset of field: XrEventDataReferenceSpaceChangePending::changeTime"]
        [::std::mem::offset_of!(XrEventDataReferenceSpaceChangePending, changeTime) - 32usize];
    ["Offset of field: XrEventDataReferenceSpaceChangePending::poseValid"]
        [::std::mem::offset_of!(XrEventDataReferenceSpaceChangePending, poseValid) - 40usize];
    ["Offset of field: XrEventDataReferenceSpaceChangePending::poseInPreviousSpace"][::std::mem::offset_of!(
        XrEventDataReferenceSpaceChangePending,
        poseInPreviousSpace
    ) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataInteractionProfileChanged {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub session: XrSession,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataInteractionProfileChanged"]
        [::std::mem::size_of::<XrEventDataInteractionProfileChanged>() - 24usize];
    ["Alignment of XrEventDataInteractionProfileChanged"]
        [::std::mem::align_of::<XrEventDataInteractionProfileChanged>() - 8usize];
    ["Offset of field: XrEventDataInteractionProfileChanged::type_"]
        [::std::mem::offset_of!(XrEventDataInteractionProfileChanged, type_) - 0usize];
    ["Offset of field: XrEventDataInteractionProfileChanged::next"]
        [::std::mem::offset_of!(XrEventDataInteractionProfileChanged, next) - 8usize];
    ["Offset of field: XrEventDataInteractionProfileChanged::session"]
        [::std::mem::offset_of!(XrEventDataInteractionProfileChanged, session) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHapticVibration {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub duration: XrDuration,
    pub frequency: f32,
    pub amplitude: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHapticVibration"][::std::mem::size_of::<XrHapticVibration>() - 32usize];
    ["Alignment of XrHapticVibration"][::std::mem::align_of::<XrHapticVibration>() - 8usize];
    ["Offset of field: XrHapticVibration::type_"]
        [::std::mem::offset_of!(XrHapticVibration, type_) - 0usize];
    ["Offset of field: XrHapticVibration::next"]
        [::std::mem::offset_of!(XrHapticVibration, next) - 8usize];
    ["Offset of field: XrHapticVibration::duration"]
        [::std::mem::offset_of!(XrHapticVibration, duration) - 16usize];
    ["Offset of field: XrHapticVibration::frequency"]
        [::std::mem::offset_of!(XrHapticVibration, frequency) - 24usize];
    ["Offset of field: XrHapticVibration::amplitude"]
        [::std::mem::offset_of!(XrHapticVibration, amplitude) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrOffset2Df {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrOffset2Df"][::std::mem::size_of::<XrOffset2Df>() - 8usize];
    ["Alignment of XrOffset2Df"][::std::mem::align_of::<XrOffset2Df>() - 4usize];
    ["Offset of field: XrOffset2Df::x"][::std::mem::offset_of!(XrOffset2Df, x) - 0usize];
    ["Offset of field: XrOffset2Df::y"][::std::mem::offset_of!(XrOffset2Df, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRect2Df {
    pub offset: XrOffset2Df,
    pub extent: XrExtent2Df,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrRect2Df"][::std::mem::size_of::<XrRect2Df>() - 16usize];
    ["Alignment of XrRect2Df"][::std::mem::align_of::<XrRect2Df>() - 4usize];
    ["Offset of field: XrRect2Df::offset"][::std::mem::offset_of!(XrRect2Df, offset) - 0usize];
    ["Offset of field: XrRect2Df::extent"][::std::mem::offset_of!(XrRect2Df, extent) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVector4f {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrVector4f"][::std::mem::size_of::<XrVector4f>() - 16usize];
    ["Alignment of XrVector4f"][::std::mem::align_of::<XrVector4f>() - 4usize];
    ["Offset of field: XrVector4f::x"][::std::mem::offset_of!(XrVector4f, x) - 0usize];
    ["Offset of field: XrVector4f::y"][::std::mem::offset_of!(XrVector4f, y) - 4usize];
    ["Offset of field: XrVector4f::z"][::std::mem::offset_of!(XrVector4f, z) - 8usize];
    ["Offset of field: XrVector4f::w"][::std::mem::offset_of!(XrVector4f, w) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrColor4f {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrColor4f"][::std::mem::size_of::<XrColor4f>() - 16usize];
    ["Alignment of XrColor4f"][::std::mem::align_of::<XrColor4f>() - 4usize];
    ["Offset of field: XrColor4f::r"][::std::mem::offset_of!(XrColor4f, r) - 0usize];
    ["Offset of field: XrColor4f::g"][::std::mem::offset_of!(XrColor4f, g) - 4usize];
    ["Offset of field: XrColor4f::b"][::std::mem::offset_of!(XrColor4f, b) - 8usize];
    ["Offset of field: XrColor4f::a"][::std::mem::offset_of!(XrColor4f, a) - 12usize];
};
extern "C" {
    pub fn xrGetInstanceProcAddr(
        instance: XrInstance,
        name: *const ::std::os::raw::c_char,
        function: *mut PFN_xrVoidFunction,
    ) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateApiLayerProperties(
        propertyCapacityInput: u32,
        propertyCountOutput: *mut u32,
        properties: *mut XrApiLayerProperties,
    ) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateInstanceExtensionProperties(
        layerName: *const ::std::os::raw::c_char,
        propertyCapacityInput: u32,
        propertyCountOutput: *mut u32,
        properties: *mut XrExtensionProperties,
    ) -> XrResult;
}
extern "C" {
    pub fn xrCreateInstance(
        createInfo: *const XrInstanceCreateInfo,
        instance: *mut XrInstance,
    ) -> XrResult;
}
extern "C" {
    pub fn xrDestroyInstance(instance: XrInstance) -> XrResult;
}
extern "C" {
    pub fn xrGetInstanceProperties(
        instance: XrInstance,
        instanceProperties: *mut XrInstanceProperties,
    ) -> XrResult;
}
extern "C" {
    pub fn xrPollEvent(instance: XrInstance, eventData: *mut XrEventDataBuffer) -> XrResult;
}
extern "C" {
    pub fn xrResultToString(
        instance: XrInstance,
        value: XrResult,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult;
}
extern "C" {
    pub fn xrStructureTypeToString(
        instance: XrInstance,
        value: XrStructureType,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetSystem(
        instance: XrInstance,
        getInfo: *const XrSystemGetInfo,
        systemId: *mut XrSystemId,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetSystemProperties(
        instance: XrInstance,
        systemId: XrSystemId,
        properties: *mut XrSystemProperties,
    ) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateEnvironmentBlendModes(
        instance: XrInstance,
        systemId: XrSystemId,
        viewConfigurationType: XrViewConfigurationType,
        environmentBlendModeCapacityInput: u32,
        environmentBlendModeCountOutput: *mut u32,
        environmentBlendModes: *mut XrEnvironmentBlendMode,
    ) -> XrResult;
}
extern "C" {
    pub fn xrCreateSession(
        instance: XrInstance,
        createInfo: *const XrSessionCreateInfo,
        session: *mut XrSession,
    ) -> XrResult;
}
extern "C" {
    pub fn xrDestroySession(session: XrSession) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateReferenceSpaces(
        session: XrSession,
        spaceCapacityInput: u32,
        spaceCountOutput: *mut u32,
        spaces: *mut XrReferenceSpaceType,
    ) -> XrResult;
}
extern "C" {
    pub fn xrCreateReferenceSpace(
        session: XrSession,
        createInfo: *const XrReferenceSpaceCreateInfo,
        space: *mut XrSpace,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetReferenceSpaceBoundsRect(
        session: XrSession,
        referenceSpaceType: XrReferenceSpaceType,
        bounds: *mut XrExtent2Df,
    ) -> XrResult;
}
extern "C" {
    pub fn xrCreateActionSpace(
        session: XrSession,
        createInfo: *const XrActionSpaceCreateInfo,
        space: *mut XrSpace,
    ) -> XrResult;
}
extern "C" {
    pub fn xrLocateSpace(
        space: XrSpace,
        baseSpace: XrSpace,
        time: XrTime,
        location: *mut XrSpaceLocation,
    ) -> XrResult;
}
extern "C" {
    pub fn xrDestroySpace(space: XrSpace) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateViewConfigurations(
        instance: XrInstance,
        systemId: XrSystemId,
        viewConfigurationTypeCapacityInput: u32,
        viewConfigurationTypeCountOutput: *mut u32,
        viewConfigurationTypes: *mut XrViewConfigurationType,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetViewConfigurationProperties(
        instance: XrInstance,
        systemId: XrSystemId,
        viewConfigurationType: XrViewConfigurationType,
        configurationProperties: *mut XrViewConfigurationProperties,
    ) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateViewConfigurationViews(
        instance: XrInstance,
        systemId: XrSystemId,
        viewConfigurationType: XrViewConfigurationType,
        viewCapacityInput: u32,
        viewCountOutput: *mut u32,
        views: *mut XrViewConfigurationView,
    ) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateSwapchainFormats(
        session: XrSession,
        formatCapacityInput: u32,
        formatCountOutput: *mut u32,
        formats: *mut i64,
    ) -> XrResult;
}
extern "C" {
    pub fn xrCreateSwapchain(
        session: XrSession,
        createInfo: *const XrSwapchainCreateInfo,
        swapchain: *mut XrSwapchain,
    ) -> XrResult;
}
extern "C" {
    pub fn xrDestroySwapchain(swapchain: XrSwapchain) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateSwapchainImages(
        swapchain: XrSwapchain,
        imageCapacityInput: u32,
        imageCountOutput: *mut u32,
        images: *mut XrSwapchainImageBaseHeader,
    ) -> XrResult;
}
extern "C" {
    pub fn xrAcquireSwapchainImage(
        swapchain: XrSwapchain,
        acquireInfo: *const XrSwapchainImageAcquireInfo,
        index: *mut u32,
    ) -> XrResult;
}
extern "C" {
    pub fn xrWaitSwapchainImage(
        swapchain: XrSwapchain,
        waitInfo: *const XrSwapchainImageWaitInfo,
    ) -> XrResult;
}
extern "C" {
    pub fn xrReleaseSwapchainImage(
        swapchain: XrSwapchain,
        releaseInfo: *const XrSwapchainImageReleaseInfo,
    ) -> XrResult;
}
extern "C" {
    pub fn xrBeginSession(session: XrSession, beginInfo: *const XrSessionBeginInfo) -> XrResult;
}
extern "C" {
    pub fn xrEndSession(session: XrSession) -> XrResult;
}
extern "C" {
    pub fn xrRequestExitSession(session: XrSession) -> XrResult;
}
extern "C" {
    pub fn xrWaitFrame(
        session: XrSession,
        frameWaitInfo: *const XrFrameWaitInfo,
        frameState: *mut XrFrameState,
    ) -> XrResult;
}
extern "C" {
    pub fn xrBeginFrame(session: XrSession, frameBeginInfo: *const XrFrameBeginInfo) -> XrResult;
}
extern "C" {
    pub fn xrEndFrame(session: XrSession, frameEndInfo: *const XrFrameEndInfo) -> XrResult;
}
extern "C" {
    pub fn xrLocateViews(
        session: XrSession,
        viewLocateInfo: *const XrViewLocateInfo,
        viewState: *mut XrViewState,
        viewCapacityInput: u32,
        viewCountOutput: *mut u32,
        views: *mut XrView,
    ) -> XrResult;
}
extern "C" {
    pub fn xrStringToPath(
        instance: XrInstance,
        pathString: *const ::std::os::raw::c_char,
        path: *mut XrPath,
    ) -> XrResult;
}
extern "C" {
    pub fn xrPathToString(
        instance: XrInstance,
        path: XrPath,
        bufferCapacityInput: u32,
        bufferCountOutput: *mut u32,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult;
}
extern "C" {
    pub fn xrCreateActionSet(
        instance: XrInstance,
        createInfo: *const XrActionSetCreateInfo,
        actionSet: *mut XrActionSet,
    ) -> XrResult;
}
extern "C" {
    pub fn xrDestroyActionSet(actionSet: XrActionSet) -> XrResult;
}
extern "C" {
    pub fn xrCreateAction(
        actionSet: XrActionSet,
        createInfo: *const XrActionCreateInfo,
        action: *mut XrAction,
    ) -> XrResult;
}
extern "C" {
    pub fn xrDestroyAction(action: XrAction) -> XrResult;
}
extern "C" {
    pub fn xrSuggestInteractionProfileBindings(
        instance: XrInstance,
        suggestedBindings: *const XrInteractionProfileSuggestedBinding,
    ) -> XrResult;
}
extern "C" {
    pub fn xrAttachSessionActionSets(
        session: XrSession,
        attachInfo: *const XrSessionActionSetsAttachInfo,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetCurrentInteractionProfile(
        session: XrSession,
        topLevelUserPath: XrPath,
        interactionProfile: *mut XrInteractionProfileState,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetActionStateBoolean(
        session: XrSession,
        getInfo: *const XrActionStateGetInfo,
        state: *mut XrActionStateBoolean,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetActionStateFloat(
        session: XrSession,
        getInfo: *const XrActionStateGetInfo,
        state: *mut XrActionStateFloat,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetActionStateVector2f(
        session: XrSession,
        getInfo: *const XrActionStateGetInfo,
        state: *mut XrActionStateVector2f,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetActionStatePose(
        session: XrSession,
        getInfo: *const XrActionStateGetInfo,
        state: *mut XrActionStatePose,
    ) -> XrResult;
}
extern "C" {
    pub fn xrSyncActions(session: XrSession, syncInfo: *const XrActionsSyncInfo) -> XrResult;
}
extern "C" {
    pub fn xrEnumerateBoundSourcesForAction(
        session: XrSession,
        enumerateInfo: *const XrBoundSourcesForActionEnumerateInfo,
        sourceCapacityInput: u32,
        sourceCountOutput: *mut u32,
        sources: *mut XrPath,
    ) -> XrResult;
}
extern "C" {
    pub fn xrGetInputSourceLocalizedName(
        session: XrSession,
        getInfo: *const XrInputSourceLocalizedNameGetInfo,
        bufferCapacityInput: u32,
        bufferCountOutput: *mut u32,
        buffer: *mut ::std::os::raw::c_char,
    ) -> XrResult;
}
extern "C" {
    pub fn xrApplyHapticFeedback(
        session: XrSession,
        hapticActionInfo: *const XrHapticActionInfo,
        hapticFeedback: *const XrHapticBaseHeader,
    ) -> XrResult;
}
extern "C" {
    pub fn xrStopHapticFeedback(
        session: XrSession,
        hapticActionInfo: *const XrHapticActionInfo,
    ) -> XrResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrColor3f {
    pub r: f32,
    pub g: f32,
    pub b: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrColor3f"][::std::mem::size_of::<XrColor3f>() - 12usize];
    ["Alignment of XrColor3f"][::std::mem::align_of::<XrColor3f>() - 4usize];
    ["Offset of field: XrColor3f::r"][::std::mem::offset_of!(XrColor3f, r) - 0usize];
    ["Offset of field: XrColor3f::g"][::std::mem::offset_of!(XrColor3f, g) - 4usize];
    ["Offset of field: XrColor3f::b"][::std::mem::offset_of!(XrColor3f, b) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrExtent3Df {
    pub width: f32,
    pub height: f32,
    pub depth: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrExtent3Df"][::std::mem::size_of::<XrExtent3Df>() - 12usize];
    ["Alignment of XrExtent3Df"][::std::mem::align_of::<XrExtent3Df>() - 4usize];
    ["Offset of field: XrExtent3Df::width"][::std::mem::offset_of!(XrExtent3Df, width) - 0usize];
    ["Offset of field: XrExtent3Df::height"][::std::mem::offset_of!(XrExtent3Df, height) - 4usize];
    ["Offset of field: XrExtent3Df::depth"][::std::mem::offset_of!(XrExtent3Df, depth) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpheref {
    pub center: XrPosef,
    pub radius: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpheref"][::std::mem::size_of::<XrSpheref>() - 32usize];
    ["Alignment of XrSpheref"][::std::mem::align_of::<XrSpheref>() - 4usize];
    ["Offset of field: XrSpheref::center"][::std::mem::offset_of!(XrSpheref, center) - 0usize];
    ["Offset of field: XrSpheref::radius"][::std::mem::offset_of!(XrSpheref, radius) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBoxf {
    pub center: XrPosef,
    pub extents: XrExtent3Df,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrBoxf"][::std::mem::size_of::<XrBoxf>() - 40usize];
    ["Alignment of XrBoxf"][::std::mem::align_of::<XrBoxf>() - 4usize];
    ["Offset of field: XrBoxf::center"][::std::mem::offset_of!(XrBoxf, center) - 0usize];
    ["Offset of field: XrBoxf::extents"][::std::mem::offset_of!(XrBoxf, extents) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFrustumf {
    pub pose: XrPosef,
    pub fov: XrFovf,
    pub nearZ: f32,
    pub farZ: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFrustumf"][::std::mem::size_of::<XrFrustumf>() - 52usize];
    ["Alignment of XrFrustumf"][::std::mem::align_of::<XrFrustumf>() - 4usize];
    ["Offset of field: XrFrustumf::pose"][::std::mem::offset_of!(XrFrustumf, pose) - 0usize];
    ["Offset of field: XrFrustumf::fov"][::std::mem::offset_of!(XrFrustumf, fov) - 28usize];
    ["Offset of field: XrFrustumf::nearZ"][::std::mem::offset_of!(XrFrustumf, nearZ) - 44usize];
    ["Offset of field: XrFrustumf::farZ"][::std::mem::offset_of!(XrFrustumf, farZ) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrUuid {
    pub data: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrUuid"][::std::mem::size_of::<XrUuid>() - 16usize];
    ["Alignment of XrUuid"][::std::mem::align_of::<XrUuid>() - 1usize];
    ["Offset of field: XrUuid::data"][::std::mem::offset_of!(XrUuid, data) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpacesLocateInfo {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub baseSpace: XrSpace,
    pub time: XrTime,
    pub spaceCount: u32,
    pub spaces: *const XrSpace,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpacesLocateInfo"][::std::mem::size_of::<XrSpacesLocateInfo>() - 48usize];
    ["Alignment of XrSpacesLocateInfo"][::std::mem::align_of::<XrSpacesLocateInfo>() - 8usize];
    ["Offset of field: XrSpacesLocateInfo::type_"]
        [::std::mem::offset_of!(XrSpacesLocateInfo, type_) - 0usize];
    ["Offset of field: XrSpacesLocateInfo::next"]
        [::std::mem::offset_of!(XrSpacesLocateInfo, next) - 8usize];
    ["Offset of field: XrSpacesLocateInfo::baseSpace"]
        [::std::mem::offset_of!(XrSpacesLocateInfo, baseSpace) - 16usize];
    ["Offset of field: XrSpacesLocateInfo::time"]
        [::std::mem::offset_of!(XrSpacesLocateInfo, time) - 24usize];
    ["Offset of field: XrSpacesLocateInfo::spaceCount"]
        [::std::mem::offset_of!(XrSpacesLocateInfo, spaceCount) - 32usize];
    ["Offset of field: XrSpacesLocateInfo::spaces"]
        [::std::mem::offset_of!(XrSpacesLocateInfo, spaces) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceLocationData {
    pub locationFlags: XrSpaceLocationFlags,
    pub pose: XrPosef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceLocationData"][::std::mem::size_of::<XrSpaceLocationData>() - 40usize];
    ["Alignment of XrSpaceLocationData"][::std::mem::align_of::<XrSpaceLocationData>() - 8usize];
    ["Offset of field: XrSpaceLocationData::locationFlags"]
        [::std::mem::offset_of!(XrSpaceLocationData, locationFlags) - 0usize];
    ["Offset of field: XrSpaceLocationData::pose"]
        [::std::mem::offset_of!(XrSpaceLocationData, pose) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceLocations {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub locationCount: u32,
    pub locations: *mut XrSpaceLocationData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceLocations"][::std::mem::size_of::<XrSpaceLocations>() - 32usize];
    ["Alignment of XrSpaceLocations"][::std::mem::align_of::<XrSpaceLocations>() - 8usize];
    ["Offset of field: XrSpaceLocations::type_"]
        [::std::mem::offset_of!(XrSpaceLocations, type_) - 0usize];
    ["Offset of field: XrSpaceLocations::next"]
        [::std::mem::offset_of!(XrSpaceLocations, next) - 8usize];
    ["Offset of field: XrSpaceLocations::locationCount"]
        [::std::mem::offset_of!(XrSpaceLocations, locationCount) - 16usize];
    ["Offset of field: XrSpaceLocations::locations"]
        [::std::mem::offset_of!(XrSpaceLocations, locations) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceVelocityData {
    pub velocityFlags: XrSpaceVelocityFlags,
    pub linearVelocity: XrVector3f,
    pub angularVelocity: XrVector3f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceVelocityData"][::std::mem::size_of::<XrSpaceVelocityData>() - 32usize];
    ["Alignment of XrSpaceVelocityData"][::std::mem::align_of::<XrSpaceVelocityData>() - 8usize];
    ["Offset of field: XrSpaceVelocityData::velocityFlags"]
        [::std::mem::offset_of!(XrSpaceVelocityData, velocityFlags) - 0usize];
    ["Offset of field: XrSpaceVelocityData::linearVelocity"]
        [::std::mem::offset_of!(XrSpaceVelocityData, linearVelocity) - 8usize];
    ["Offset of field: XrSpaceVelocityData::angularVelocity"]
        [::std::mem::offset_of!(XrSpaceVelocityData, angularVelocity) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceVelocities {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub velocityCount: u32,
    pub velocities: *mut XrSpaceVelocityData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceVelocities"][::std::mem::size_of::<XrSpaceVelocities>() - 32usize];
    ["Alignment of XrSpaceVelocities"][::std::mem::align_of::<XrSpaceVelocities>() - 8usize];
    ["Offset of field: XrSpaceVelocities::type_"]
        [::std::mem::offset_of!(XrSpaceVelocities, type_) - 0usize];
    ["Offset of field: XrSpaceVelocities::next"]
        [::std::mem::offset_of!(XrSpaceVelocities, next) - 8usize];
    ["Offset of field: XrSpaceVelocities::velocityCount"]
        [::std::mem::offset_of!(XrSpaceVelocities, velocityCount) - 16usize];
    ["Offset of field: XrSpaceVelocities::velocities"]
        [::std::mem::offset_of!(XrSpaceVelocities, velocities) - 24usize];
};
extern "C" {
    pub fn xrLocateSpaces(
        session: XrSession,
        locateInfo: *const XrSpacesLocateInfo,
        spaceLocations: *mut XrSpaceLocations,
    ) -> XrResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerCubeKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub eyeVisibility: XrEyeVisibility,
    pub swapchain: XrSwapchain,
    pub imageArrayIndex: u32,
    pub orientation: XrQuaternionf,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCompositionLayerCubeKHR"]
        [::std::mem::size_of::<XrCompositionLayerCubeKHR>() - 72usize];
    ["Alignment of XrCompositionLayerCubeKHR"]
        [::std::mem::align_of::<XrCompositionLayerCubeKHR>() - 8usize];
    ["Offset of field: XrCompositionLayerCubeKHR::type_"]
        [::std::mem::offset_of!(XrCompositionLayerCubeKHR, type_) - 0usize];
    ["Offset of field: XrCompositionLayerCubeKHR::next"]
        [::std::mem::offset_of!(XrCompositionLayerCubeKHR, next) - 8usize];
    ["Offset of field: XrCompositionLayerCubeKHR::layerFlags"]
        [::std::mem::offset_of!(XrCompositionLayerCubeKHR, layerFlags) - 16usize];
    ["Offset of field: XrCompositionLayerCubeKHR::space"]
        [::std::mem::offset_of!(XrCompositionLayerCubeKHR, space) - 24usize];
    ["Offset of field: XrCompositionLayerCubeKHR::eyeVisibility"]
        [::std::mem::offset_of!(XrCompositionLayerCubeKHR, eyeVisibility) - 32usize];
    ["Offset of field: XrCompositionLayerCubeKHR::swapchain"]
        [::std::mem::offset_of!(XrCompositionLayerCubeKHR, swapchain) - 40usize];
    ["Offset of field: XrCompositionLayerCubeKHR::imageArrayIndex"]
        [::std::mem::offset_of!(XrCompositionLayerCubeKHR, imageArrayIndex) - 48usize];
    ["Offset of field: XrCompositionLayerCubeKHR::orientation"]
        [::std::mem::offset_of!(XrCompositionLayerCubeKHR, orientation) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerDepthInfoKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub subImage: XrSwapchainSubImage,
    pub minDepth: f32,
    pub maxDepth: f32,
    pub nearZ: f32,
    pub farZ: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCompositionLayerDepthInfoKHR"]
        [::std::mem::size_of::<XrCompositionLayerDepthInfoKHR>() - 64usize];
    ["Alignment of XrCompositionLayerDepthInfoKHR"]
        [::std::mem::align_of::<XrCompositionLayerDepthInfoKHR>() - 8usize];
    ["Offset of field: XrCompositionLayerDepthInfoKHR::type_"]
        [::std::mem::offset_of!(XrCompositionLayerDepthInfoKHR, type_) - 0usize];
    ["Offset of field: XrCompositionLayerDepthInfoKHR::next"]
        [::std::mem::offset_of!(XrCompositionLayerDepthInfoKHR, next) - 8usize];
    ["Offset of field: XrCompositionLayerDepthInfoKHR::subImage"]
        [::std::mem::offset_of!(XrCompositionLayerDepthInfoKHR, subImage) - 16usize];
    ["Offset of field: XrCompositionLayerDepthInfoKHR::minDepth"]
        [::std::mem::offset_of!(XrCompositionLayerDepthInfoKHR, minDepth) - 48usize];
    ["Offset of field: XrCompositionLayerDepthInfoKHR::maxDepth"]
        [::std::mem::offset_of!(XrCompositionLayerDepthInfoKHR, maxDepth) - 52usize];
    ["Offset of field: XrCompositionLayerDepthInfoKHR::nearZ"]
        [::std::mem::offset_of!(XrCompositionLayerDepthInfoKHR, nearZ) - 56usize];
    ["Offset of field: XrCompositionLayerDepthInfoKHR::farZ"]
        [::std::mem::offset_of!(XrCompositionLayerDepthInfoKHR, farZ) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerCylinderKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub eyeVisibility: XrEyeVisibility,
    pub subImage: XrSwapchainSubImage,
    pub pose: XrPosef,
    pub radius: f32,
    pub centralAngle: f32,
    pub aspectRatio: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCompositionLayerCylinderKHR"]
        [::std::mem::size_of::<XrCompositionLayerCylinderKHR>() - 112usize];
    ["Alignment of XrCompositionLayerCylinderKHR"]
        [::std::mem::align_of::<XrCompositionLayerCylinderKHR>() - 8usize];
    ["Offset of field: XrCompositionLayerCylinderKHR::type_"]
        [::std::mem::offset_of!(XrCompositionLayerCylinderKHR, type_) - 0usize];
    ["Offset of field: XrCompositionLayerCylinderKHR::next"]
        [::std::mem::offset_of!(XrCompositionLayerCylinderKHR, next) - 8usize];
    ["Offset of field: XrCompositionLayerCylinderKHR::layerFlags"]
        [::std::mem::offset_of!(XrCompositionLayerCylinderKHR, layerFlags) - 16usize];
    ["Offset of field: XrCompositionLayerCylinderKHR::space"]
        [::std::mem::offset_of!(XrCompositionLayerCylinderKHR, space) - 24usize];
    ["Offset of field: XrCompositionLayerCylinderKHR::eyeVisibility"]
        [::std::mem::offset_of!(XrCompositionLayerCylinderKHR, eyeVisibility) - 32usize];
    ["Offset of field: XrCompositionLayerCylinderKHR::subImage"]
        [::std::mem::offset_of!(XrCompositionLayerCylinderKHR, subImage) - 40usize];
    ["Offset of field: XrCompositionLayerCylinderKHR::pose"]
        [::std::mem::offset_of!(XrCompositionLayerCylinderKHR, pose) - 72usize];
    ["Offset of field: XrCompositionLayerCylinderKHR::radius"]
        [::std::mem::offset_of!(XrCompositionLayerCylinderKHR, radius) - 100usize];
    ["Offset of field: XrCompositionLayerCylinderKHR::centralAngle"]
        [::std::mem::offset_of!(XrCompositionLayerCylinderKHR, centralAngle) - 104usize];
    ["Offset of field: XrCompositionLayerCylinderKHR::aspectRatio"]
        [::std::mem::offset_of!(XrCompositionLayerCylinderKHR, aspectRatio) - 108usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerEquirectKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub eyeVisibility: XrEyeVisibility,
    pub subImage: XrSwapchainSubImage,
    pub pose: XrPosef,
    pub radius: f32,
    pub scale: XrVector2f,
    pub bias: XrVector2f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCompositionLayerEquirectKHR"]
        [::std::mem::size_of::<XrCompositionLayerEquirectKHR>() - 120usize];
    ["Alignment of XrCompositionLayerEquirectKHR"]
        [::std::mem::align_of::<XrCompositionLayerEquirectKHR>() - 8usize];
    ["Offset of field: XrCompositionLayerEquirectKHR::type_"]
        [::std::mem::offset_of!(XrCompositionLayerEquirectKHR, type_) - 0usize];
    ["Offset of field: XrCompositionLayerEquirectKHR::next"]
        [::std::mem::offset_of!(XrCompositionLayerEquirectKHR, next) - 8usize];
    ["Offset of field: XrCompositionLayerEquirectKHR::layerFlags"]
        [::std::mem::offset_of!(XrCompositionLayerEquirectKHR, layerFlags) - 16usize];
    ["Offset of field: XrCompositionLayerEquirectKHR::space"]
        [::std::mem::offset_of!(XrCompositionLayerEquirectKHR, space) - 24usize];
    ["Offset of field: XrCompositionLayerEquirectKHR::eyeVisibility"]
        [::std::mem::offset_of!(XrCompositionLayerEquirectKHR, eyeVisibility) - 32usize];
    ["Offset of field: XrCompositionLayerEquirectKHR::subImage"]
        [::std::mem::offset_of!(XrCompositionLayerEquirectKHR, subImage) - 40usize];
    ["Offset of field: XrCompositionLayerEquirectKHR::pose"]
        [::std::mem::offset_of!(XrCompositionLayerEquirectKHR, pose) - 72usize];
    ["Offset of field: XrCompositionLayerEquirectKHR::radius"]
        [::std::mem::offset_of!(XrCompositionLayerEquirectKHR, radius) - 100usize];
    ["Offset of field: XrCompositionLayerEquirectKHR::scale"]
        [::std::mem::offset_of!(XrCompositionLayerEquirectKHR, scale) - 104usize];
    ["Offset of field: XrCompositionLayerEquirectKHR::bias"]
        [::std::mem::offset_of!(XrCompositionLayerEquirectKHR, bias) - 112usize];
};
pub const XrVisibilityMaskTypeKHR_XR_VISIBILITY_MASK_TYPE_HIDDEN_TRIANGLE_MESH_KHR:
    XrVisibilityMaskTypeKHR = 1;
pub const XrVisibilityMaskTypeKHR_XR_VISIBILITY_MASK_TYPE_VISIBLE_TRIANGLE_MESH_KHR:
    XrVisibilityMaskTypeKHR = 2;
pub const XrVisibilityMaskTypeKHR_XR_VISIBILITY_MASK_TYPE_LINE_LOOP_KHR: XrVisibilityMaskTypeKHR =
    3;
pub const XrVisibilityMaskTypeKHR_XR_VISIBILITY_MASK_TYPE_MAX_ENUM_KHR: XrVisibilityMaskTypeKHR =
    2147483647;
pub type XrVisibilityMaskTypeKHR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVisibilityMaskKHR {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub vertexCapacityInput: u32,
    pub vertexCountOutput: u32,
    pub vertices: *mut XrVector2f,
    pub indexCapacityInput: u32,
    pub indexCountOutput: u32,
    pub indices: *mut u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrVisibilityMaskKHR"][::std::mem::size_of::<XrVisibilityMaskKHR>() - 48usize];
    ["Alignment of XrVisibilityMaskKHR"][::std::mem::align_of::<XrVisibilityMaskKHR>() - 8usize];
    ["Offset of field: XrVisibilityMaskKHR::type_"]
        [::std::mem::offset_of!(XrVisibilityMaskKHR, type_) - 0usize];
    ["Offset of field: XrVisibilityMaskKHR::next"]
        [::std::mem::offset_of!(XrVisibilityMaskKHR, next) - 8usize];
    ["Offset of field: XrVisibilityMaskKHR::vertexCapacityInput"]
        [::std::mem::offset_of!(XrVisibilityMaskKHR, vertexCapacityInput) - 16usize];
    ["Offset of field: XrVisibilityMaskKHR::vertexCountOutput"]
        [::std::mem::offset_of!(XrVisibilityMaskKHR, vertexCountOutput) - 20usize];
    ["Offset of field: XrVisibilityMaskKHR::vertices"]
        [::std::mem::offset_of!(XrVisibilityMaskKHR, vertices) - 24usize];
    ["Offset of field: XrVisibilityMaskKHR::indexCapacityInput"]
        [::std::mem::offset_of!(XrVisibilityMaskKHR, indexCapacityInput) - 32usize];
    ["Offset of field: XrVisibilityMaskKHR::indexCountOutput"]
        [::std::mem::offset_of!(XrVisibilityMaskKHR, indexCountOutput) - 36usize];
    ["Offset of field: XrVisibilityMaskKHR::indices"]
        [::std::mem::offset_of!(XrVisibilityMaskKHR, indices) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataVisibilityMaskChangedKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub session: XrSession,
    pub viewConfigurationType: XrViewConfigurationType,
    pub viewIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataVisibilityMaskChangedKHR"]
        [::std::mem::size_of::<XrEventDataVisibilityMaskChangedKHR>() - 32usize];
    ["Alignment of XrEventDataVisibilityMaskChangedKHR"]
        [::std::mem::align_of::<XrEventDataVisibilityMaskChangedKHR>() - 8usize];
    ["Offset of field: XrEventDataVisibilityMaskChangedKHR::type_"]
        [::std::mem::offset_of!(XrEventDataVisibilityMaskChangedKHR, type_) - 0usize];
    ["Offset of field: XrEventDataVisibilityMaskChangedKHR::next"]
        [::std::mem::offset_of!(XrEventDataVisibilityMaskChangedKHR, next) - 8usize];
    ["Offset of field: XrEventDataVisibilityMaskChangedKHR::session"]
        [::std::mem::offset_of!(XrEventDataVisibilityMaskChangedKHR, session) - 16usize];
    ["Offset of field: XrEventDataVisibilityMaskChangedKHR::viewConfigurationType"][::std::mem::offset_of!(
        XrEventDataVisibilityMaskChangedKHR,
        viewConfigurationType
    ) - 24usize];
    ["Offset of field: XrEventDataVisibilityMaskChangedKHR::viewIndex"]
        [::std::mem::offset_of!(XrEventDataVisibilityMaskChangedKHR, viewIndex) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerColorScaleBiasKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub colorScale: XrColor4f,
    pub colorBias: XrColor4f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCompositionLayerColorScaleBiasKHR"]
        [::std::mem::size_of::<XrCompositionLayerColorScaleBiasKHR>() - 48usize];
    ["Alignment of XrCompositionLayerColorScaleBiasKHR"]
        [::std::mem::align_of::<XrCompositionLayerColorScaleBiasKHR>() - 8usize];
    ["Offset of field: XrCompositionLayerColorScaleBiasKHR::type_"]
        [::std::mem::offset_of!(XrCompositionLayerColorScaleBiasKHR, type_) - 0usize];
    ["Offset of field: XrCompositionLayerColorScaleBiasKHR::next"]
        [::std::mem::offset_of!(XrCompositionLayerColorScaleBiasKHR, next) - 8usize];
    ["Offset of field: XrCompositionLayerColorScaleBiasKHR::colorScale"]
        [::std::mem::offset_of!(XrCompositionLayerColorScaleBiasKHR, colorScale) - 16usize];
    ["Offset of field: XrCompositionLayerColorScaleBiasKHR::colorBias"]
        [::std::mem::offset_of!(XrCompositionLayerColorScaleBiasKHR, colorBias) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrLoaderInitInfoBaseHeaderKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrLoaderInitInfoBaseHeaderKHR"]
        [::std::mem::size_of::<XrLoaderInitInfoBaseHeaderKHR>() - 16usize];
    ["Alignment of XrLoaderInitInfoBaseHeaderKHR"]
        [::std::mem::align_of::<XrLoaderInitInfoBaseHeaderKHR>() - 8usize];
    ["Offset of field: XrLoaderInitInfoBaseHeaderKHR::type_"]
        [::std::mem::offset_of!(XrLoaderInitInfoBaseHeaderKHR, type_) - 0usize];
    ["Offset of field: XrLoaderInitInfoBaseHeaderKHR::next"]
        [::std::mem::offset_of!(XrLoaderInitInfoBaseHeaderKHR, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerEquirect2KHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub eyeVisibility: XrEyeVisibility,
    pub subImage: XrSwapchainSubImage,
    pub pose: XrPosef,
    pub radius: f32,
    pub centralHorizontalAngle: f32,
    pub upperVerticalAngle: f32,
    pub lowerVerticalAngle: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCompositionLayerEquirect2KHR"]
        [::std::mem::size_of::<XrCompositionLayerEquirect2KHR>() - 120usize];
    ["Alignment of XrCompositionLayerEquirect2KHR"]
        [::std::mem::align_of::<XrCompositionLayerEquirect2KHR>() - 8usize];
    ["Offset of field: XrCompositionLayerEquirect2KHR::type_"]
        [::std::mem::offset_of!(XrCompositionLayerEquirect2KHR, type_) - 0usize];
    ["Offset of field: XrCompositionLayerEquirect2KHR::next"]
        [::std::mem::offset_of!(XrCompositionLayerEquirect2KHR, next) - 8usize];
    ["Offset of field: XrCompositionLayerEquirect2KHR::layerFlags"]
        [::std::mem::offset_of!(XrCompositionLayerEquirect2KHR, layerFlags) - 16usize];
    ["Offset of field: XrCompositionLayerEquirect2KHR::space"]
        [::std::mem::offset_of!(XrCompositionLayerEquirect2KHR, space) - 24usize];
    ["Offset of field: XrCompositionLayerEquirect2KHR::eyeVisibility"]
        [::std::mem::offset_of!(XrCompositionLayerEquirect2KHR, eyeVisibility) - 32usize];
    ["Offset of field: XrCompositionLayerEquirect2KHR::subImage"]
        [::std::mem::offset_of!(XrCompositionLayerEquirect2KHR, subImage) - 40usize];
    ["Offset of field: XrCompositionLayerEquirect2KHR::pose"]
        [::std::mem::offset_of!(XrCompositionLayerEquirect2KHR, pose) - 72usize];
    ["Offset of field: XrCompositionLayerEquirect2KHR::radius"]
        [::std::mem::offset_of!(XrCompositionLayerEquirect2KHR, radius) - 100usize];
    ["Offset of field: XrCompositionLayerEquirect2KHR::centralHorizontalAngle"]
        [::std::mem::offset_of!(XrCompositionLayerEquirect2KHR, centralHorizontalAngle) - 104usize];
    ["Offset of field: XrCompositionLayerEquirect2KHR::upperVerticalAngle"]
        [::std::mem::offset_of!(XrCompositionLayerEquirect2KHR, upperVerticalAngle) - 108usize];
    ["Offset of field: XrCompositionLayerEquirect2KHR::lowerVerticalAngle"]
        [::std::mem::offset_of!(XrCompositionLayerEquirect2KHR, lowerVerticalAngle) - 112usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBindingModificationBaseHeaderKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrBindingModificationBaseHeaderKHR"]
        [::std::mem::size_of::<XrBindingModificationBaseHeaderKHR>() - 16usize];
    ["Alignment of XrBindingModificationBaseHeaderKHR"]
        [::std::mem::align_of::<XrBindingModificationBaseHeaderKHR>() - 8usize];
    ["Offset of field: XrBindingModificationBaseHeaderKHR::type_"]
        [::std::mem::offset_of!(XrBindingModificationBaseHeaderKHR, type_) - 0usize];
    ["Offset of field: XrBindingModificationBaseHeaderKHR::next"]
        [::std::mem::offset_of!(XrBindingModificationBaseHeaderKHR, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBindingModificationsKHR {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub bindingModificationCount: u32,
    pub bindingModifications: *const *const XrBindingModificationBaseHeaderKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrBindingModificationsKHR"]
        [::std::mem::size_of::<XrBindingModificationsKHR>() - 32usize];
    ["Alignment of XrBindingModificationsKHR"]
        [::std::mem::align_of::<XrBindingModificationsKHR>() - 8usize];
    ["Offset of field: XrBindingModificationsKHR::type_"]
        [::std::mem::offset_of!(XrBindingModificationsKHR, type_) - 0usize];
    ["Offset of field: XrBindingModificationsKHR::next"]
        [::std::mem::offset_of!(XrBindingModificationsKHR, next) - 8usize];
    ["Offset of field: XrBindingModificationsKHR::bindingModificationCount"]
        [::std::mem::offset_of!(XrBindingModificationsKHR, bindingModificationCount) - 16usize];
    ["Offset of field: XrBindingModificationsKHR::bindingModifications"]
        [::std::mem::offset_of!(XrBindingModificationsKHR, bindingModifications) - 24usize];
};
pub type XrSpacesLocateInfoKHR = XrSpacesLocateInfo;
pub type XrSpaceLocationDataKHR = XrSpaceLocationData;
pub type XrSpaceLocationsKHR = XrSpaceLocations;
pub type XrSpaceVelocityDataKHR = XrSpaceVelocityData;
pub type XrSpaceVelocitiesKHR = XrSpaceVelocities;
pub type XrColor3fKHR = XrColor3f;
pub type XrExtent3DfKHR = XrExtent3Df;
pub type XrSpherefKHR = XrSpheref;
pub type XrBoxfKHR = XrBoxf;
pub type XrFrustumfKHR = XrFrustumf;
pub const XrPerfSettingsDomainEXT_XR_PERF_SETTINGS_DOMAIN_CPU_EXT: XrPerfSettingsDomainEXT = 1;
pub const XrPerfSettingsDomainEXT_XR_PERF_SETTINGS_DOMAIN_GPU_EXT: XrPerfSettingsDomainEXT = 2;
pub const XrPerfSettingsDomainEXT_XR_PERF_SETTINGS_DOMAIN_MAX_ENUM_EXT: XrPerfSettingsDomainEXT =
    2147483647;
pub type XrPerfSettingsDomainEXT = ::std::os::raw::c_uint;
pub const XrPerfSettingsSubDomainEXT_XR_PERF_SETTINGS_SUB_DOMAIN_COMPOSITING_EXT:
    XrPerfSettingsSubDomainEXT = 1;
pub const XrPerfSettingsSubDomainEXT_XR_PERF_SETTINGS_SUB_DOMAIN_RENDERING_EXT:
    XrPerfSettingsSubDomainEXT = 2;
pub const XrPerfSettingsSubDomainEXT_XR_PERF_SETTINGS_SUB_DOMAIN_THERMAL_EXT:
    XrPerfSettingsSubDomainEXT = 3;
pub const XrPerfSettingsSubDomainEXT_XR_PERF_SETTINGS_SUB_DOMAIN_MAX_ENUM_EXT:
    XrPerfSettingsSubDomainEXT = 2147483647;
pub type XrPerfSettingsSubDomainEXT = ::std::os::raw::c_uint;
pub const XrPerfSettingsLevelEXT_XR_PERF_SETTINGS_LEVEL_POWER_SAVINGS_EXT: XrPerfSettingsLevelEXT =
    0;
pub const XrPerfSettingsLevelEXT_XR_PERF_SETTINGS_LEVEL_SUSTAINED_LOW_EXT: XrPerfSettingsLevelEXT =
    25;
pub const XrPerfSettingsLevelEXT_XR_PERF_SETTINGS_LEVEL_SUSTAINED_HIGH_EXT: XrPerfSettingsLevelEXT =
    50;
pub const XrPerfSettingsLevelEXT_XR_PERF_SETTINGS_LEVEL_BOOST_EXT: XrPerfSettingsLevelEXT = 75;
pub const XrPerfSettingsLevelEXT_XR_PERF_SETTINGS_LEVEL_MAX_ENUM_EXT: XrPerfSettingsLevelEXT =
    2147483647;
pub type XrPerfSettingsLevelEXT = ::std::os::raw::c_uint;
pub const XrPerfSettingsNotificationLevelEXT_XR_PERF_SETTINGS_NOTIF_LEVEL_NORMAL_EXT:
    XrPerfSettingsNotificationLevelEXT = 0;
pub const XrPerfSettingsNotificationLevelEXT_XR_PERF_SETTINGS_NOTIF_LEVEL_WARNING_EXT:
    XrPerfSettingsNotificationLevelEXT = 25;
pub const XrPerfSettingsNotificationLevelEXT_XR_PERF_SETTINGS_NOTIF_LEVEL_IMPAIRED_EXT:
    XrPerfSettingsNotificationLevelEXT = 75;
pub const XrPerfSettingsNotificationLevelEXT_XR_PERF_SETTINGS_NOTIFICATION_LEVEL_MAX_ENUM_EXT:
    XrPerfSettingsNotificationLevelEXT = 2147483647;
pub type XrPerfSettingsNotificationLevelEXT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataPerfSettingsEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub domain: XrPerfSettingsDomainEXT,
    pub subDomain: XrPerfSettingsSubDomainEXT,
    pub fromLevel: XrPerfSettingsNotificationLevelEXT,
    pub toLevel: XrPerfSettingsNotificationLevelEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataPerfSettingsEXT"]
        [::std::mem::size_of::<XrEventDataPerfSettingsEXT>() - 32usize];
    ["Alignment of XrEventDataPerfSettingsEXT"]
        [::std::mem::align_of::<XrEventDataPerfSettingsEXT>() - 8usize];
    ["Offset of field: XrEventDataPerfSettingsEXT::type_"]
        [::std::mem::offset_of!(XrEventDataPerfSettingsEXT, type_) - 0usize];
    ["Offset of field: XrEventDataPerfSettingsEXT::next"]
        [::std::mem::offset_of!(XrEventDataPerfSettingsEXT, next) - 8usize];
    ["Offset of field: XrEventDataPerfSettingsEXT::domain"]
        [::std::mem::offset_of!(XrEventDataPerfSettingsEXT, domain) - 16usize];
    ["Offset of field: XrEventDataPerfSettingsEXT::subDomain"]
        [::std::mem::offset_of!(XrEventDataPerfSettingsEXT, subDomain) - 20usize];
    ["Offset of field: XrEventDataPerfSettingsEXT::fromLevel"]
        [::std::mem::offset_of!(XrEventDataPerfSettingsEXT, fromLevel) - 24usize];
    ["Offset of field: XrEventDataPerfSettingsEXT::toLevel"]
        [::std::mem::offset_of!(XrEventDataPerfSettingsEXT, toLevel) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrDebugUtilsMessengerEXT_T {
    _unused: [u8; 0],
}
pub type XrDebugUtilsMessengerEXT = *mut XrDebugUtilsMessengerEXT_T;
pub type XrDebugUtilsMessageSeverityFlagsEXT = XrFlags64;
pub const XR_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT: XrDebugUtilsMessageSeverityFlagsEXT = 1;
pub const XR_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT: XrDebugUtilsMessageSeverityFlagsEXT = 16;
pub const XR_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT: XrDebugUtilsMessageSeverityFlagsEXT =
    256;
pub const XR_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT: XrDebugUtilsMessageSeverityFlagsEXT = 4096;
pub type XrDebugUtilsMessageTypeFlagsEXT = XrFlags64;
pub const XR_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT: XrDebugUtilsMessageTypeFlagsEXT = 1;
pub const XR_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT: XrDebugUtilsMessageTypeFlagsEXT = 2;
pub const XR_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT: XrDebugUtilsMessageTypeFlagsEXT = 4;
pub const XR_DEBUG_UTILS_MESSAGE_TYPE_CONFORMANCE_BIT_EXT: XrDebugUtilsMessageTypeFlagsEXT = 8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrDebugUtilsObjectNameInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub objectType: XrObjectType,
    pub objectHandle: u64,
    pub objectName: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrDebugUtilsObjectNameInfoEXT"]
        [::std::mem::size_of::<XrDebugUtilsObjectNameInfoEXT>() - 40usize];
    ["Alignment of XrDebugUtilsObjectNameInfoEXT"]
        [::std::mem::align_of::<XrDebugUtilsObjectNameInfoEXT>() - 8usize];
    ["Offset of field: XrDebugUtilsObjectNameInfoEXT::type_"]
        [::std::mem::offset_of!(XrDebugUtilsObjectNameInfoEXT, type_) - 0usize];
    ["Offset of field: XrDebugUtilsObjectNameInfoEXT::next"]
        [::std::mem::offset_of!(XrDebugUtilsObjectNameInfoEXT, next) - 8usize];
    ["Offset of field: XrDebugUtilsObjectNameInfoEXT::objectType"]
        [::std::mem::offset_of!(XrDebugUtilsObjectNameInfoEXT, objectType) - 16usize];
    ["Offset of field: XrDebugUtilsObjectNameInfoEXT::objectHandle"]
        [::std::mem::offset_of!(XrDebugUtilsObjectNameInfoEXT, objectHandle) - 24usize];
    ["Offset of field: XrDebugUtilsObjectNameInfoEXT::objectName"]
        [::std::mem::offset_of!(XrDebugUtilsObjectNameInfoEXT, objectName) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrDebugUtilsLabelEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub labelName: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrDebugUtilsLabelEXT"][::std::mem::size_of::<XrDebugUtilsLabelEXT>() - 24usize];
    ["Alignment of XrDebugUtilsLabelEXT"][::std::mem::align_of::<XrDebugUtilsLabelEXT>() - 8usize];
    ["Offset of field: XrDebugUtilsLabelEXT::type_"]
        [::std::mem::offset_of!(XrDebugUtilsLabelEXT, type_) - 0usize];
    ["Offset of field: XrDebugUtilsLabelEXT::next"]
        [::std::mem::offset_of!(XrDebugUtilsLabelEXT, next) - 8usize];
    ["Offset of field: XrDebugUtilsLabelEXT::labelName"]
        [::std::mem::offset_of!(XrDebugUtilsLabelEXT, labelName) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrDebugUtilsMessengerCallbackDataEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub messageId: *const ::std::os::raw::c_char,
    pub functionName: *const ::std::os::raw::c_char,
    pub message: *const ::std::os::raw::c_char,
    pub objectCount: u32,
    pub objects: *mut XrDebugUtilsObjectNameInfoEXT,
    pub sessionLabelCount: u32,
    pub sessionLabels: *mut XrDebugUtilsLabelEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrDebugUtilsMessengerCallbackDataEXT"]
        [::std::mem::size_of::<XrDebugUtilsMessengerCallbackDataEXT>() - 72usize];
    ["Alignment of XrDebugUtilsMessengerCallbackDataEXT"]
        [::std::mem::align_of::<XrDebugUtilsMessengerCallbackDataEXT>() - 8usize];
    ["Offset of field: XrDebugUtilsMessengerCallbackDataEXT::type_"]
        [::std::mem::offset_of!(XrDebugUtilsMessengerCallbackDataEXT, type_) - 0usize];
    ["Offset of field: XrDebugUtilsMessengerCallbackDataEXT::next"]
        [::std::mem::offset_of!(XrDebugUtilsMessengerCallbackDataEXT, next) - 8usize];
    ["Offset of field: XrDebugUtilsMessengerCallbackDataEXT::messageId"]
        [::std::mem::offset_of!(XrDebugUtilsMessengerCallbackDataEXT, messageId) - 16usize];
    ["Offset of field: XrDebugUtilsMessengerCallbackDataEXT::functionName"]
        [::std::mem::offset_of!(XrDebugUtilsMessengerCallbackDataEXT, functionName) - 24usize];
    ["Offset of field: XrDebugUtilsMessengerCallbackDataEXT::message"]
        [::std::mem::offset_of!(XrDebugUtilsMessengerCallbackDataEXT, message) - 32usize];
    ["Offset of field: XrDebugUtilsMessengerCallbackDataEXT::objectCount"]
        [::std::mem::offset_of!(XrDebugUtilsMessengerCallbackDataEXT, objectCount) - 40usize];
    ["Offset of field: XrDebugUtilsMessengerCallbackDataEXT::objects"]
        [::std::mem::offset_of!(XrDebugUtilsMessengerCallbackDataEXT, objects) - 48usize];
    ["Offset of field: XrDebugUtilsMessengerCallbackDataEXT::sessionLabelCount"]
        [::std::mem::offset_of!(XrDebugUtilsMessengerCallbackDataEXT, sessionLabelCount) - 56usize];
    ["Offset of field: XrDebugUtilsMessengerCallbackDataEXT::sessionLabels"]
        [::std::mem::offset_of!(XrDebugUtilsMessengerCallbackDataEXT, sessionLabels) - 64usize];
};
pub type PFN_xrDebugUtilsMessengerCallbackEXT = ::std::option::Option<
    unsafe extern "C" fn(
        messageSeverity: XrDebugUtilsMessageSeverityFlagsEXT,
        messageTypes: XrDebugUtilsMessageTypeFlagsEXT,
        callbackData: *const XrDebugUtilsMessengerCallbackDataEXT,
        userData: *mut ::std::os::raw::c_void,
    ) -> XrBool32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrDebugUtilsMessengerCreateInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub messageSeverities: XrDebugUtilsMessageSeverityFlagsEXT,
    pub messageTypes: XrDebugUtilsMessageTypeFlagsEXT,
    pub userCallback: PFN_xrDebugUtilsMessengerCallbackEXT,
    pub userData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrDebugUtilsMessengerCreateInfoEXT"]
        [::std::mem::size_of::<XrDebugUtilsMessengerCreateInfoEXT>() - 48usize];
    ["Alignment of XrDebugUtilsMessengerCreateInfoEXT"]
        [::std::mem::align_of::<XrDebugUtilsMessengerCreateInfoEXT>() - 8usize];
    ["Offset of field: XrDebugUtilsMessengerCreateInfoEXT::type_"]
        [::std::mem::offset_of!(XrDebugUtilsMessengerCreateInfoEXT, type_) - 0usize];
    ["Offset of field: XrDebugUtilsMessengerCreateInfoEXT::next"]
        [::std::mem::offset_of!(XrDebugUtilsMessengerCreateInfoEXT, next) - 8usize];
    ["Offset of field: XrDebugUtilsMessengerCreateInfoEXT::messageSeverities"]
        [::std::mem::offset_of!(XrDebugUtilsMessengerCreateInfoEXT, messageSeverities) - 16usize];
    ["Offset of field: XrDebugUtilsMessengerCreateInfoEXT::messageTypes"]
        [::std::mem::offset_of!(XrDebugUtilsMessengerCreateInfoEXT, messageTypes) - 24usize];
    ["Offset of field: XrDebugUtilsMessengerCreateInfoEXT::userCallback"]
        [::std::mem::offset_of!(XrDebugUtilsMessengerCreateInfoEXT, userCallback) - 32usize];
    ["Offset of field: XrDebugUtilsMessengerCreateInfoEXT::userData"]
        [::std::mem::offset_of!(XrDebugUtilsMessengerCreateInfoEXT, userData) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemEyeGazeInteractionPropertiesEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsEyeGazeInteraction: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemEyeGazeInteractionPropertiesEXT"]
        [::std::mem::size_of::<XrSystemEyeGazeInteractionPropertiesEXT>() - 24usize];
    ["Alignment of XrSystemEyeGazeInteractionPropertiesEXT"]
        [::std::mem::align_of::<XrSystemEyeGazeInteractionPropertiesEXT>() - 8usize];
    ["Offset of field: XrSystemEyeGazeInteractionPropertiesEXT::type_"]
        [::std::mem::offset_of!(XrSystemEyeGazeInteractionPropertiesEXT, type_) - 0usize];
    ["Offset of field: XrSystemEyeGazeInteractionPropertiesEXT::next"]
        [::std::mem::offset_of!(XrSystemEyeGazeInteractionPropertiesEXT, next) - 8usize];
    ["Offset of field: XrSystemEyeGazeInteractionPropertiesEXT::supportsEyeGazeInteraction"][::std::mem::offset_of!(
        XrSystemEyeGazeInteractionPropertiesEXT,
        supportsEyeGazeInteraction
    )
        - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEyeGazeSampleTimeEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub time: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEyeGazeSampleTimeEXT"][::std::mem::size_of::<XrEyeGazeSampleTimeEXT>() - 24usize];
    ["Alignment of XrEyeGazeSampleTimeEXT"]
        [::std::mem::align_of::<XrEyeGazeSampleTimeEXT>() - 8usize];
    ["Offset of field: XrEyeGazeSampleTimeEXT::type_"]
        [::std::mem::offset_of!(XrEyeGazeSampleTimeEXT, type_) - 0usize];
    ["Offset of field: XrEyeGazeSampleTimeEXT::next"]
        [::std::mem::offset_of!(XrEyeGazeSampleTimeEXT, next) - 8usize];
    ["Offset of field: XrEyeGazeSampleTimeEXT::time"]
        [::std::mem::offset_of!(XrEyeGazeSampleTimeEXT, time) - 16usize];
};
pub type XrOverlaySessionCreateFlagsEXTX = XrFlags64;
pub type XrOverlayMainSessionFlagsEXTX = XrFlags64;
pub const XR_OVERLAY_MAIN_SESSION_ENABLED_COMPOSITION_LAYER_INFO_DEPTH_BIT_EXTX:
    XrOverlayMainSessionFlagsEXTX = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSessionCreateInfoOverlayEXTX {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub createFlags: XrOverlaySessionCreateFlagsEXTX,
    pub sessionLayersPlacement: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSessionCreateInfoOverlayEXTX"]
        [::std::mem::size_of::<XrSessionCreateInfoOverlayEXTX>() - 32usize];
    ["Alignment of XrSessionCreateInfoOverlayEXTX"]
        [::std::mem::align_of::<XrSessionCreateInfoOverlayEXTX>() - 8usize];
    ["Offset of field: XrSessionCreateInfoOverlayEXTX::type_"]
        [::std::mem::offset_of!(XrSessionCreateInfoOverlayEXTX, type_) - 0usize];
    ["Offset of field: XrSessionCreateInfoOverlayEXTX::next"]
        [::std::mem::offset_of!(XrSessionCreateInfoOverlayEXTX, next) - 8usize];
    ["Offset of field: XrSessionCreateInfoOverlayEXTX::createFlags"]
        [::std::mem::offset_of!(XrSessionCreateInfoOverlayEXTX, createFlags) - 16usize];
    ["Offset of field: XrSessionCreateInfoOverlayEXTX::sessionLayersPlacement"]
        [::std::mem::offset_of!(XrSessionCreateInfoOverlayEXTX, sessionLayersPlacement) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataMainSessionVisibilityChangedEXTX {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub visible: XrBool32,
    pub flags: XrOverlayMainSessionFlagsEXTX,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataMainSessionVisibilityChangedEXTX"]
        [::std::mem::size_of::<XrEventDataMainSessionVisibilityChangedEXTX>() - 32usize];
    ["Alignment of XrEventDataMainSessionVisibilityChangedEXTX"]
        [::std::mem::align_of::<XrEventDataMainSessionVisibilityChangedEXTX>() - 8usize];
    ["Offset of field: XrEventDataMainSessionVisibilityChangedEXTX::type_"]
        [::std::mem::offset_of!(XrEventDataMainSessionVisibilityChangedEXTX, type_) - 0usize];
    ["Offset of field: XrEventDataMainSessionVisibilityChangedEXTX::next"]
        [::std::mem::offset_of!(XrEventDataMainSessionVisibilityChangedEXTX, next) - 8usize];
    ["Offset of field: XrEventDataMainSessionVisibilityChangedEXTX::visible"]
        [::std::mem::offset_of!(XrEventDataMainSessionVisibilityChangedEXTX, visible) - 16usize];
    ["Offset of field: XrEventDataMainSessionVisibilityChangedEXTX::flags"]
        [::std::mem::offset_of!(XrEventDataMainSessionVisibilityChangedEXTX, flags) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorMSFT_T {
    _unused: [u8; 0],
}
pub type XrSpatialAnchorMSFT = *mut XrSpatialAnchorMSFT_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub space: XrSpace,
    pub pose: XrPosef,
    pub time: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorCreateInfoMSFT"]
        [::std::mem::size_of::<XrSpatialAnchorCreateInfoMSFT>() - 64usize];
    ["Alignment of XrSpatialAnchorCreateInfoMSFT"]
        [::std::mem::align_of::<XrSpatialAnchorCreateInfoMSFT>() - 8usize];
    ["Offset of field: XrSpatialAnchorCreateInfoMSFT::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorCreateInfoMSFT, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorCreateInfoMSFT::next"]
        [::std::mem::offset_of!(XrSpatialAnchorCreateInfoMSFT, next) - 8usize];
    ["Offset of field: XrSpatialAnchorCreateInfoMSFT::space"]
        [::std::mem::offset_of!(XrSpatialAnchorCreateInfoMSFT, space) - 16usize];
    ["Offset of field: XrSpatialAnchorCreateInfoMSFT::pose"]
        [::std::mem::offset_of!(XrSpatialAnchorCreateInfoMSFT, pose) - 24usize];
    ["Offset of field: XrSpatialAnchorCreateInfoMSFT::time"]
        [::std::mem::offset_of!(XrSpatialAnchorCreateInfoMSFT, time) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorSpaceCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub anchor: XrSpatialAnchorMSFT,
    pub poseInAnchorSpace: XrPosef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorSpaceCreateInfoMSFT"]
        [::std::mem::size_of::<XrSpatialAnchorSpaceCreateInfoMSFT>() - 56usize];
    ["Alignment of XrSpatialAnchorSpaceCreateInfoMSFT"]
        [::std::mem::align_of::<XrSpatialAnchorSpaceCreateInfoMSFT>() - 8usize];
    ["Offset of field: XrSpatialAnchorSpaceCreateInfoMSFT::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorSpaceCreateInfoMSFT, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorSpaceCreateInfoMSFT::next"]
        [::std::mem::offset_of!(XrSpatialAnchorSpaceCreateInfoMSFT, next) - 8usize];
    ["Offset of field: XrSpatialAnchorSpaceCreateInfoMSFT::anchor"]
        [::std::mem::offset_of!(XrSpatialAnchorSpaceCreateInfoMSFT, anchor) - 16usize];
    ["Offset of field: XrSpatialAnchorSpaceCreateInfoMSFT::poseInAnchorSpace"]
        [::std::mem::offset_of!(XrSpatialAnchorSpaceCreateInfoMSFT, poseInAnchorSpace) - 24usize];
};
pub type XrCompositionLayerImageLayoutFlagsFB = XrFlags64;
pub const XR_COMPOSITION_LAYER_IMAGE_LAYOUT_VERTICAL_FLIP_BIT_FB:
    XrCompositionLayerImageLayoutFlagsFB = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerImageLayoutFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub flags: XrCompositionLayerImageLayoutFlagsFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCompositionLayerImageLayoutFB"]
        [::std::mem::size_of::<XrCompositionLayerImageLayoutFB>() - 24usize];
    ["Alignment of XrCompositionLayerImageLayoutFB"]
        [::std::mem::align_of::<XrCompositionLayerImageLayoutFB>() - 8usize];
    ["Offset of field: XrCompositionLayerImageLayoutFB::type_"]
        [::std::mem::offset_of!(XrCompositionLayerImageLayoutFB, type_) - 0usize];
    ["Offset of field: XrCompositionLayerImageLayoutFB::next"]
        [::std::mem::offset_of!(XrCompositionLayerImageLayoutFB, next) - 8usize];
    ["Offset of field: XrCompositionLayerImageLayoutFB::flags"]
        [::std::mem::offset_of!(XrCompositionLayerImageLayoutFB, flags) - 16usize];
};
pub const XrBlendFactorFB_XR_BLEND_FACTOR_ZERO_FB: XrBlendFactorFB = 0;
pub const XrBlendFactorFB_XR_BLEND_FACTOR_ONE_FB: XrBlendFactorFB = 1;
pub const XrBlendFactorFB_XR_BLEND_FACTOR_SRC_ALPHA_FB: XrBlendFactorFB = 2;
pub const XrBlendFactorFB_XR_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA_FB: XrBlendFactorFB = 3;
pub const XrBlendFactorFB_XR_BLEND_FACTOR_DST_ALPHA_FB: XrBlendFactorFB = 4;
pub const XrBlendFactorFB_XR_BLEND_FACTOR_ONE_MINUS_DST_ALPHA_FB: XrBlendFactorFB = 5;
pub const XrBlendFactorFB_XR_BLEND_FACTOR_MAX_ENUM_FB: XrBlendFactorFB = 2147483647;
pub type XrBlendFactorFB = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerAlphaBlendFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub srcFactorColor: XrBlendFactorFB,
    pub dstFactorColor: XrBlendFactorFB,
    pub srcFactorAlpha: XrBlendFactorFB,
    pub dstFactorAlpha: XrBlendFactorFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCompositionLayerAlphaBlendFB"]
        [::std::mem::size_of::<XrCompositionLayerAlphaBlendFB>() - 32usize];
    ["Alignment of XrCompositionLayerAlphaBlendFB"]
        [::std::mem::align_of::<XrCompositionLayerAlphaBlendFB>() - 8usize];
    ["Offset of field: XrCompositionLayerAlphaBlendFB::type_"]
        [::std::mem::offset_of!(XrCompositionLayerAlphaBlendFB, type_) - 0usize];
    ["Offset of field: XrCompositionLayerAlphaBlendFB::next"]
        [::std::mem::offset_of!(XrCompositionLayerAlphaBlendFB, next) - 8usize];
    ["Offset of field: XrCompositionLayerAlphaBlendFB::srcFactorColor"]
        [::std::mem::offset_of!(XrCompositionLayerAlphaBlendFB, srcFactorColor) - 16usize];
    ["Offset of field: XrCompositionLayerAlphaBlendFB::dstFactorColor"]
        [::std::mem::offset_of!(XrCompositionLayerAlphaBlendFB, dstFactorColor) - 20usize];
    ["Offset of field: XrCompositionLayerAlphaBlendFB::srcFactorAlpha"]
        [::std::mem::offset_of!(XrCompositionLayerAlphaBlendFB, srcFactorAlpha) - 24usize];
    ["Offset of field: XrCompositionLayerAlphaBlendFB::dstFactorAlpha"]
        [::std::mem::offset_of!(XrCompositionLayerAlphaBlendFB, dstFactorAlpha) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViewConfigurationDepthRangeEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub recommendedNearZ: f32,
    pub minNearZ: f32,
    pub recommendedFarZ: f32,
    pub maxFarZ: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrViewConfigurationDepthRangeEXT"]
        [::std::mem::size_of::<XrViewConfigurationDepthRangeEXT>() - 32usize];
    ["Alignment of XrViewConfigurationDepthRangeEXT"]
        [::std::mem::align_of::<XrViewConfigurationDepthRangeEXT>() - 8usize];
    ["Offset of field: XrViewConfigurationDepthRangeEXT::type_"]
        [::std::mem::offset_of!(XrViewConfigurationDepthRangeEXT, type_) - 0usize];
    ["Offset of field: XrViewConfigurationDepthRangeEXT::next"]
        [::std::mem::offset_of!(XrViewConfigurationDepthRangeEXT, next) - 8usize];
    ["Offset of field: XrViewConfigurationDepthRangeEXT::recommendedNearZ"]
        [::std::mem::offset_of!(XrViewConfigurationDepthRangeEXT, recommendedNearZ) - 16usize];
    ["Offset of field: XrViewConfigurationDepthRangeEXT::minNearZ"]
        [::std::mem::offset_of!(XrViewConfigurationDepthRangeEXT, minNearZ) - 20usize];
    ["Offset of field: XrViewConfigurationDepthRangeEXT::recommendedFarZ"]
        [::std::mem::offset_of!(XrViewConfigurationDepthRangeEXT, recommendedFarZ) - 24usize];
    ["Offset of field: XrViewConfigurationDepthRangeEXT::maxFarZ"]
        [::std::mem::offset_of!(XrViewConfigurationDepthRangeEXT, maxFarZ) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialGraphNodeBindingMSFT_T {
    _unused: [u8; 0],
}
pub type XrSpatialGraphNodeBindingMSFT = *mut XrSpatialGraphNodeBindingMSFT_T;
pub const XrSpatialGraphNodeTypeMSFT_XR_SPATIAL_GRAPH_NODE_TYPE_STATIC_MSFT:
    XrSpatialGraphNodeTypeMSFT = 1;
pub const XrSpatialGraphNodeTypeMSFT_XR_SPATIAL_GRAPH_NODE_TYPE_DYNAMIC_MSFT:
    XrSpatialGraphNodeTypeMSFT = 2;
pub const XrSpatialGraphNodeTypeMSFT_XR_SPATIAL_GRAPH_NODE_TYPE_MAX_ENUM_MSFT:
    XrSpatialGraphNodeTypeMSFT = 2147483647;
pub type XrSpatialGraphNodeTypeMSFT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialGraphNodeSpaceCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub nodeType: XrSpatialGraphNodeTypeMSFT,
    pub nodeId: [u8; 16usize],
    pub pose: XrPosef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialGraphNodeSpaceCreateInfoMSFT"]
        [::std::mem::size_of::<XrSpatialGraphNodeSpaceCreateInfoMSFT>() - 64usize];
    ["Alignment of XrSpatialGraphNodeSpaceCreateInfoMSFT"]
        [::std::mem::align_of::<XrSpatialGraphNodeSpaceCreateInfoMSFT>() - 8usize];
    ["Offset of field: XrSpatialGraphNodeSpaceCreateInfoMSFT::type_"]
        [::std::mem::offset_of!(XrSpatialGraphNodeSpaceCreateInfoMSFT, type_) - 0usize];
    ["Offset of field: XrSpatialGraphNodeSpaceCreateInfoMSFT::next"]
        [::std::mem::offset_of!(XrSpatialGraphNodeSpaceCreateInfoMSFT, next) - 8usize];
    ["Offset of field: XrSpatialGraphNodeSpaceCreateInfoMSFT::nodeType"]
        [::std::mem::offset_of!(XrSpatialGraphNodeSpaceCreateInfoMSFT, nodeType) - 16usize];
    ["Offset of field: XrSpatialGraphNodeSpaceCreateInfoMSFT::nodeId"]
        [::std::mem::offset_of!(XrSpatialGraphNodeSpaceCreateInfoMSFT, nodeId) - 20usize];
    ["Offset of field: XrSpatialGraphNodeSpaceCreateInfoMSFT::pose"]
        [::std::mem::offset_of!(XrSpatialGraphNodeSpaceCreateInfoMSFT, pose) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialGraphStaticNodeBindingCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub space: XrSpace,
    pub poseInSpace: XrPosef,
    pub time: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialGraphStaticNodeBindingCreateInfoMSFT"]
        [::std::mem::size_of::<XrSpatialGraphStaticNodeBindingCreateInfoMSFT>() - 64usize];
    ["Alignment of XrSpatialGraphStaticNodeBindingCreateInfoMSFT"]
        [::std::mem::align_of::<XrSpatialGraphStaticNodeBindingCreateInfoMSFT>() - 8usize];
    ["Offset of field: XrSpatialGraphStaticNodeBindingCreateInfoMSFT::type_"]
        [::std::mem::offset_of!(XrSpatialGraphStaticNodeBindingCreateInfoMSFT, type_) - 0usize];
    ["Offset of field: XrSpatialGraphStaticNodeBindingCreateInfoMSFT::next"]
        [::std::mem::offset_of!(XrSpatialGraphStaticNodeBindingCreateInfoMSFT, next) - 8usize];
    ["Offset of field: XrSpatialGraphStaticNodeBindingCreateInfoMSFT::space"]
        [::std::mem::offset_of!(XrSpatialGraphStaticNodeBindingCreateInfoMSFT, space) - 16usize];
    ["Offset of field: XrSpatialGraphStaticNodeBindingCreateInfoMSFT::poseInSpace"][::std::mem::offset_of!(
        XrSpatialGraphStaticNodeBindingCreateInfoMSFT,
        poseInSpace
    ) - 24usize];
    ["Offset of field: XrSpatialGraphStaticNodeBindingCreateInfoMSFT::time"]
        [::std::mem::offset_of!(XrSpatialGraphStaticNodeBindingCreateInfoMSFT, time) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialGraphNodeBindingPropertiesGetInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialGraphNodeBindingPropertiesGetInfoMSFT"]
        [::std::mem::size_of::<XrSpatialGraphNodeBindingPropertiesGetInfoMSFT>() - 16usize];
    ["Alignment of XrSpatialGraphNodeBindingPropertiesGetInfoMSFT"]
        [::std::mem::align_of::<XrSpatialGraphNodeBindingPropertiesGetInfoMSFT>() - 8usize];
    ["Offset of field: XrSpatialGraphNodeBindingPropertiesGetInfoMSFT::type_"]
        [::std::mem::offset_of!(XrSpatialGraphNodeBindingPropertiesGetInfoMSFT, type_) - 0usize];
    ["Offset of field: XrSpatialGraphNodeBindingPropertiesGetInfoMSFT::next"]
        [::std::mem::offset_of!(XrSpatialGraphNodeBindingPropertiesGetInfoMSFT, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialGraphNodeBindingPropertiesMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub nodeId: [u8; 16usize],
    pub poseInNodeSpace: XrPosef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialGraphNodeBindingPropertiesMSFT"]
        [::std::mem::size_of::<XrSpatialGraphNodeBindingPropertiesMSFT>() - 64usize];
    ["Alignment of XrSpatialGraphNodeBindingPropertiesMSFT"]
        [::std::mem::align_of::<XrSpatialGraphNodeBindingPropertiesMSFT>() - 8usize];
    ["Offset of field: XrSpatialGraphNodeBindingPropertiesMSFT::type_"]
        [::std::mem::offset_of!(XrSpatialGraphNodeBindingPropertiesMSFT, type_) - 0usize];
    ["Offset of field: XrSpatialGraphNodeBindingPropertiesMSFT::next"]
        [::std::mem::offset_of!(XrSpatialGraphNodeBindingPropertiesMSFT, next) - 8usize];
    ["Offset of field: XrSpatialGraphNodeBindingPropertiesMSFT::nodeId"]
        [::std::mem::offset_of!(XrSpatialGraphNodeBindingPropertiesMSFT, nodeId) - 16usize];
    ["Offset of field: XrSpatialGraphNodeBindingPropertiesMSFT::poseInNodeSpace"][::std::mem::offset_of!(
        XrSpatialGraphNodeBindingPropertiesMSFT,
        poseInNodeSpace
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandTrackerEXT_T {
    _unused: [u8; 0],
}
pub type XrHandTrackerEXT = *mut XrHandTrackerEXT_T;
pub const XrHandEXT_XR_HAND_LEFT_EXT: XrHandEXT = 1;
pub const XrHandEXT_XR_HAND_RIGHT_EXT: XrHandEXT = 2;
pub const XrHandEXT_XR_HAND_MAX_ENUM_EXT: XrHandEXT = 2147483647;
pub type XrHandEXT = ::std::os::raw::c_uint;
pub const XrHandJointEXT_XR_HAND_JOINT_PALM_EXT: XrHandJointEXT = 0;
pub const XrHandJointEXT_XR_HAND_JOINT_WRIST_EXT: XrHandJointEXT = 1;
pub const XrHandJointEXT_XR_HAND_JOINT_THUMB_METACARPAL_EXT: XrHandJointEXT = 2;
pub const XrHandJointEXT_XR_HAND_JOINT_THUMB_PROXIMAL_EXT: XrHandJointEXT = 3;
pub const XrHandJointEXT_XR_HAND_JOINT_THUMB_DISTAL_EXT: XrHandJointEXT = 4;
pub const XrHandJointEXT_XR_HAND_JOINT_THUMB_TIP_EXT: XrHandJointEXT = 5;
pub const XrHandJointEXT_XR_HAND_JOINT_INDEX_METACARPAL_EXT: XrHandJointEXT = 6;
pub const XrHandJointEXT_XR_HAND_JOINT_INDEX_PROXIMAL_EXT: XrHandJointEXT = 7;
pub const XrHandJointEXT_XR_HAND_JOINT_INDEX_INTERMEDIATE_EXT: XrHandJointEXT = 8;
pub const XrHandJointEXT_XR_HAND_JOINT_INDEX_DISTAL_EXT: XrHandJointEXT = 9;
pub const XrHandJointEXT_XR_HAND_JOINT_INDEX_TIP_EXT: XrHandJointEXT = 10;
pub const XrHandJointEXT_XR_HAND_JOINT_MIDDLE_METACARPAL_EXT: XrHandJointEXT = 11;
pub const XrHandJointEXT_XR_HAND_JOINT_MIDDLE_PROXIMAL_EXT: XrHandJointEXT = 12;
pub const XrHandJointEXT_XR_HAND_JOINT_MIDDLE_INTERMEDIATE_EXT: XrHandJointEXT = 13;
pub const XrHandJointEXT_XR_HAND_JOINT_MIDDLE_DISTAL_EXT: XrHandJointEXT = 14;
pub const XrHandJointEXT_XR_HAND_JOINT_MIDDLE_TIP_EXT: XrHandJointEXT = 15;
pub const XrHandJointEXT_XR_HAND_JOINT_RING_METACARPAL_EXT: XrHandJointEXT = 16;
pub const XrHandJointEXT_XR_HAND_JOINT_RING_PROXIMAL_EXT: XrHandJointEXT = 17;
pub const XrHandJointEXT_XR_HAND_JOINT_RING_INTERMEDIATE_EXT: XrHandJointEXT = 18;
pub const XrHandJointEXT_XR_HAND_JOINT_RING_DISTAL_EXT: XrHandJointEXT = 19;
pub const XrHandJointEXT_XR_HAND_JOINT_RING_TIP_EXT: XrHandJointEXT = 20;
pub const XrHandJointEXT_XR_HAND_JOINT_LITTLE_METACARPAL_EXT: XrHandJointEXT = 21;
pub const XrHandJointEXT_XR_HAND_JOINT_LITTLE_PROXIMAL_EXT: XrHandJointEXT = 22;
pub const XrHandJointEXT_XR_HAND_JOINT_LITTLE_INTERMEDIATE_EXT: XrHandJointEXT = 23;
pub const XrHandJointEXT_XR_HAND_JOINT_LITTLE_DISTAL_EXT: XrHandJointEXT = 24;
pub const XrHandJointEXT_XR_HAND_JOINT_LITTLE_TIP_EXT: XrHandJointEXT = 25;
pub const XrHandJointEXT_XR_HAND_JOINT_MAX_ENUM_EXT: XrHandJointEXT = 2147483647;
pub type XrHandJointEXT = ::std::os::raw::c_uint;
pub const XrHandJointSetEXT_XR_HAND_JOINT_SET_DEFAULT_EXT: XrHandJointSetEXT = 0;
pub const XrHandJointSetEXT_XR_HAND_JOINT_SET_HAND_WITH_FOREARM_ULTRALEAP: XrHandJointSetEXT =
    1000149000;
pub const XrHandJointSetEXT_XR_HAND_JOINT_SET_MAX_ENUM_EXT: XrHandJointSetEXT = 2147483647;
pub type XrHandJointSetEXT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemHandTrackingPropertiesEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsHandTracking: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemHandTrackingPropertiesEXT"]
        [::std::mem::size_of::<XrSystemHandTrackingPropertiesEXT>() - 24usize];
    ["Alignment of XrSystemHandTrackingPropertiesEXT"]
        [::std::mem::align_of::<XrSystemHandTrackingPropertiesEXT>() - 8usize];
    ["Offset of field: XrSystemHandTrackingPropertiesEXT::type_"]
        [::std::mem::offset_of!(XrSystemHandTrackingPropertiesEXT, type_) - 0usize];
    ["Offset of field: XrSystemHandTrackingPropertiesEXT::next"]
        [::std::mem::offset_of!(XrSystemHandTrackingPropertiesEXT, next) - 8usize];
    ["Offset of field: XrSystemHandTrackingPropertiesEXT::supportsHandTracking"]
        [::std::mem::offset_of!(XrSystemHandTrackingPropertiesEXT, supportsHandTracking) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandTrackerCreateInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub hand: XrHandEXT,
    pub handJointSet: XrHandJointSetEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHandTrackerCreateInfoEXT"]
        [::std::mem::size_of::<XrHandTrackerCreateInfoEXT>() - 24usize];
    ["Alignment of XrHandTrackerCreateInfoEXT"]
        [::std::mem::align_of::<XrHandTrackerCreateInfoEXT>() - 8usize];
    ["Offset of field: XrHandTrackerCreateInfoEXT::type_"]
        [::std::mem::offset_of!(XrHandTrackerCreateInfoEXT, type_) - 0usize];
    ["Offset of field: XrHandTrackerCreateInfoEXT::next"]
        [::std::mem::offset_of!(XrHandTrackerCreateInfoEXT, next) - 8usize];
    ["Offset of field: XrHandTrackerCreateInfoEXT::hand"]
        [::std::mem::offset_of!(XrHandTrackerCreateInfoEXT, hand) - 16usize];
    ["Offset of field: XrHandTrackerCreateInfoEXT::handJointSet"]
        [::std::mem::offset_of!(XrHandTrackerCreateInfoEXT, handJointSet) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandJointsLocateInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub baseSpace: XrSpace,
    pub time: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHandJointsLocateInfoEXT"]
        [::std::mem::size_of::<XrHandJointsLocateInfoEXT>() - 32usize];
    ["Alignment of XrHandJointsLocateInfoEXT"]
        [::std::mem::align_of::<XrHandJointsLocateInfoEXT>() - 8usize];
    ["Offset of field: XrHandJointsLocateInfoEXT::type_"]
        [::std::mem::offset_of!(XrHandJointsLocateInfoEXT, type_) - 0usize];
    ["Offset of field: XrHandJointsLocateInfoEXT::next"]
        [::std::mem::offset_of!(XrHandJointsLocateInfoEXT, next) - 8usize];
    ["Offset of field: XrHandJointsLocateInfoEXT::baseSpace"]
        [::std::mem::offset_of!(XrHandJointsLocateInfoEXT, baseSpace) - 16usize];
    ["Offset of field: XrHandJointsLocateInfoEXT::time"]
        [::std::mem::offset_of!(XrHandJointsLocateInfoEXT, time) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandJointLocationEXT {
    pub locationFlags: XrSpaceLocationFlags,
    pub pose: XrPosef,
    pub radius: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHandJointLocationEXT"][::std::mem::size_of::<XrHandJointLocationEXT>() - 40usize];
    ["Alignment of XrHandJointLocationEXT"]
        [::std::mem::align_of::<XrHandJointLocationEXT>() - 8usize];
    ["Offset of field: XrHandJointLocationEXT::locationFlags"]
        [::std::mem::offset_of!(XrHandJointLocationEXT, locationFlags) - 0usize];
    ["Offset of field: XrHandJointLocationEXT::pose"]
        [::std::mem::offset_of!(XrHandJointLocationEXT, pose) - 8usize];
    ["Offset of field: XrHandJointLocationEXT::radius"]
        [::std::mem::offset_of!(XrHandJointLocationEXT, radius) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandJointVelocityEXT {
    pub velocityFlags: XrSpaceVelocityFlags,
    pub linearVelocity: XrVector3f,
    pub angularVelocity: XrVector3f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHandJointVelocityEXT"][::std::mem::size_of::<XrHandJointVelocityEXT>() - 32usize];
    ["Alignment of XrHandJointVelocityEXT"]
        [::std::mem::align_of::<XrHandJointVelocityEXT>() - 8usize];
    ["Offset of field: XrHandJointVelocityEXT::velocityFlags"]
        [::std::mem::offset_of!(XrHandJointVelocityEXT, velocityFlags) - 0usize];
    ["Offset of field: XrHandJointVelocityEXT::linearVelocity"]
        [::std::mem::offset_of!(XrHandJointVelocityEXT, linearVelocity) - 8usize];
    ["Offset of field: XrHandJointVelocityEXT::angularVelocity"]
        [::std::mem::offset_of!(XrHandJointVelocityEXT, angularVelocity) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandJointLocationsEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub isActive: XrBool32,
    pub jointCount: u32,
    pub jointLocations: *mut XrHandJointLocationEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHandJointLocationsEXT"][::std::mem::size_of::<XrHandJointLocationsEXT>() - 32usize];
    ["Alignment of XrHandJointLocationsEXT"]
        [::std::mem::align_of::<XrHandJointLocationsEXT>() - 8usize];
    ["Offset of field: XrHandJointLocationsEXT::type_"]
        [::std::mem::offset_of!(XrHandJointLocationsEXT, type_) - 0usize];
    ["Offset of field: XrHandJointLocationsEXT::next"]
        [::std::mem::offset_of!(XrHandJointLocationsEXT, next) - 8usize];
    ["Offset of field: XrHandJointLocationsEXT::isActive"]
        [::std::mem::offset_of!(XrHandJointLocationsEXT, isActive) - 16usize];
    ["Offset of field: XrHandJointLocationsEXT::jointCount"]
        [::std::mem::offset_of!(XrHandJointLocationsEXT, jointCount) - 20usize];
    ["Offset of field: XrHandJointLocationsEXT::jointLocations"]
        [::std::mem::offset_of!(XrHandJointLocationsEXT, jointLocations) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandJointVelocitiesEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub jointCount: u32,
    pub jointVelocities: *mut XrHandJointVelocityEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHandJointVelocitiesEXT"]
        [::std::mem::size_of::<XrHandJointVelocitiesEXT>() - 32usize];
    ["Alignment of XrHandJointVelocitiesEXT"]
        [::std::mem::align_of::<XrHandJointVelocitiesEXT>() - 8usize];
    ["Offset of field: XrHandJointVelocitiesEXT::type_"]
        [::std::mem::offset_of!(XrHandJointVelocitiesEXT, type_) - 0usize];
    ["Offset of field: XrHandJointVelocitiesEXT::next"]
        [::std::mem::offset_of!(XrHandJointVelocitiesEXT, next) - 8usize];
    ["Offset of field: XrHandJointVelocitiesEXT::jointCount"]
        [::std::mem::offset_of!(XrHandJointVelocitiesEXT, jointCount) - 16usize];
    ["Offset of field: XrHandJointVelocitiesEXT::jointVelocities"]
        [::std::mem::offset_of!(XrHandJointVelocitiesEXT, jointVelocities) - 24usize];
};
pub const XrHandPoseTypeMSFT_XR_HAND_POSE_TYPE_TRACKED_MSFT: XrHandPoseTypeMSFT = 0;
pub const XrHandPoseTypeMSFT_XR_HAND_POSE_TYPE_REFERENCE_OPEN_PALM_MSFT: XrHandPoseTypeMSFT = 1;
pub const XrHandPoseTypeMSFT_XR_HAND_POSE_TYPE_MAX_ENUM_MSFT: XrHandPoseTypeMSFT = 2147483647;
pub type XrHandPoseTypeMSFT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemHandTrackingMeshPropertiesMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsHandTrackingMesh: XrBool32,
    pub maxHandMeshIndexCount: u32,
    pub maxHandMeshVertexCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemHandTrackingMeshPropertiesMSFT"]
        [::std::mem::size_of::<XrSystemHandTrackingMeshPropertiesMSFT>() - 32usize];
    ["Alignment of XrSystemHandTrackingMeshPropertiesMSFT"]
        [::std::mem::align_of::<XrSystemHandTrackingMeshPropertiesMSFT>() - 8usize];
    ["Offset of field: XrSystemHandTrackingMeshPropertiesMSFT::type_"]
        [::std::mem::offset_of!(XrSystemHandTrackingMeshPropertiesMSFT, type_) - 0usize];
    ["Offset of field: XrSystemHandTrackingMeshPropertiesMSFT::next"]
        [::std::mem::offset_of!(XrSystemHandTrackingMeshPropertiesMSFT, next) - 8usize];
    ["Offset of field: XrSystemHandTrackingMeshPropertiesMSFT::supportsHandTrackingMesh"][::std::mem::offset_of!(
        XrSystemHandTrackingMeshPropertiesMSFT,
        supportsHandTrackingMesh
    )
        - 16usize];
    ["Offset of field: XrSystemHandTrackingMeshPropertiesMSFT::maxHandMeshIndexCount"][::std::mem::offset_of!(
        XrSystemHandTrackingMeshPropertiesMSFT,
        maxHandMeshIndexCount
    ) - 20usize];
    ["Offset of field: XrSystemHandTrackingMeshPropertiesMSFT::maxHandMeshVertexCount"][::std::mem::offset_of!(
        XrSystemHandTrackingMeshPropertiesMSFT,
        maxHandMeshVertexCount
    )
        - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandMeshSpaceCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub handPoseType: XrHandPoseTypeMSFT,
    pub poseInHandMeshSpace: XrPosef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHandMeshSpaceCreateInfoMSFT"]
        [::std::mem::size_of::<XrHandMeshSpaceCreateInfoMSFT>() - 48usize];
    ["Alignment of XrHandMeshSpaceCreateInfoMSFT"]
        [::std::mem::align_of::<XrHandMeshSpaceCreateInfoMSFT>() - 8usize];
    ["Offset of field: XrHandMeshSpaceCreateInfoMSFT::type_"]
        [::std::mem::offset_of!(XrHandMeshSpaceCreateInfoMSFT, type_) - 0usize];
    ["Offset of field: XrHandMeshSpaceCreateInfoMSFT::next"]
        [::std::mem::offset_of!(XrHandMeshSpaceCreateInfoMSFT, next) - 8usize];
    ["Offset of field: XrHandMeshSpaceCreateInfoMSFT::handPoseType"]
        [::std::mem::offset_of!(XrHandMeshSpaceCreateInfoMSFT, handPoseType) - 16usize];
    ["Offset of field: XrHandMeshSpaceCreateInfoMSFT::poseInHandMeshSpace"]
        [::std::mem::offset_of!(XrHandMeshSpaceCreateInfoMSFT, poseInHandMeshSpace) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandMeshUpdateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub time: XrTime,
    pub handPoseType: XrHandPoseTypeMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHandMeshUpdateInfoMSFT"]
        [::std::mem::size_of::<XrHandMeshUpdateInfoMSFT>() - 32usize];
    ["Alignment of XrHandMeshUpdateInfoMSFT"]
        [::std::mem::align_of::<XrHandMeshUpdateInfoMSFT>() - 8usize];
    ["Offset of field: XrHandMeshUpdateInfoMSFT::type_"]
        [::std::mem::offset_of!(XrHandMeshUpdateInfoMSFT, type_) - 0usize];
    ["Offset of field: XrHandMeshUpdateInfoMSFT::next"]
        [::std::mem::offset_of!(XrHandMeshUpdateInfoMSFT, next) - 8usize];
    ["Offset of field: XrHandMeshUpdateInfoMSFT::time"]
        [::std::mem::offset_of!(XrHandMeshUpdateInfoMSFT, time) - 16usize];
    ["Offset of field: XrHandMeshUpdateInfoMSFT::handPoseType"]
        [::std::mem::offset_of!(XrHandMeshUpdateInfoMSFT, handPoseType) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandMeshIndexBufferMSFT {
    pub indexBufferKey: u32,
    pub indexCapacityInput: u32,
    pub indexCountOutput: u32,
    pub indices: *mut u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHandMeshIndexBufferMSFT"]
        [::std::mem::size_of::<XrHandMeshIndexBufferMSFT>() - 24usize];
    ["Alignment of XrHandMeshIndexBufferMSFT"]
        [::std::mem::align_of::<XrHandMeshIndexBufferMSFT>() - 8usize];
    ["Offset of field: XrHandMeshIndexBufferMSFT::indexBufferKey"]
        [::std::mem::offset_of!(XrHandMeshIndexBufferMSFT, indexBufferKey) - 0usize];
    ["Offset of field: XrHandMeshIndexBufferMSFT::indexCapacityInput"]
        [::std::mem::offset_of!(XrHandMeshIndexBufferMSFT, indexCapacityInput) - 4usize];
    ["Offset of field: XrHandMeshIndexBufferMSFT::indexCountOutput"]
        [::std::mem::offset_of!(XrHandMeshIndexBufferMSFT, indexCountOutput) - 8usize];
    ["Offset of field: XrHandMeshIndexBufferMSFT::indices"]
        [::std::mem::offset_of!(XrHandMeshIndexBufferMSFT, indices) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandMeshVertexMSFT {
    pub position: XrVector3f,
    pub normal: XrVector3f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHandMeshVertexMSFT"][::std::mem::size_of::<XrHandMeshVertexMSFT>() - 24usize];
    ["Alignment of XrHandMeshVertexMSFT"][::std::mem::align_of::<XrHandMeshVertexMSFT>() - 4usize];
    ["Offset of field: XrHandMeshVertexMSFT::position"]
        [::std::mem::offset_of!(XrHandMeshVertexMSFT, position) - 0usize];
    ["Offset of field: XrHandMeshVertexMSFT::normal"]
        [::std::mem::offset_of!(XrHandMeshVertexMSFT, normal) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandMeshVertexBufferMSFT {
    pub vertexUpdateTime: XrTime,
    pub vertexCapacityInput: u32,
    pub vertexCountOutput: u32,
    pub vertices: *mut XrHandMeshVertexMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHandMeshVertexBufferMSFT"]
        [::std::mem::size_of::<XrHandMeshVertexBufferMSFT>() - 24usize];
    ["Alignment of XrHandMeshVertexBufferMSFT"]
        [::std::mem::align_of::<XrHandMeshVertexBufferMSFT>() - 8usize];
    ["Offset of field: XrHandMeshVertexBufferMSFT::vertexUpdateTime"]
        [::std::mem::offset_of!(XrHandMeshVertexBufferMSFT, vertexUpdateTime) - 0usize];
    ["Offset of field: XrHandMeshVertexBufferMSFT::vertexCapacityInput"]
        [::std::mem::offset_of!(XrHandMeshVertexBufferMSFT, vertexCapacityInput) - 8usize];
    ["Offset of field: XrHandMeshVertexBufferMSFT::vertexCountOutput"]
        [::std::mem::offset_of!(XrHandMeshVertexBufferMSFT, vertexCountOutput) - 12usize];
    ["Offset of field: XrHandMeshVertexBufferMSFT::vertices"]
        [::std::mem::offset_of!(XrHandMeshVertexBufferMSFT, vertices) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandMeshMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub isActive: XrBool32,
    pub indexBufferChanged: XrBool32,
    pub vertexBufferChanged: XrBool32,
    pub indexBuffer: XrHandMeshIndexBufferMSFT,
    pub vertexBuffer: XrHandMeshVertexBufferMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHandMeshMSFT"][::std::mem::size_of::<XrHandMeshMSFT>() - 80usize];
    ["Alignment of XrHandMeshMSFT"][::std::mem::align_of::<XrHandMeshMSFT>() - 8usize];
    ["Offset of field: XrHandMeshMSFT::type_"]
        [::std::mem::offset_of!(XrHandMeshMSFT, type_) - 0usize];
    ["Offset of field: XrHandMeshMSFT::next"]
        [::std::mem::offset_of!(XrHandMeshMSFT, next) - 8usize];
    ["Offset of field: XrHandMeshMSFT::isActive"]
        [::std::mem::offset_of!(XrHandMeshMSFT, isActive) - 16usize];
    ["Offset of field: XrHandMeshMSFT::indexBufferChanged"]
        [::std::mem::offset_of!(XrHandMeshMSFT, indexBufferChanged) - 20usize];
    ["Offset of field: XrHandMeshMSFT::vertexBufferChanged"]
        [::std::mem::offset_of!(XrHandMeshMSFT, vertexBufferChanged) - 24usize];
    ["Offset of field: XrHandMeshMSFT::indexBuffer"]
        [::std::mem::offset_of!(XrHandMeshMSFT, indexBuffer) - 32usize];
    ["Offset of field: XrHandMeshMSFT::vertexBuffer"]
        [::std::mem::offset_of!(XrHandMeshMSFT, vertexBuffer) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandPoseTypeInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub handPoseType: XrHandPoseTypeMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHandPoseTypeInfoMSFT"][::std::mem::size_of::<XrHandPoseTypeInfoMSFT>() - 24usize];
    ["Alignment of XrHandPoseTypeInfoMSFT"]
        [::std::mem::align_of::<XrHandPoseTypeInfoMSFT>() - 8usize];
    ["Offset of field: XrHandPoseTypeInfoMSFT::type_"]
        [::std::mem::offset_of!(XrHandPoseTypeInfoMSFT, type_) - 0usize];
    ["Offset of field: XrHandPoseTypeInfoMSFT::next"]
        [::std::mem::offset_of!(XrHandPoseTypeInfoMSFT, next) - 8usize];
    ["Offset of field: XrHandPoseTypeInfoMSFT::handPoseType"]
        [::std::mem::offset_of!(XrHandPoseTypeInfoMSFT, handPoseType) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSecondaryViewConfigurationSessionBeginInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub viewConfigurationCount: u32,
    pub enabledViewConfigurationTypes: *const XrViewConfigurationType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSecondaryViewConfigurationSessionBeginInfoMSFT"]
        [::std::mem::size_of::<XrSecondaryViewConfigurationSessionBeginInfoMSFT>() - 32usize];
    ["Alignment of XrSecondaryViewConfigurationSessionBeginInfoMSFT"]
        [::std::mem::align_of::<XrSecondaryViewConfigurationSessionBeginInfoMSFT>() - 8usize];
    ["Offset of field: XrSecondaryViewConfigurationSessionBeginInfoMSFT::type_"]
        [::std::mem::offset_of!(XrSecondaryViewConfigurationSessionBeginInfoMSFT, type_) - 0usize];
    ["Offset of field: XrSecondaryViewConfigurationSessionBeginInfoMSFT::next"]
        [::std::mem::offset_of!(XrSecondaryViewConfigurationSessionBeginInfoMSFT, next) - 8usize];
    ["Offset of field: XrSecondaryViewConfigurationSessionBeginInfoMSFT::viewConfigurationCount"][::std::mem::offset_of!(
        XrSecondaryViewConfigurationSessionBeginInfoMSFT,
        viewConfigurationCount
    )
        - 16usize];
    ["Offset of field: XrSecondaryViewConfigurationSessionBeginInfoMSFT::enabledViewConfigurationTypes"] [:: std :: mem :: offset_of ! (XrSecondaryViewConfigurationSessionBeginInfoMSFT , enabledViewConfigurationTypes) - 24usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSecondaryViewConfigurationStateMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub viewConfigurationType: XrViewConfigurationType,
    pub active: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSecondaryViewConfigurationStateMSFT"]
        [::std::mem::size_of::<XrSecondaryViewConfigurationStateMSFT>() - 24usize];
    ["Alignment of XrSecondaryViewConfigurationStateMSFT"]
        [::std::mem::align_of::<XrSecondaryViewConfigurationStateMSFT>() - 8usize];
    ["Offset of field: XrSecondaryViewConfigurationStateMSFT::type_"]
        [::std::mem::offset_of!(XrSecondaryViewConfigurationStateMSFT, type_) - 0usize];
    ["Offset of field: XrSecondaryViewConfigurationStateMSFT::next"]
        [::std::mem::offset_of!(XrSecondaryViewConfigurationStateMSFT, next) - 8usize];
    ["Offset of field: XrSecondaryViewConfigurationStateMSFT::viewConfigurationType"][::std::mem::offset_of!(
        XrSecondaryViewConfigurationStateMSFT,
        viewConfigurationType
    ) - 16usize];
    ["Offset of field: XrSecondaryViewConfigurationStateMSFT::active"]
        [::std::mem::offset_of!(XrSecondaryViewConfigurationStateMSFT, active) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSecondaryViewConfigurationFrameStateMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub viewConfigurationCount: u32,
    pub viewConfigurationStates: *mut XrSecondaryViewConfigurationStateMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSecondaryViewConfigurationFrameStateMSFT"]
        [::std::mem::size_of::<XrSecondaryViewConfigurationFrameStateMSFT>() - 32usize];
    ["Alignment of XrSecondaryViewConfigurationFrameStateMSFT"]
        [::std::mem::align_of::<XrSecondaryViewConfigurationFrameStateMSFT>() - 8usize];
    ["Offset of field: XrSecondaryViewConfigurationFrameStateMSFT::type_"]
        [::std::mem::offset_of!(XrSecondaryViewConfigurationFrameStateMSFT, type_) - 0usize];
    ["Offset of field: XrSecondaryViewConfigurationFrameStateMSFT::next"]
        [::std::mem::offset_of!(XrSecondaryViewConfigurationFrameStateMSFT, next) - 8usize];
    ["Offset of field: XrSecondaryViewConfigurationFrameStateMSFT::viewConfigurationCount"][::std::mem::offset_of!(
        XrSecondaryViewConfigurationFrameStateMSFT,
        viewConfigurationCount
    )
        - 16usize];
    ["Offset of field: XrSecondaryViewConfigurationFrameStateMSFT::viewConfigurationStates"][::std::mem::offset_of!(
        XrSecondaryViewConfigurationFrameStateMSFT,
        viewConfigurationStates
    )
        - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSecondaryViewConfigurationLayerInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub viewConfigurationType: XrViewConfigurationType,
    pub environmentBlendMode: XrEnvironmentBlendMode,
    pub layerCount: u32,
    pub layers: *const *const XrCompositionLayerBaseHeader,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSecondaryViewConfigurationLayerInfoMSFT"]
        [::std::mem::size_of::<XrSecondaryViewConfigurationLayerInfoMSFT>() - 40usize];
    ["Alignment of XrSecondaryViewConfigurationLayerInfoMSFT"]
        [::std::mem::align_of::<XrSecondaryViewConfigurationLayerInfoMSFT>() - 8usize];
    ["Offset of field: XrSecondaryViewConfigurationLayerInfoMSFT::type_"]
        [::std::mem::offset_of!(XrSecondaryViewConfigurationLayerInfoMSFT, type_) - 0usize];
    ["Offset of field: XrSecondaryViewConfigurationLayerInfoMSFT::next"]
        [::std::mem::offset_of!(XrSecondaryViewConfigurationLayerInfoMSFT, next) - 8usize];
    ["Offset of field: XrSecondaryViewConfigurationLayerInfoMSFT::viewConfigurationType"][::std::mem::offset_of!(
        XrSecondaryViewConfigurationLayerInfoMSFT,
        viewConfigurationType
    )
        - 16usize];
    ["Offset of field: XrSecondaryViewConfigurationLayerInfoMSFT::environmentBlendMode"][::std::mem::offset_of!(
        XrSecondaryViewConfigurationLayerInfoMSFT,
        environmentBlendMode
    )
        - 20usize];
    ["Offset of field: XrSecondaryViewConfigurationLayerInfoMSFT::layerCount"]
        [::std::mem::offset_of!(XrSecondaryViewConfigurationLayerInfoMSFT, layerCount) - 24usize];
    ["Offset of field: XrSecondaryViewConfigurationLayerInfoMSFT::layers"]
        [::std::mem::offset_of!(XrSecondaryViewConfigurationLayerInfoMSFT, layers) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSecondaryViewConfigurationFrameEndInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub viewConfigurationCount: u32,
    pub viewConfigurationLayersInfo: *const XrSecondaryViewConfigurationLayerInfoMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSecondaryViewConfigurationFrameEndInfoMSFT"]
        [::std::mem::size_of::<XrSecondaryViewConfigurationFrameEndInfoMSFT>() - 32usize];
    ["Alignment of XrSecondaryViewConfigurationFrameEndInfoMSFT"]
        [::std::mem::align_of::<XrSecondaryViewConfigurationFrameEndInfoMSFT>() - 8usize];
    ["Offset of field: XrSecondaryViewConfigurationFrameEndInfoMSFT::type_"]
        [::std::mem::offset_of!(XrSecondaryViewConfigurationFrameEndInfoMSFT, type_) - 0usize];
    ["Offset of field: XrSecondaryViewConfigurationFrameEndInfoMSFT::next"]
        [::std::mem::offset_of!(XrSecondaryViewConfigurationFrameEndInfoMSFT, next) - 8usize];
    ["Offset of field: XrSecondaryViewConfigurationFrameEndInfoMSFT::viewConfigurationCount"][::std::mem::offset_of!(
        XrSecondaryViewConfigurationFrameEndInfoMSFT,
        viewConfigurationCount
    )
        - 16usize];
    ["Offset of field: XrSecondaryViewConfigurationFrameEndInfoMSFT::viewConfigurationLayersInfo"] [:: std :: mem :: offset_of ! (XrSecondaryViewConfigurationFrameEndInfoMSFT , viewConfigurationLayersInfo) - 24usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSecondaryViewConfigurationSwapchainCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub viewConfigurationType: XrViewConfigurationType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSecondaryViewConfigurationSwapchainCreateInfoMSFT"]
        [::std::mem::size_of::<XrSecondaryViewConfigurationSwapchainCreateInfoMSFT>() - 24usize];
    ["Alignment of XrSecondaryViewConfigurationSwapchainCreateInfoMSFT"]
        [::std::mem::align_of::<XrSecondaryViewConfigurationSwapchainCreateInfoMSFT>() - 8usize];
    ["Offset of field: XrSecondaryViewConfigurationSwapchainCreateInfoMSFT::type_"][::std::mem::offset_of!(
        XrSecondaryViewConfigurationSwapchainCreateInfoMSFT,
        type_
    ) - 0usize];
    ["Offset of field: XrSecondaryViewConfigurationSwapchainCreateInfoMSFT::next"][::std::mem::offset_of!(
        XrSecondaryViewConfigurationSwapchainCreateInfoMSFT,
        next
    ) - 8usize];
    ["Offset of field: XrSecondaryViewConfigurationSwapchainCreateInfoMSFT::viewConfigurationType"] [:: std :: mem :: offset_of ! (XrSecondaryViewConfigurationSwapchainCreateInfoMSFT , viewConfigurationType) - 16usize] ;
};
pub type XrControllerModelKeyMSFT = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrControllerModelKeyStateMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub modelKey: XrControllerModelKeyMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrControllerModelKeyStateMSFT"]
        [::std::mem::size_of::<XrControllerModelKeyStateMSFT>() - 24usize];
    ["Alignment of XrControllerModelKeyStateMSFT"]
        [::std::mem::align_of::<XrControllerModelKeyStateMSFT>() - 8usize];
    ["Offset of field: XrControllerModelKeyStateMSFT::type_"]
        [::std::mem::offset_of!(XrControllerModelKeyStateMSFT, type_) - 0usize];
    ["Offset of field: XrControllerModelKeyStateMSFT::next"]
        [::std::mem::offset_of!(XrControllerModelKeyStateMSFT, next) - 8usize];
    ["Offset of field: XrControllerModelKeyStateMSFT::modelKey"]
        [::std::mem::offset_of!(XrControllerModelKeyStateMSFT, modelKey) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrControllerModelNodePropertiesMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub parentNodeName: [::std::os::raw::c_char; 64usize],
    pub nodeName: [::std::os::raw::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrControllerModelNodePropertiesMSFT"]
        [::std::mem::size_of::<XrControllerModelNodePropertiesMSFT>() - 144usize];
    ["Alignment of XrControllerModelNodePropertiesMSFT"]
        [::std::mem::align_of::<XrControllerModelNodePropertiesMSFT>() - 8usize];
    ["Offset of field: XrControllerModelNodePropertiesMSFT::type_"]
        [::std::mem::offset_of!(XrControllerModelNodePropertiesMSFT, type_) - 0usize];
    ["Offset of field: XrControllerModelNodePropertiesMSFT::next"]
        [::std::mem::offset_of!(XrControllerModelNodePropertiesMSFT, next) - 8usize];
    ["Offset of field: XrControllerModelNodePropertiesMSFT::parentNodeName"]
        [::std::mem::offset_of!(XrControllerModelNodePropertiesMSFT, parentNodeName) - 16usize];
    ["Offset of field: XrControllerModelNodePropertiesMSFT::nodeName"]
        [::std::mem::offset_of!(XrControllerModelNodePropertiesMSFT, nodeName) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrControllerModelPropertiesMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub nodeCapacityInput: u32,
    pub nodeCountOutput: u32,
    pub nodeProperties: *mut XrControllerModelNodePropertiesMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrControllerModelPropertiesMSFT"]
        [::std::mem::size_of::<XrControllerModelPropertiesMSFT>() - 32usize];
    ["Alignment of XrControllerModelPropertiesMSFT"]
        [::std::mem::align_of::<XrControllerModelPropertiesMSFT>() - 8usize];
    ["Offset of field: XrControllerModelPropertiesMSFT::type_"]
        [::std::mem::offset_of!(XrControllerModelPropertiesMSFT, type_) - 0usize];
    ["Offset of field: XrControllerModelPropertiesMSFT::next"]
        [::std::mem::offset_of!(XrControllerModelPropertiesMSFT, next) - 8usize];
    ["Offset of field: XrControllerModelPropertiesMSFT::nodeCapacityInput"]
        [::std::mem::offset_of!(XrControllerModelPropertiesMSFT, nodeCapacityInput) - 16usize];
    ["Offset of field: XrControllerModelPropertiesMSFT::nodeCountOutput"]
        [::std::mem::offset_of!(XrControllerModelPropertiesMSFT, nodeCountOutput) - 20usize];
    ["Offset of field: XrControllerModelPropertiesMSFT::nodeProperties"]
        [::std::mem::offset_of!(XrControllerModelPropertiesMSFT, nodeProperties) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrControllerModelNodeStateMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub nodePose: XrPosef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrControllerModelNodeStateMSFT"]
        [::std::mem::size_of::<XrControllerModelNodeStateMSFT>() - 48usize];
    ["Alignment of XrControllerModelNodeStateMSFT"]
        [::std::mem::align_of::<XrControllerModelNodeStateMSFT>() - 8usize];
    ["Offset of field: XrControllerModelNodeStateMSFT::type_"]
        [::std::mem::offset_of!(XrControllerModelNodeStateMSFT, type_) - 0usize];
    ["Offset of field: XrControllerModelNodeStateMSFT::next"]
        [::std::mem::offset_of!(XrControllerModelNodeStateMSFT, next) - 8usize];
    ["Offset of field: XrControllerModelNodeStateMSFT::nodePose"]
        [::std::mem::offset_of!(XrControllerModelNodeStateMSFT, nodePose) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrControllerModelStateMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub nodeCapacityInput: u32,
    pub nodeCountOutput: u32,
    pub nodeStates: *mut XrControllerModelNodeStateMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrControllerModelStateMSFT"]
        [::std::mem::size_of::<XrControllerModelStateMSFT>() - 32usize];
    ["Alignment of XrControllerModelStateMSFT"]
        [::std::mem::align_of::<XrControllerModelStateMSFT>() - 8usize];
    ["Offset of field: XrControllerModelStateMSFT::type_"]
        [::std::mem::offset_of!(XrControllerModelStateMSFT, type_) - 0usize];
    ["Offset of field: XrControllerModelStateMSFT::next"]
        [::std::mem::offset_of!(XrControllerModelStateMSFT, next) - 8usize];
    ["Offset of field: XrControllerModelStateMSFT::nodeCapacityInput"]
        [::std::mem::offset_of!(XrControllerModelStateMSFT, nodeCapacityInput) - 16usize];
    ["Offset of field: XrControllerModelStateMSFT::nodeCountOutput"]
        [::std::mem::offset_of!(XrControllerModelStateMSFT, nodeCountOutput) - 20usize];
    ["Offset of field: XrControllerModelStateMSFT::nodeStates"]
        [::std::mem::offset_of!(XrControllerModelStateMSFT, nodeStates) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViewConfigurationViewFovEPIC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub recommendedFov: XrFovf,
    pub maxMutableFov: XrFovf,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrViewConfigurationViewFovEPIC"]
        [::std::mem::size_of::<XrViewConfigurationViewFovEPIC>() - 48usize];
    ["Alignment of XrViewConfigurationViewFovEPIC"]
        [::std::mem::align_of::<XrViewConfigurationViewFovEPIC>() - 8usize];
    ["Offset of field: XrViewConfigurationViewFovEPIC::type_"]
        [::std::mem::offset_of!(XrViewConfigurationViewFovEPIC, type_) - 0usize];
    ["Offset of field: XrViewConfigurationViewFovEPIC::next"]
        [::std::mem::offset_of!(XrViewConfigurationViewFovEPIC, next) - 8usize];
    ["Offset of field: XrViewConfigurationViewFovEPIC::recommendedFov"]
        [::std::mem::offset_of!(XrViewConfigurationViewFovEPIC, recommendedFov) - 16usize];
    ["Offset of field: XrViewConfigurationViewFovEPIC::maxMutableFov"]
        [::std::mem::offset_of!(XrViewConfigurationViewFovEPIC, maxMutableFov) - 32usize];
};
pub const XrReprojectionModeMSFT_XR_REPROJECTION_MODE_DEPTH_MSFT: XrReprojectionModeMSFT = 1;
pub const XrReprojectionModeMSFT_XR_REPROJECTION_MODE_PLANAR_FROM_DEPTH_MSFT:
    XrReprojectionModeMSFT = 2;
pub const XrReprojectionModeMSFT_XR_REPROJECTION_MODE_PLANAR_MANUAL_MSFT: XrReprojectionModeMSFT =
    3;
pub const XrReprojectionModeMSFT_XR_REPROJECTION_MODE_ORIENTATION_ONLY_MSFT:
    XrReprojectionModeMSFT = 4;
pub const XrReprojectionModeMSFT_XR_REPROJECTION_MODE_MAX_ENUM_MSFT: XrReprojectionModeMSFT =
    2147483647;
pub type XrReprojectionModeMSFT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerReprojectionInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub reprojectionMode: XrReprojectionModeMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCompositionLayerReprojectionInfoMSFT"]
        [::std::mem::size_of::<XrCompositionLayerReprojectionInfoMSFT>() - 24usize];
    ["Alignment of XrCompositionLayerReprojectionInfoMSFT"]
        [::std::mem::align_of::<XrCompositionLayerReprojectionInfoMSFT>() - 8usize];
    ["Offset of field: XrCompositionLayerReprojectionInfoMSFT::type_"]
        [::std::mem::offset_of!(XrCompositionLayerReprojectionInfoMSFT, type_) - 0usize];
    ["Offset of field: XrCompositionLayerReprojectionInfoMSFT::next"]
        [::std::mem::offset_of!(XrCompositionLayerReprojectionInfoMSFT, next) - 8usize];
    ["Offset of field: XrCompositionLayerReprojectionInfoMSFT::reprojectionMode"][::std::mem::offset_of!(
        XrCompositionLayerReprojectionInfoMSFT,
        reprojectionMode
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerReprojectionPlaneOverrideMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub position: XrVector3f,
    pub normal: XrVector3f,
    pub velocity: XrVector3f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCompositionLayerReprojectionPlaneOverrideMSFT"]
        [::std::mem::size_of::<XrCompositionLayerReprojectionPlaneOverrideMSFT>() - 56usize];
    ["Alignment of XrCompositionLayerReprojectionPlaneOverrideMSFT"]
        [::std::mem::align_of::<XrCompositionLayerReprojectionPlaneOverrideMSFT>() - 8usize];
    ["Offset of field: XrCompositionLayerReprojectionPlaneOverrideMSFT::type_"]
        [::std::mem::offset_of!(XrCompositionLayerReprojectionPlaneOverrideMSFT, type_) - 0usize];
    ["Offset of field: XrCompositionLayerReprojectionPlaneOverrideMSFT::next"]
        [::std::mem::offset_of!(XrCompositionLayerReprojectionPlaneOverrideMSFT, next) - 8usize];
    ["Offset of field: XrCompositionLayerReprojectionPlaneOverrideMSFT::position"][::std::mem::offset_of!(
        XrCompositionLayerReprojectionPlaneOverrideMSFT,
        position
    ) - 16usize];
    ["Offset of field: XrCompositionLayerReprojectionPlaneOverrideMSFT::normal"]
        [::std::mem::offset_of!(XrCompositionLayerReprojectionPlaneOverrideMSFT, normal) - 28usize];
    ["Offset of field: XrCompositionLayerReprojectionPlaneOverrideMSFT::velocity"][::std::mem::offset_of!(
        XrCompositionLayerReprojectionPlaneOverrideMSFT,
        velocity
    ) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainStateBaseHeaderFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSwapchainStateBaseHeaderFB"]
        [::std::mem::size_of::<XrSwapchainStateBaseHeaderFB>() - 16usize];
    ["Alignment of XrSwapchainStateBaseHeaderFB"]
        [::std::mem::align_of::<XrSwapchainStateBaseHeaderFB>() - 8usize];
    ["Offset of field: XrSwapchainStateBaseHeaderFB::type_"]
        [::std::mem::offset_of!(XrSwapchainStateBaseHeaderFB, type_) - 0usize];
    ["Offset of field: XrSwapchainStateBaseHeaderFB::next"]
        [::std::mem::offset_of!(XrSwapchainStateBaseHeaderFB, next) - 8usize];
};
pub type XrCompositionLayerSecureContentFlagsFB = XrFlags64;
pub const XR_COMPOSITION_LAYER_SECURE_CONTENT_EXCLUDE_LAYER_BIT_FB:
    XrCompositionLayerSecureContentFlagsFB = 1;
pub const XR_COMPOSITION_LAYER_SECURE_CONTENT_REPLACE_LAYER_BIT_FB:
    XrCompositionLayerSecureContentFlagsFB = 2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerSecureContentFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub flags: XrCompositionLayerSecureContentFlagsFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCompositionLayerSecureContentFB"]
        [::std::mem::size_of::<XrCompositionLayerSecureContentFB>() - 24usize];
    ["Alignment of XrCompositionLayerSecureContentFB"]
        [::std::mem::align_of::<XrCompositionLayerSecureContentFB>() - 8usize];
    ["Offset of field: XrCompositionLayerSecureContentFB::type_"]
        [::std::mem::offset_of!(XrCompositionLayerSecureContentFB, type_) - 0usize];
    ["Offset of field: XrCompositionLayerSecureContentFB::next"]
        [::std::mem::offset_of!(XrCompositionLayerSecureContentFB, next) - 8usize];
    ["Offset of field: XrCompositionLayerSecureContentFB::flags"]
        [::std::mem::offset_of!(XrCompositionLayerSecureContentFB, flags) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBodyTrackerFB_T {
    _unused: [u8; 0],
}
pub type XrBodyTrackerFB = *mut XrBodyTrackerFB_T;
pub const XrBodyJointFB_XR_BODY_JOINT_ROOT_FB: XrBodyJointFB = 0;
pub const XrBodyJointFB_XR_BODY_JOINT_HIPS_FB: XrBodyJointFB = 1;
pub const XrBodyJointFB_XR_BODY_JOINT_SPINE_LOWER_FB: XrBodyJointFB = 2;
pub const XrBodyJointFB_XR_BODY_JOINT_SPINE_MIDDLE_FB: XrBodyJointFB = 3;
pub const XrBodyJointFB_XR_BODY_JOINT_SPINE_UPPER_FB: XrBodyJointFB = 4;
pub const XrBodyJointFB_XR_BODY_JOINT_CHEST_FB: XrBodyJointFB = 5;
pub const XrBodyJointFB_XR_BODY_JOINT_NECK_FB: XrBodyJointFB = 6;
pub const XrBodyJointFB_XR_BODY_JOINT_HEAD_FB: XrBodyJointFB = 7;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_SHOULDER_FB: XrBodyJointFB = 8;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_SCAPULA_FB: XrBodyJointFB = 9;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_ARM_UPPER_FB: XrBodyJointFB = 10;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_ARM_LOWER_FB: XrBodyJointFB = 11;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_WRIST_TWIST_FB: XrBodyJointFB = 12;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_SHOULDER_FB: XrBodyJointFB = 13;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_SCAPULA_FB: XrBodyJointFB = 14;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_ARM_UPPER_FB: XrBodyJointFB = 15;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_ARM_LOWER_FB: XrBodyJointFB = 16;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_WRIST_TWIST_FB: XrBodyJointFB = 17;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_PALM_FB: XrBodyJointFB = 18;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_WRIST_FB: XrBodyJointFB = 19;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_THUMB_METACARPAL_FB: XrBodyJointFB = 20;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_THUMB_PROXIMAL_FB: XrBodyJointFB = 21;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_THUMB_DISTAL_FB: XrBodyJointFB = 22;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_THUMB_TIP_FB: XrBodyJointFB = 23;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_INDEX_METACARPAL_FB: XrBodyJointFB = 24;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_INDEX_PROXIMAL_FB: XrBodyJointFB = 25;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_INDEX_INTERMEDIATE_FB: XrBodyJointFB = 26;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_INDEX_DISTAL_FB: XrBodyJointFB = 27;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_INDEX_TIP_FB: XrBodyJointFB = 28;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_MIDDLE_METACARPAL_FB: XrBodyJointFB = 29;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_MIDDLE_PROXIMAL_FB: XrBodyJointFB = 30;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_MIDDLE_INTERMEDIATE_FB: XrBodyJointFB = 31;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_MIDDLE_DISTAL_FB: XrBodyJointFB = 32;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_MIDDLE_TIP_FB: XrBodyJointFB = 33;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_RING_METACARPAL_FB: XrBodyJointFB = 34;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_RING_PROXIMAL_FB: XrBodyJointFB = 35;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_RING_INTERMEDIATE_FB: XrBodyJointFB = 36;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_RING_DISTAL_FB: XrBodyJointFB = 37;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_RING_TIP_FB: XrBodyJointFB = 38;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_LITTLE_METACARPAL_FB: XrBodyJointFB = 39;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_LITTLE_PROXIMAL_FB: XrBodyJointFB = 40;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_LITTLE_INTERMEDIATE_FB: XrBodyJointFB = 41;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_LITTLE_DISTAL_FB: XrBodyJointFB = 42;
pub const XrBodyJointFB_XR_BODY_JOINT_LEFT_HAND_LITTLE_TIP_FB: XrBodyJointFB = 43;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_PALM_FB: XrBodyJointFB = 44;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_WRIST_FB: XrBodyJointFB = 45;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_THUMB_METACARPAL_FB: XrBodyJointFB = 46;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_THUMB_PROXIMAL_FB: XrBodyJointFB = 47;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_THUMB_DISTAL_FB: XrBodyJointFB = 48;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_THUMB_TIP_FB: XrBodyJointFB = 49;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_INDEX_METACARPAL_FB: XrBodyJointFB = 50;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_INDEX_PROXIMAL_FB: XrBodyJointFB = 51;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_INDEX_INTERMEDIATE_FB: XrBodyJointFB = 52;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_INDEX_DISTAL_FB: XrBodyJointFB = 53;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_INDEX_TIP_FB: XrBodyJointFB = 54;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_MIDDLE_METACARPAL_FB: XrBodyJointFB = 55;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_MIDDLE_PROXIMAL_FB: XrBodyJointFB = 56;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_MIDDLE_INTERMEDIATE_FB: XrBodyJointFB = 57;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_MIDDLE_DISTAL_FB: XrBodyJointFB = 58;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_MIDDLE_TIP_FB: XrBodyJointFB = 59;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_RING_METACARPAL_FB: XrBodyJointFB = 60;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_RING_PROXIMAL_FB: XrBodyJointFB = 61;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_RING_INTERMEDIATE_FB: XrBodyJointFB = 62;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_RING_DISTAL_FB: XrBodyJointFB = 63;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_RING_TIP_FB: XrBodyJointFB = 64;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_LITTLE_METACARPAL_FB: XrBodyJointFB = 65;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_LITTLE_PROXIMAL_FB: XrBodyJointFB = 66;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_LITTLE_INTERMEDIATE_FB: XrBodyJointFB = 67;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_LITTLE_DISTAL_FB: XrBodyJointFB = 68;
pub const XrBodyJointFB_XR_BODY_JOINT_RIGHT_HAND_LITTLE_TIP_FB: XrBodyJointFB = 69;
pub const XrBodyJointFB_XR_BODY_JOINT_COUNT_FB: XrBodyJointFB = 70;
pub const XrBodyJointFB_XR_BODY_JOINT_NONE_FB: XrBodyJointFB = -1;
pub const XrBodyJointFB_XR_BODY_JOINT_MAX_ENUM_FB: XrBodyJointFB = 2147483647;
pub type XrBodyJointFB = ::std::os::raw::c_int;
pub const XrBodyJointSetFB_XR_BODY_JOINT_SET_DEFAULT_FB: XrBodyJointSetFB = 0;
pub const XrBodyJointSetFB_XR_BODY_JOINT_SET_MAX_ENUM_FB: XrBodyJointSetFB = 2147483647;
pub type XrBodyJointSetFB = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBodyJointLocationFB {
    pub locationFlags: XrSpaceLocationFlags,
    pub pose: XrPosef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrBodyJointLocationFB"][::std::mem::size_of::<XrBodyJointLocationFB>() - 40usize];
    ["Alignment of XrBodyJointLocationFB"]
        [::std::mem::align_of::<XrBodyJointLocationFB>() - 8usize];
    ["Offset of field: XrBodyJointLocationFB::locationFlags"]
        [::std::mem::offset_of!(XrBodyJointLocationFB, locationFlags) - 0usize];
    ["Offset of field: XrBodyJointLocationFB::pose"]
        [::std::mem::offset_of!(XrBodyJointLocationFB, pose) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemBodyTrackingPropertiesFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsBodyTracking: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemBodyTrackingPropertiesFB"]
        [::std::mem::size_of::<XrSystemBodyTrackingPropertiesFB>() - 24usize];
    ["Alignment of XrSystemBodyTrackingPropertiesFB"]
        [::std::mem::align_of::<XrSystemBodyTrackingPropertiesFB>() - 8usize];
    ["Offset of field: XrSystemBodyTrackingPropertiesFB::type_"]
        [::std::mem::offset_of!(XrSystemBodyTrackingPropertiesFB, type_) - 0usize];
    ["Offset of field: XrSystemBodyTrackingPropertiesFB::next"]
        [::std::mem::offset_of!(XrSystemBodyTrackingPropertiesFB, next) - 8usize];
    ["Offset of field: XrSystemBodyTrackingPropertiesFB::supportsBodyTracking"]
        [::std::mem::offset_of!(XrSystemBodyTrackingPropertiesFB, supportsBodyTracking) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBodyTrackerCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub bodyJointSet: XrBodyJointSetFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrBodyTrackerCreateInfoFB"]
        [::std::mem::size_of::<XrBodyTrackerCreateInfoFB>() - 24usize];
    ["Alignment of XrBodyTrackerCreateInfoFB"]
        [::std::mem::align_of::<XrBodyTrackerCreateInfoFB>() - 8usize];
    ["Offset of field: XrBodyTrackerCreateInfoFB::type_"]
        [::std::mem::offset_of!(XrBodyTrackerCreateInfoFB, type_) - 0usize];
    ["Offset of field: XrBodyTrackerCreateInfoFB::next"]
        [::std::mem::offset_of!(XrBodyTrackerCreateInfoFB, next) - 8usize];
    ["Offset of field: XrBodyTrackerCreateInfoFB::bodyJointSet"]
        [::std::mem::offset_of!(XrBodyTrackerCreateInfoFB, bodyJointSet) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBodySkeletonJointFB {
    pub joint: i32,
    pub parentJoint: i32,
    pub pose: XrPosef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrBodySkeletonJointFB"][::std::mem::size_of::<XrBodySkeletonJointFB>() - 36usize];
    ["Alignment of XrBodySkeletonJointFB"]
        [::std::mem::align_of::<XrBodySkeletonJointFB>() - 4usize];
    ["Offset of field: XrBodySkeletonJointFB::joint"]
        [::std::mem::offset_of!(XrBodySkeletonJointFB, joint) - 0usize];
    ["Offset of field: XrBodySkeletonJointFB::parentJoint"]
        [::std::mem::offset_of!(XrBodySkeletonJointFB, parentJoint) - 4usize];
    ["Offset of field: XrBodySkeletonJointFB::pose"]
        [::std::mem::offset_of!(XrBodySkeletonJointFB, pose) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBodySkeletonFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub jointCount: u32,
    pub joints: *mut XrBodySkeletonJointFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrBodySkeletonFB"][::std::mem::size_of::<XrBodySkeletonFB>() - 32usize];
    ["Alignment of XrBodySkeletonFB"][::std::mem::align_of::<XrBodySkeletonFB>() - 8usize];
    ["Offset of field: XrBodySkeletonFB::type_"]
        [::std::mem::offset_of!(XrBodySkeletonFB, type_) - 0usize];
    ["Offset of field: XrBodySkeletonFB::next"]
        [::std::mem::offset_of!(XrBodySkeletonFB, next) - 8usize];
    ["Offset of field: XrBodySkeletonFB::jointCount"]
        [::std::mem::offset_of!(XrBodySkeletonFB, jointCount) - 16usize];
    ["Offset of field: XrBodySkeletonFB::joints"]
        [::std::mem::offset_of!(XrBodySkeletonFB, joints) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBodyJointsLocateInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub baseSpace: XrSpace,
    pub time: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrBodyJointsLocateInfoFB"]
        [::std::mem::size_of::<XrBodyJointsLocateInfoFB>() - 32usize];
    ["Alignment of XrBodyJointsLocateInfoFB"]
        [::std::mem::align_of::<XrBodyJointsLocateInfoFB>() - 8usize];
    ["Offset of field: XrBodyJointsLocateInfoFB::type_"]
        [::std::mem::offset_of!(XrBodyJointsLocateInfoFB, type_) - 0usize];
    ["Offset of field: XrBodyJointsLocateInfoFB::next"]
        [::std::mem::offset_of!(XrBodyJointsLocateInfoFB, next) - 8usize];
    ["Offset of field: XrBodyJointsLocateInfoFB::baseSpace"]
        [::std::mem::offset_of!(XrBodyJointsLocateInfoFB, baseSpace) - 16usize];
    ["Offset of field: XrBodyJointsLocateInfoFB::time"]
        [::std::mem::offset_of!(XrBodyJointsLocateInfoFB, time) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBodyJointLocationsFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub isActive: XrBool32,
    pub confidence: f32,
    pub jointCount: u32,
    pub jointLocations: *mut XrBodyJointLocationFB,
    pub skeletonChangedCount: u32,
    pub time: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrBodyJointLocationsFB"][::std::mem::size_of::<XrBodyJointLocationsFB>() - 56usize];
    ["Alignment of XrBodyJointLocationsFB"]
        [::std::mem::align_of::<XrBodyJointLocationsFB>() - 8usize];
    ["Offset of field: XrBodyJointLocationsFB::type_"]
        [::std::mem::offset_of!(XrBodyJointLocationsFB, type_) - 0usize];
    ["Offset of field: XrBodyJointLocationsFB::next"]
        [::std::mem::offset_of!(XrBodyJointLocationsFB, next) - 8usize];
    ["Offset of field: XrBodyJointLocationsFB::isActive"]
        [::std::mem::offset_of!(XrBodyJointLocationsFB, isActive) - 16usize];
    ["Offset of field: XrBodyJointLocationsFB::confidence"]
        [::std::mem::offset_of!(XrBodyJointLocationsFB, confidence) - 20usize];
    ["Offset of field: XrBodyJointLocationsFB::jointCount"]
        [::std::mem::offset_of!(XrBodyJointLocationsFB, jointCount) - 24usize];
    ["Offset of field: XrBodyJointLocationsFB::jointLocations"]
        [::std::mem::offset_of!(XrBodyJointLocationsFB, jointLocations) - 32usize];
    ["Offset of field: XrBodyJointLocationsFB::skeletonChangedCount"]
        [::std::mem::offset_of!(XrBodyJointLocationsFB, skeletonChangedCount) - 40usize];
    ["Offset of field: XrBodyJointLocationsFB::time"]
        [::std::mem::offset_of!(XrBodyJointLocationsFB, time) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrInteractionProfileDpadBindingEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub binding: XrPath,
    pub actionSet: XrActionSet,
    pub forceThreshold: f32,
    pub forceThresholdReleased: f32,
    pub centerRegion: f32,
    pub wedgeAngle: f32,
    pub isSticky: XrBool32,
    pub onHaptic: *const XrHapticBaseHeader,
    pub offHaptic: *const XrHapticBaseHeader,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrInteractionProfileDpadBindingEXT"]
        [::std::mem::size_of::<XrInteractionProfileDpadBindingEXT>() - 72usize];
    ["Alignment of XrInteractionProfileDpadBindingEXT"]
        [::std::mem::align_of::<XrInteractionProfileDpadBindingEXT>() - 8usize];
    ["Offset of field: XrInteractionProfileDpadBindingEXT::type_"]
        [::std::mem::offset_of!(XrInteractionProfileDpadBindingEXT, type_) - 0usize];
    ["Offset of field: XrInteractionProfileDpadBindingEXT::next"]
        [::std::mem::offset_of!(XrInteractionProfileDpadBindingEXT, next) - 8usize];
    ["Offset of field: XrInteractionProfileDpadBindingEXT::binding"]
        [::std::mem::offset_of!(XrInteractionProfileDpadBindingEXT, binding) - 16usize];
    ["Offset of field: XrInteractionProfileDpadBindingEXT::actionSet"]
        [::std::mem::offset_of!(XrInteractionProfileDpadBindingEXT, actionSet) - 24usize];
    ["Offset of field: XrInteractionProfileDpadBindingEXT::forceThreshold"]
        [::std::mem::offset_of!(XrInteractionProfileDpadBindingEXT, forceThreshold) - 32usize];
    ["Offset of field: XrInteractionProfileDpadBindingEXT::forceThresholdReleased"][::std::mem::offset_of!(
        XrInteractionProfileDpadBindingEXT,
        forceThresholdReleased
    ) - 36usize];
    ["Offset of field: XrInteractionProfileDpadBindingEXT::centerRegion"]
        [::std::mem::offset_of!(XrInteractionProfileDpadBindingEXT, centerRegion) - 40usize];
    ["Offset of field: XrInteractionProfileDpadBindingEXT::wedgeAngle"]
        [::std::mem::offset_of!(XrInteractionProfileDpadBindingEXT, wedgeAngle) - 44usize];
    ["Offset of field: XrInteractionProfileDpadBindingEXT::isSticky"]
        [::std::mem::offset_of!(XrInteractionProfileDpadBindingEXT, isSticky) - 48usize];
    ["Offset of field: XrInteractionProfileDpadBindingEXT::onHaptic"]
        [::std::mem::offset_of!(XrInteractionProfileDpadBindingEXT, onHaptic) - 56usize];
    ["Offset of field: XrInteractionProfileDpadBindingEXT::offHaptic"]
        [::std::mem::offset_of!(XrInteractionProfileDpadBindingEXT, offHaptic) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrInteractionProfileAnalogThresholdVALVE {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub action: XrAction,
    pub binding: XrPath,
    pub onThreshold: f32,
    pub offThreshold: f32,
    pub onHaptic: *const XrHapticBaseHeader,
    pub offHaptic: *const XrHapticBaseHeader,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrInteractionProfileAnalogThresholdVALVE"]
        [::std::mem::size_of::<XrInteractionProfileAnalogThresholdVALVE>() - 56usize];
    ["Alignment of XrInteractionProfileAnalogThresholdVALVE"]
        [::std::mem::align_of::<XrInteractionProfileAnalogThresholdVALVE>() - 8usize];
    ["Offset of field: XrInteractionProfileAnalogThresholdVALVE::type_"]
        [::std::mem::offset_of!(XrInteractionProfileAnalogThresholdVALVE, type_) - 0usize];
    ["Offset of field: XrInteractionProfileAnalogThresholdVALVE::next"]
        [::std::mem::offset_of!(XrInteractionProfileAnalogThresholdVALVE, next) - 8usize];
    ["Offset of field: XrInteractionProfileAnalogThresholdVALVE::action"]
        [::std::mem::offset_of!(XrInteractionProfileAnalogThresholdVALVE, action) - 16usize];
    ["Offset of field: XrInteractionProfileAnalogThresholdVALVE::binding"]
        [::std::mem::offset_of!(XrInteractionProfileAnalogThresholdVALVE, binding) - 24usize];
    ["Offset of field: XrInteractionProfileAnalogThresholdVALVE::onThreshold"]
        [::std::mem::offset_of!(XrInteractionProfileAnalogThresholdVALVE, onThreshold) - 32usize];
    ["Offset of field: XrInteractionProfileAnalogThresholdVALVE::offThreshold"]
        [::std::mem::offset_of!(XrInteractionProfileAnalogThresholdVALVE, offThreshold) - 36usize];
    ["Offset of field: XrInteractionProfileAnalogThresholdVALVE::onHaptic"]
        [::std::mem::offset_of!(XrInteractionProfileAnalogThresholdVALVE, onHaptic) - 40usize];
    ["Offset of field: XrInteractionProfileAnalogThresholdVALVE::offHaptic"]
        [::std::mem::offset_of!(XrInteractionProfileAnalogThresholdVALVE, offHaptic) - 48usize];
};
pub const XrHandJointsMotionRangeEXT_XR_HAND_JOINTS_MOTION_RANGE_UNOBSTRUCTED_EXT:
    XrHandJointsMotionRangeEXT = 1;
pub const XrHandJointsMotionRangeEXT_XR_HAND_JOINTS_MOTION_RANGE_CONFORMING_TO_CONTROLLER_EXT:
    XrHandJointsMotionRangeEXT = 2;
pub const XrHandJointsMotionRangeEXT_XR_HAND_JOINTS_MOTION_RANGE_MAX_ENUM_EXT:
    XrHandJointsMotionRangeEXT = 2147483647;
pub type XrHandJointsMotionRangeEXT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandJointsMotionRangeInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub handJointsMotionRange: XrHandJointsMotionRangeEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHandJointsMotionRangeInfoEXT"]
        [::std::mem::size_of::<XrHandJointsMotionRangeInfoEXT>() - 24usize];
    ["Alignment of XrHandJointsMotionRangeInfoEXT"]
        [::std::mem::align_of::<XrHandJointsMotionRangeInfoEXT>() - 8usize];
    ["Offset of field: XrHandJointsMotionRangeInfoEXT::type_"]
        [::std::mem::offset_of!(XrHandJointsMotionRangeInfoEXT, type_) - 0usize];
    ["Offset of field: XrHandJointsMotionRangeInfoEXT::next"]
        [::std::mem::offset_of!(XrHandJointsMotionRangeInfoEXT, next) - 8usize];
    ["Offset of field: XrHandJointsMotionRangeInfoEXT::handJointsMotionRange"]
        [::std::mem::offset_of!(XrHandJointsMotionRangeInfoEXT, handJointsMotionRange) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneObserverMSFT_T {
    _unused: [u8; 0],
}
pub type XrSceneObserverMSFT = *mut XrSceneObserverMSFT_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMSFT_T {
    _unused: [u8; 0],
}
pub type XrSceneMSFT = *mut XrSceneMSFT_T;
pub const XrSceneComputeFeatureMSFT_XR_SCENE_COMPUTE_FEATURE_PLANE_MSFT: XrSceneComputeFeatureMSFT =
    1;
pub const XrSceneComputeFeatureMSFT_XR_SCENE_COMPUTE_FEATURE_PLANE_MESH_MSFT:
    XrSceneComputeFeatureMSFT = 2;
pub const XrSceneComputeFeatureMSFT_XR_SCENE_COMPUTE_FEATURE_VISUAL_MESH_MSFT:
    XrSceneComputeFeatureMSFT = 3;
pub const XrSceneComputeFeatureMSFT_XR_SCENE_COMPUTE_FEATURE_COLLIDER_MESH_MSFT:
    XrSceneComputeFeatureMSFT = 4;
pub const XrSceneComputeFeatureMSFT_XR_SCENE_COMPUTE_FEATURE_SERIALIZE_SCENE_MSFT:
    XrSceneComputeFeatureMSFT = 1000098000;
pub const XrSceneComputeFeatureMSFT_XR_SCENE_COMPUTE_FEATURE_MARKER_MSFT:
    XrSceneComputeFeatureMSFT = 1000147000;
pub const XrSceneComputeFeatureMSFT_XR_SCENE_COMPUTE_FEATURE_MAX_ENUM_MSFT:
    XrSceneComputeFeatureMSFT = 2147483647;
pub type XrSceneComputeFeatureMSFT = ::std::os::raw::c_uint;
pub const XrSceneComputeConsistencyMSFT_XR_SCENE_COMPUTE_CONSISTENCY_SNAPSHOT_COMPLETE_MSFT:
    XrSceneComputeConsistencyMSFT = 1;
pub const XrSceneComputeConsistencyMSFT_XR_SCENE_COMPUTE_CONSISTENCY_SNAPSHOT_INCOMPLETE_FAST_MSFT : XrSceneComputeConsistencyMSFT = 2 ;
pub const XrSceneComputeConsistencyMSFT_XR_SCENE_COMPUTE_CONSISTENCY_OCCLUSION_OPTIMIZED_MSFT:
    XrSceneComputeConsistencyMSFT = 3;
pub const XrSceneComputeConsistencyMSFT_XR_SCENE_COMPUTE_CONSISTENCY_MAX_ENUM_MSFT:
    XrSceneComputeConsistencyMSFT = 2147483647;
pub type XrSceneComputeConsistencyMSFT = ::std::os::raw::c_uint;
pub const XrMeshComputeLodMSFT_XR_MESH_COMPUTE_LOD_COARSE_MSFT: XrMeshComputeLodMSFT = 1;
pub const XrMeshComputeLodMSFT_XR_MESH_COMPUTE_LOD_MEDIUM_MSFT: XrMeshComputeLodMSFT = 2;
pub const XrMeshComputeLodMSFT_XR_MESH_COMPUTE_LOD_FINE_MSFT: XrMeshComputeLodMSFT = 3;
pub const XrMeshComputeLodMSFT_XR_MESH_COMPUTE_LOD_UNLIMITED_MSFT: XrMeshComputeLodMSFT = 4;
pub const XrMeshComputeLodMSFT_XR_MESH_COMPUTE_LOD_MAX_ENUM_MSFT: XrMeshComputeLodMSFT = 2147483647;
pub type XrMeshComputeLodMSFT = ::std::os::raw::c_uint;
pub const XrSceneComponentTypeMSFT_XR_SCENE_COMPONENT_TYPE_INVALID_MSFT: XrSceneComponentTypeMSFT =
    -1;
pub const XrSceneComponentTypeMSFT_XR_SCENE_COMPONENT_TYPE_OBJECT_MSFT: XrSceneComponentTypeMSFT =
    1;
pub const XrSceneComponentTypeMSFT_XR_SCENE_COMPONENT_TYPE_PLANE_MSFT: XrSceneComponentTypeMSFT = 2;
pub const XrSceneComponentTypeMSFT_XR_SCENE_COMPONENT_TYPE_VISUAL_MESH_MSFT:
    XrSceneComponentTypeMSFT = 3;
pub const XrSceneComponentTypeMSFT_XR_SCENE_COMPONENT_TYPE_COLLIDER_MESH_MSFT:
    XrSceneComponentTypeMSFT = 4;
pub const XrSceneComponentTypeMSFT_XR_SCENE_COMPONENT_TYPE_SERIALIZED_SCENE_FRAGMENT_MSFT:
    XrSceneComponentTypeMSFT = 1000098000;
pub const XrSceneComponentTypeMSFT_XR_SCENE_COMPONENT_TYPE_MARKER_MSFT: XrSceneComponentTypeMSFT =
    1000147000;
pub const XrSceneComponentTypeMSFT_XR_SCENE_COMPONENT_TYPE_MAX_ENUM_MSFT: XrSceneComponentTypeMSFT =
    2147483647;
pub type XrSceneComponentTypeMSFT = ::std::os::raw::c_int;
pub const XrSceneObjectTypeMSFT_XR_SCENE_OBJECT_TYPE_UNCATEGORIZED_MSFT: XrSceneObjectTypeMSFT = -1;
pub const XrSceneObjectTypeMSFT_XR_SCENE_OBJECT_TYPE_BACKGROUND_MSFT: XrSceneObjectTypeMSFT = 1;
pub const XrSceneObjectTypeMSFT_XR_SCENE_OBJECT_TYPE_WALL_MSFT: XrSceneObjectTypeMSFT = 2;
pub const XrSceneObjectTypeMSFT_XR_SCENE_OBJECT_TYPE_FLOOR_MSFT: XrSceneObjectTypeMSFT = 3;
pub const XrSceneObjectTypeMSFT_XR_SCENE_OBJECT_TYPE_CEILING_MSFT: XrSceneObjectTypeMSFT = 4;
pub const XrSceneObjectTypeMSFT_XR_SCENE_OBJECT_TYPE_PLATFORM_MSFT: XrSceneObjectTypeMSFT = 5;
pub const XrSceneObjectTypeMSFT_XR_SCENE_OBJECT_TYPE_INFERRED_MSFT: XrSceneObjectTypeMSFT = 6;
pub const XrSceneObjectTypeMSFT_XR_SCENE_OBJECT_TYPE_MAX_ENUM_MSFT: XrSceneObjectTypeMSFT =
    2147483647;
pub type XrSceneObjectTypeMSFT = ::std::os::raw::c_int;
pub const XrScenePlaneAlignmentTypeMSFT_XR_SCENE_PLANE_ALIGNMENT_TYPE_NON_ORTHOGONAL_MSFT:
    XrScenePlaneAlignmentTypeMSFT = 0;
pub const XrScenePlaneAlignmentTypeMSFT_XR_SCENE_PLANE_ALIGNMENT_TYPE_HORIZONTAL_MSFT:
    XrScenePlaneAlignmentTypeMSFT = 1;
pub const XrScenePlaneAlignmentTypeMSFT_XR_SCENE_PLANE_ALIGNMENT_TYPE_VERTICAL_MSFT:
    XrScenePlaneAlignmentTypeMSFT = 2;
pub const XrScenePlaneAlignmentTypeMSFT_XR_SCENE_PLANE_ALIGNMENT_TYPE_MAX_ENUM_MSFT:
    XrScenePlaneAlignmentTypeMSFT = 2147483647;
pub type XrScenePlaneAlignmentTypeMSFT = ::std::os::raw::c_uint;
pub const XrSceneComputeStateMSFT_XR_SCENE_COMPUTE_STATE_NONE_MSFT: XrSceneComputeStateMSFT = 0;
pub const XrSceneComputeStateMSFT_XR_SCENE_COMPUTE_STATE_UPDATING_MSFT: XrSceneComputeStateMSFT = 1;
pub const XrSceneComputeStateMSFT_XR_SCENE_COMPUTE_STATE_COMPLETED_MSFT: XrSceneComputeStateMSFT =
    2;
pub const XrSceneComputeStateMSFT_XR_SCENE_COMPUTE_STATE_COMPLETED_WITH_ERROR_MSFT:
    XrSceneComputeStateMSFT = 3;
pub const XrSceneComputeStateMSFT_XR_SCENE_COMPUTE_STATE_MAX_ENUM_MSFT: XrSceneComputeStateMSFT =
    2147483647;
pub type XrSceneComputeStateMSFT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrUuidMSFT {
    pub bytes: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrUuidMSFT"][::std::mem::size_of::<XrUuidMSFT>() - 16usize];
    ["Alignment of XrUuidMSFT"][::std::mem::align_of::<XrUuidMSFT>() - 1usize];
    ["Offset of field: XrUuidMSFT::bytes"][::std::mem::offset_of!(XrUuidMSFT, bytes) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneObserverCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneObserverCreateInfoMSFT"]
        [::std::mem::size_of::<XrSceneObserverCreateInfoMSFT>() - 16usize];
    ["Alignment of XrSceneObserverCreateInfoMSFT"]
        [::std::mem::align_of::<XrSceneObserverCreateInfoMSFT>() - 8usize];
    ["Offset of field: XrSceneObserverCreateInfoMSFT::type_"]
        [::std::mem::offset_of!(XrSceneObserverCreateInfoMSFT, type_) - 0usize];
    ["Offset of field: XrSceneObserverCreateInfoMSFT::next"]
        [::std::mem::offset_of!(XrSceneObserverCreateInfoMSFT, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneCreateInfoMSFT"][::std::mem::size_of::<XrSceneCreateInfoMSFT>() - 16usize];
    ["Alignment of XrSceneCreateInfoMSFT"]
        [::std::mem::align_of::<XrSceneCreateInfoMSFT>() - 8usize];
    ["Offset of field: XrSceneCreateInfoMSFT::type_"]
        [::std::mem::offset_of!(XrSceneCreateInfoMSFT, type_) - 0usize];
    ["Offset of field: XrSceneCreateInfoMSFT::next"]
        [::std::mem::offset_of!(XrSceneCreateInfoMSFT, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneSphereBoundMSFT {
    pub center: XrVector3f,
    pub radius: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneSphereBoundMSFT"][::std::mem::size_of::<XrSceneSphereBoundMSFT>() - 16usize];
    ["Alignment of XrSceneSphereBoundMSFT"]
        [::std::mem::align_of::<XrSceneSphereBoundMSFT>() - 4usize];
    ["Offset of field: XrSceneSphereBoundMSFT::center"]
        [::std::mem::offset_of!(XrSceneSphereBoundMSFT, center) - 0usize];
    ["Offset of field: XrSceneSphereBoundMSFT::radius"]
        [::std::mem::offset_of!(XrSceneSphereBoundMSFT, radius) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneOrientedBoxBoundMSFT {
    pub pose: XrPosef,
    pub extents: XrVector3f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneOrientedBoxBoundMSFT"]
        [::std::mem::size_of::<XrSceneOrientedBoxBoundMSFT>() - 40usize];
    ["Alignment of XrSceneOrientedBoxBoundMSFT"]
        [::std::mem::align_of::<XrSceneOrientedBoxBoundMSFT>() - 4usize];
    ["Offset of field: XrSceneOrientedBoxBoundMSFT::pose"]
        [::std::mem::offset_of!(XrSceneOrientedBoxBoundMSFT, pose) - 0usize];
    ["Offset of field: XrSceneOrientedBoxBoundMSFT::extents"]
        [::std::mem::offset_of!(XrSceneOrientedBoxBoundMSFT, extents) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneFrustumBoundMSFT {
    pub pose: XrPosef,
    pub fov: XrFovf,
    pub farDistance: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneFrustumBoundMSFT"][::std::mem::size_of::<XrSceneFrustumBoundMSFT>() - 48usize];
    ["Alignment of XrSceneFrustumBoundMSFT"]
        [::std::mem::align_of::<XrSceneFrustumBoundMSFT>() - 4usize];
    ["Offset of field: XrSceneFrustumBoundMSFT::pose"]
        [::std::mem::offset_of!(XrSceneFrustumBoundMSFT, pose) - 0usize];
    ["Offset of field: XrSceneFrustumBoundMSFT::fov"]
        [::std::mem::offset_of!(XrSceneFrustumBoundMSFT, fov) - 28usize];
    ["Offset of field: XrSceneFrustumBoundMSFT::farDistance"]
        [::std::mem::offset_of!(XrSceneFrustumBoundMSFT, farDistance) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneBoundsMSFT {
    pub space: XrSpace,
    pub time: XrTime,
    pub sphereCount: u32,
    pub spheres: *const XrSceneSphereBoundMSFT,
    pub boxCount: u32,
    pub boxes: *const XrSceneOrientedBoxBoundMSFT,
    pub frustumCount: u32,
    pub frustums: *const XrSceneFrustumBoundMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneBoundsMSFT"][::std::mem::size_of::<XrSceneBoundsMSFT>() - 64usize];
    ["Alignment of XrSceneBoundsMSFT"][::std::mem::align_of::<XrSceneBoundsMSFT>() - 8usize];
    ["Offset of field: XrSceneBoundsMSFT::space"]
        [::std::mem::offset_of!(XrSceneBoundsMSFT, space) - 0usize];
    ["Offset of field: XrSceneBoundsMSFT::time"]
        [::std::mem::offset_of!(XrSceneBoundsMSFT, time) - 8usize];
    ["Offset of field: XrSceneBoundsMSFT::sphereCount"]
        [::std::mem::offset_of!(XrSceneBoundsMSFT, sphereCount) - 16usize];
    ["Offset of field: XrSceneBoundsMSFT::spheres"]
        [::std::mem::offset_of!(XrSceneBoundsMSFT, spheres) - 24usize];
    ["Offset of field: XrSceneBoundsMSFT::boxCount"]
        [::std::mem::offset_of!(XrSceneBoundsMSFT, boxCount) - 32usize];
    ["Offset of field: XrSceneBoundsMSFT::boxes"]
        [::std::mem::offset_of!(XrSceneBoundsMSFT, boxes) - 40usize];
    ["Offset of field: XrSceneBoundsMSFT::frustumCount"]
        [::std::mem::offset_of!(XrSceneBoundsMSFT, frustumCount) - 48usize];
    ["Offset of field: XrSceneBoundsMSFT::frustums"]
        [::std::mem::offset_of!(XrSceneBoundsMSFT, frustums) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrNewSceneComputeInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestedFeatureCount: u32,
    pub requestedFeatures: *const XrSceneComputeFeatureMSFT,
    pub consistency: XrSceneComputeConsistencyMSFT,
    pub bounds: XrSceneBoundsMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrNewSceneComputeInfoMSFT"]
        [::std::mem::size_of::<XrNewSceneComputeInfoMSFT>() - 104usize];
    ["Alignment of XrNewSceneComputeInfoMSFT"]
        [::std::mem::align_of::<XrNewSceneComputeInfoMSFT>() - 8usize];
    ["Offset of field: XrNewSceneComputeInfoMSFT::type_"]
        [::std::mem::offset_of!(XrNewSceneComputeInfoMSFT, type_) - 0usize];
    ["Offset of field: XrNewSceneComputeInfoMSFT::next"]
        [::std::mem::offset_of!(XrNewSceneComputeInfoMSFT, next) - 8usize];
    ["Offset of field: XrNewSceneComputeInfoMSFT::requestedFeatureCount"]
        [::std::mem::offset_of!(XrNewSceneComputeInfoMSFT, requestedFeatureCount) - 16usize];
    ["Offset of field: XrNewSceneComputeInfoMSFT::requestedFeatures"]
        [::std::mem::offset_of!(XrNewSceneComputeInfoMSFT, requestedFeatures) - 24usize];
    ["Offset of field: XrNewSceneComputeInfoMSFT::consistency"]
        [::std::mem::offset_of!(XrNewSceneComputeInfoMSFT, consistency) - 32usize];
    ["Offset of field: XrNewSceneComputeInfoMSFT::bounds"]
        [::std::mem::offset_of!(XrNewSceneComputeInfoMSFT, bounds) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVisualMeshComputeLodInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub lod: XrMeshComputeLodMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrVisualMeshComputeLodInfoMSFT"]
        [::std::mem::size_of::<XrVisualMeshComputeLodInfoMSFT>() - 24usize];
    ["Alignment of XrVisualMeshComputeLodInfoMSFT"]
        [::std::mem::align_of::<XrVisualMeshComputeLodInfoMSFT>() - 8usize];
    ["Offset of field: XrVisualMeshComputeLodInfoMSFT::type_"]
        [::std::mem::offset_of!(XrVisualMeshComputeLodInfoMSFT, type_) - 0usize];
    ["Offset of field: XrVisualMeshComputeLodInfoMSFT::next"]
        [::std::mem::offset_of!(XrVisualMeshComputeLodInfoMSFT, next) - 8usize];
    ["Offset of field: XrVisualMeshComputeLodInfoMSFT::lod"]
        [::std::mem::offset_of!(XrVisualMeshComputeLodInfoMSFT, lod) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneComponentMSFT {
    pub componentType: XrSceneComponentTypeMSFT,
    pub id: XrUuidMSFT,
    pub parentId: XrUuidMSFT,
    pub updateTime: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneComponentMSFT"][::std::mem::size_of::<XrSceneComponentMSFT>() - 48usize];
    ["Alignment of XrSceneComponentMSFT"][::std::mem::align_of::<XrSceneComponentMSFT>() - 8usize];
    ["Offset of field: XrSceneComponentMSFT::componentType"]
        [::std::mem::offset_of!(XrSceneComponentMSFT, componentType) - 0usize];
    ["Offset of field: XrSceneComponentMSFT::id"]
        [::std::mem::offset_of!(XrSceneComponentMSFT, id) - 4usize];
    ["Offset of field: XrSceneComponentMSFT::parentId"]
        [::std::mem::offset_of!(XrSceneComponentMSFT, parentId) - 20usize];
    ["Offset of field: XrSceneComponentMSFT::updateTime"]
        [::std::mem::offset_of!(XrSceneComponentMSFT, updateTime) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneComponentsMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub componentCapacityInput: u32,
    pub componentCountOutput: u32,
    pub components: *mut XrSceneComponentMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneComponentsMSFT"][::std::mem::size_of::<XrSceneComponentsMSFT>() - 32usize];
    ["Alignment of XrSceneComponentsMSFT"]
        [::std::mem::align_of::<XrSceneComponentsMSFT>() - 8usize];
    ["Offset of field: XrSceneComponentsMSFT::type_"]
        [::std::mem::offset_of!(XrSceneComponentsMSFT, type_) - 0usize];
    ["Offset of field: XrSceneComponentsMSFT::next"]
        [::std::mem::offset_of!(XrSceneComponentsMSFT, next) - 8usize];
    ["Offset of field: XrSceneComponentsMSFT::componentCapacityInput"]
        [::std::mem::offset_of!(XrSceneComponentsMSFT, componentCapacityInput) - 16usize];
    ["Offset of field: XrSceneComponentsMSFT::componentCountOutput"]
        [::std::mem::offset_of!(XrSceneComponentsMSFT, componentCountOutput) - 20usize];
    ["Offset of field: XrSceneComponentsMSFT::components"]
        [::std::mem::offset_of!(XrSceneComponentsMSFT, components) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneComponentsGetInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub componentType: XrSceneComponentTypeMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneComponentsGetInfoMSFT"]
        [::std::mem::size_of::<XrSceneComponentsGetInfoMSFT>() - 24usize];
    ["Alignment of XrSceneComponentsGetInfoMSFT"]
        [::std::mem::align_of::<XrSceneComponentsGetInfoMSFT>() - 8usize];
    ["Offset of field: XrSceneComponentsGetInfoMSFT::type_"]
        [::std::mem::offset_of!(XrSceneComponentsGetInfoMSFT, type_) - 0usize];
    ["Offset of field: XrSceneComponentsGetInfoMSFT::next"]
        [::std::mem::offset_of!(XrSceneComponentsGetInfoMSFT, next) - 8usize];
    ["Offset of field: XrSceneComponentsGetInfoMSFT::componentType"]
        [::std::mem::offset_of!(XrSceneComponentsGetInfoMSFT, componentType) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneComponentLocationMSFT {
    pub flags: XrSpaceLocationFlags,
    pub pose: XrPosef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneComponentLocationMSFT"]
        [::std::mem::size_of::<XrSceneComponentLocationMSFT>() - 40usize];
    ["Alignment of XrSceneComponentLocationMSFT"]
        [::std::mem::align_of::<XrSceneComponentLocationMSFT>() - 8usize];
    ["Offset of field: XrSceneComponentLocationMSFT::flags"]
        [::std::mem::offset_of!(XrSceneComponentLocationMSFT, flags) - 0usize];
    ["Offset of field: XrSceneComponentLocationMSFT::pose"]
        [::std::mem::offset_of!(XrSceneComponentLocationMSFT, pose) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneComponentLocationsMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub locationCount: u32,
    pub locations: *mut XrSceneComponentLocationMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneComponentLocationsMSFT"]
        [::std::mem::size_of::<XrSceneComponentLocationsMSFT>() - 32usize];
    ["Alignment of XrSceneComponentLocationsMSFT"]
        [::std::mem::align_of::<XrSceneComponentLocationsMSFT>() - 8usize];
    ["Offset of field: XrSceneComponentLocationsMSFT::type_"]
        [::std::mem::offset_of!(XrSceneComponentLocationsMSFT, type_) - 0usize];
    ["Offset of field: XrSceneComponentLocationsMSFT::next"]
        [::std::mem::offset_of!(XrSceneComponentLocationsMSFT, next) - 8usize];
    ["Offset of field: XrSceneComponentLocationsMSFT::locationCount"]
        [::std::mem::offset_of!(XrSceneComponentLocationsMSFT, locationCount) - 16usize];
    ["Offset of field: XrSceneComponentLocationsMSFT::locations"]
        [::std::mem::offset_of!(XrSceneComponentLocationsMSFT, locations) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneComponentsLocateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub baseSpace: XrSpace,
    pub time: XrTime,
    pub componentIdCount: u32,
    pub componentIds: *const XrUuidMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneComponentsLocateInfoMSFT"]
        [::std::mem::size_of::<XrSceneComponentsLocateInfoMSFT>() - 48usize];
    ["Alignment of XrSceneComponentsLocateInfoMSFT"]
        [::std::mem::align_of::<XrSceneComponentsLocateInfoMSFT>() - 8usize];
    ["Offset of field: XrSceneComponentsLocateInfoMSFT::type_"]
        [::std::mem::offset_of!(XrSceneComponentsLocateInfoMSFT, type_) - 0usize];
    ["Offset of field: XrSceneComponentsLocateInfoMSFT::next"]
        [::std::mem::offset_of!(XrSceneComponentsLocateInfoMSFT, next) - 8usize];
    ["Offset of field: XrSceneComponentsLocateInfoMSFT::baseSpace"]
        [::std::mem::offset_of!(XrSceneComponentsLocateInfoMSFT, baseSpace) - 16usize];
    ["Offset of field: XrSceneComponentsLocateInfoMSFT::time"]
        [::std::mem::offset_of!(XrSceneComponentsLocateInfoMSFT, time) - 24usize];
    ["Offset of field: XrSceneComponentsLocateInfoMSFT::componentIdCount"]
        [::std::mem::offset_of!(XrSceneComponentsLocateInfoMSFT, componentIdCount) - 32usize];
    ["Offset of field: XrSceneComponentsLocateInfoMSFT::componentIds"]
        [::std::mem::offset_of!(XrSceneComponentsLocateInfoMSFT, componentIds) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneObjectMSFT {
    pub objectType: XrSceneObjectTypeMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneObjectMSFT"][::std::mem::size_of::<XrSceneObjectMSFT>() - 4usize];
    ["Alignment of XrSceneObjectMSFT"][::std::mem::align_of::<XrSceneObjectMSFT>() - 4usize];
    ["Offset of field: XrSceneObjectMSFT::objectType"]
        [::std::mem::offset_of!(XrSceneObjectMSFT, objectType) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneObjectsMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub sceneObjectCount: u32,
    pub sceneObjects: *mut XrSceneObjectMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneObjectsMSFT"][::std::mem::size_of::<XrSceneObjectsMSFT>() - 32usize];
    ["Alignment of XrSceneObjectsMSFT"][::std::mem::align_of::<XrSceneObjectsMSFT>() - 8usize];
    ["Offset of field: XrSceneObjectsMSFT::type_"]
        [::std::mem::offset_of!(XrSceneObjectsMSFT, type_) - 0usize];
    ["Offset of field: XrSceneObjectsMSFT::next"]
        [::std::mem::offset_of!(XrSceneObjectsMSFT, next) - 8usize];
    ["Offset of field: XrSceneObjectsMSFT::sceneObjectCount"]
        [::std::mem::offset_of!(XrSceneObjectsMSFT, sceneObjectCount) - 16usize];
    ["Offset of field: XrSceneObjectsMSFT::sceneObjects"]
        [::std::mem::offset_of!(XrSceneObjectsMSFT, sceneObjects) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneComponentParentFilterInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub parentId: XrUuidMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneComponentParentFilterInfoMSFT"]
        [::std::mem::size_of::<XrSceneComponentParentFilterInfoMSFT>() - 32usize];
    ["Alignment of XrSceneComponentParentFilterInfoMSFT"]
        [::std::mem::align_of::<XrSceneComponentParentFilterInfoMSFT>() - 8usize];
    ["Offset of field: XrSceneComponentParentFilterInfoMSFT::type_"]
        [::std::mem::offset_of!(XrSceneComponentParentFilterInfoMSFT, type_) - 0usize];
    ["Offset of field: XrSceneComponentParentFilterInfoMSFT::next"]
        [::std::mem::offset_of!(XrSceneComponentParentFilterInfoMSFT, next) - 8usize];
    ["Offset of field: XrSceneComponentParentFilterInfoMSFT::parentId"]
        [::std::mem::offset_of!(XrSceneComponentParentFilterInfoMSFT, parentId) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneObjectTypesFilterInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub objectTypeCount: u32,
    pub objectTypes: *const XrSceneObjectTypeMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneObjectTypesFilterInfoMSFT"]
        [::std::mem::size_of::<XrSceneObjectTypesFilterInfoMSFT>() - 32usize];
    ["Alignment of XrSceneObjectTypesFilterInfoMSFT"]
        [::std::mem::align_of::<XrSceneObjectTypesFilterInfoMSFT>() - 8usize];
    ["Offset of field: XrSceneObjectTypesFilterInfoMSFT::type_"]
        [::std::mem::offset_of!(XrSceneObjectTypesFilterInfoMSFT, type_) - 0usize];
    ["Offset of field: XrSceneObjectTypesFilterInfoMSFT::next"]
        [::std::mem::offset_of!(XrSceneObjectTypesFilterInfoMSFT, next) - 8usize];
    ["Offset of field: XrSceneObjectTypesFilterInfoMSFT::objectTypeCount"]
        [::std::mem::offset_of!(XrSceneObjectTypesFilterInfoMSFT, objectTypeCount) - 16usize];
    ["Offset of field: XrSceneObjectTypesFilterInfoMSFT::objectTypes"]
        [::std::mem::offset_of!(XrSceneObjectTypesFilterInfoMSFT, objectTypes) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrScenePlaneMSFT {
    pub alignment: XrScenePlaneAlignmentTypeMSFT,
    pub size: XrExtent2Df,
    pub meshBufferId: u64,
    pub supportsIndicesUint16: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrScenePlaneMSFT"][::std::mem::size_of::<XrScenePlaneMSFT>() - 32usize];
    ["Alignment of XrScenePlaneMSFT"][::std::mem::align_of::<XrScenePlaneMSFT>() - 8usize];
    ["Offset of field: XrScenePlaneMSFT::alignment"]
        [::std::mem::offset_of!(XrScenePlaneMSFT, alignment) - 0usize];
    ["Offset of field: XrScenePlaneMSFT::size"]
        [::std::mem::offset_of!(XrScenePlaneMSFT, size) - 4usize];
    ["Offset of field: XrScenePlaneMSFT::meshBufferId"]
        [::std::mem::offset_of!(XrScenePlaneMSFT, meshBufferId) - 16usize];
    ["Offset of field: XrScenePlaneMSFT::supportsIndicesUint16"]
        [::std::mem::offset_of!(XrScenePlaneMSFT, supportsIndicesUint16) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrScenePlanesMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub scenePlaneCount: u32,
    pub scenePlanes: *mut XrScenePlaneMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrScenePlanesMSFT"][::std::mem::size_of::<XrScenePlanesMSFT>() - 32usize];
    ["Alignment of XrScenePlanesMSFT"][::std::mem::align_of::<XrScenePlanesMSFT>() - 8usize];
    ["Offset of field: XrScenePlanesMSFT::type_"]
        [::std::mem::offset_of!(XrScenePlanesMSFT, type_) - 0usize];
    ["Offset of field: XrScenePlanesMSFT::next"]
        [::std::mem::offset_of!(XrScenePlanesMSFT, next) - 8usize];
    ["Offset of field: XrScenePlanesMSFT::scenePlaneCount"]
        [::std::mem::offset_of!(XrScenePlanesMSFT, scenePlaneCount) - 16usize];
    ["Offset of field: XrScenePlanesMSFT::scenePlanes"]
        [::std::mem::offset_of!(XrScenePlanesMSFT, scenePlanes) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrScenePlaneAlignmentFilterInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub alignmentCount: u32,
    pub alignments: *const XrScenePlaneAlignmentTypeMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrScenePlaneAlignmentFilterInfoMSFT"]
        [::std::mem::size_of::<XrScenePlaneAlignmentFilterInfoMSFT>() - 32usize];
    ["Alignment of XrScenePlaneAlignmentFilterInfoMSFT"]
        [::std::mem::align_of::<XrScenePlaneAlignmentFilterInfoMSFT>() - 8usize];
    ["Offset of field: XrScenePlaneAlignmentFilterInfoMSFT::type_"]
        [::std::mem::offset_of!(XrScenePlaneAlignmentFilterInfoMSFT, type_) - 0usize];
    ["Offset of field: XrScenePlaneAlignmentFilterInfoMSFT::next"]
        [::std::mem::offset_of!(XrScenePlaneAlignmentFilterInfoMSFT, next) - 8usize];
    ["Offset of field: XrScenePlaneAlignmentFilterInfoMSFT::alignmentCount"]
        [::std::mem::offset_of!(XrScenePlaneAlignmentFilterInfoMSFT, alignmentCount) - 16usize];
    ["Offset of field: XrScenePlaneAlignmentFilterInfoMSFT::alignments"]
        [::std::mem::offset_of!(XrScenePlaneAlignmentFilterInfoMSFT, alignments) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMeshMSFT {
    pub meshBufferId: u64,
    pub supportsIndicesUint16: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneMeshMSFT"][::std::mem::size_of::<XrSceneMeshMSFT>() - 16usize];
    ["Alignment of XrSceneMeshMSFT"][::std::mem::align_of::<XrSceneMeshMSFT>() - 8usize];
    ["Offset of field: XrSceneMeshMSFT::meshBufferId"]
        [::std::mem::offset_of!(XrSceneMeshMSFT, meshBufferId) - 0usize];
    ["Offset of field: XrSceneMeshMSFT::supportsIndicesUint16"]
        [::std::mem::offset_of!(XrSceneMeshMSFT, supportsIndicesUint16) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMeshesMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub sceneMeshCount: u32,
    pub sceneMeshes: *mut XrSceneMeshMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneMeshesMSFT"][::std::mem::size_of::<XrSceneMeshesMSFT>() - 32usize];
    ["Alignment of XrSceneMeshesMSFT"][::std::mem::align_of::<XrSceneMeshesMSFT>() - 8usize];
    ["Offset of field: XrSceneMeshesMSFT::type_"]
        [::std::mem::offset_of!(XrSceneMeshesMSFT, type_) - 0usize];
    ["Offset of field: XrSceneMeshesMSFT::next"]
        [::std::mem::offset_of!(XrSceneMeshesMSFT, next) - 8usize];
    ["Offset of field: XrSceneMeshesMSFT::sceneMeshCount"]
        [::std::mem::offset_of!(XrSceneMeshesMSFT, sceneMeshCount) - 16usize];
    ["Offset of field: XrSceneMeshesMSFT::sceneMeshes"]
        [::std::mem::offset_of!(XrSceneMeshesMSFT, sceneMeshes) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMeshBuffersGetInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub meshBufferId: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneMeshBuffersGetInfoMSFT"]
        [::std::mem::size_of::<XrSceneMeshBuffersGetInfoMSFT>() - 24usize];
    ["Alignment of XrSceneMeshBuffersGetInfoMSFT"]
        [::std::mem::align_of::<XrSceneMeshBuffersGetInfoMSFT>() - 8usize];
    ["Offset of field: XrSceneMeshBuffersGetInfoMSFT::type_"]
        [::std::mem::offset_of!(XrSceneMeshBuffersGetInfoMSFT, type_) - 0usize];
    ["Offset of field: XrSceneMeshBuffersGetInfoMSFT::next"]
        [::std::mem::offset_of!(XrSceneMeshBuffersGetInfoMSFT, next) - 8usize];
    ["Offset of field: XrSceneMeshBuffersGetInfoMSFT::meshBufferId"]
        [::std::mem::offset_of!(XrSceneMeshBuffersGetInfoMSFT, meshBufferId) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMeshBuffersMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneMeshBuffersMSFT"][::std::mem::size_of::<XrSceneMeshBuffersMSFT>() - 16usize];
    ["Alignment of XrSceneMeshBuffersMSFT"]
        [::std::mem::align_of::<XrSceneMeshBuffersMSFT>() - 8usize];
    ["Offset of field: XrSceneMeshBuffersMSFT::type_"]
        [::std::mem::offset_of!(XrSceneMeshBuffersMSFT, type_) - 0usize];
    ["Offset of field: XrSceneMeshBuffersMSFT::next"]
        [::std::mem::offset_of!(XrSceneMeshBuffersMSFT, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMeshVertexBufferMSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub vertexCapacityInput: u32,
    pub vertexCountOutput: u32,
    pub vertices: *mut XrVector3f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneMeshVertexBufferMSFT"]
        [::std::mem::size_of::<XrSceneMeshVertexBufferMSFT>() - 32usize];
    ["Alignment of XrSceneMeshVertexBufferMSFT"]
        [::std::mem::align_of::<XrSceneMeshVertexBufferMSFT>() - 8usize];
    ["Offset of field: XrSceneMeshVertexBufferMSFT::type_"]
        [::std::mem::offset_of!(XrSceneMeshVertexBufferMSFT, type_) - 0usize];
    ["Offset of field: XrSceneMeshVertexBufferMSFT::next"]
        [::std::mem::offset_of!(XrSceneMeshVertexBufferMSFT, next) - 8usize];
    ["Offset of field: XrSceneMeshVertexBufferMSFT::vertexCapacityInput"]
        [::std::mem::offset_of!(XrSceneMeshVertexBufferMSFT, vertexCapacityInput) - 16usize];
    ["Offset of field: XrSceneMeshVertexBufferMSFT::vertexCountOutput"]
        [::std::mem::offset_of!(XrSceneMeshVertexBufferMSFT, vertexCountOutput) - 20usize];
    ["Offset of field: XrSceneMeshVertexBufferMSFT::vertices"]
        [::std::mem::offset_of!(XrSceneMeshVertexBufferMSFT, vertices) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMeshIndicesUint32MSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub indexCapacityInput: u32,
    pub indexCountOutput: u32,
    pub indices: *mut u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneMeshIndicesUint32MSFT"]
        [::std::mem::size_of::<XrSceneMeshIndicesUint32MSFT>() - 32usize];
    ["Alignment of XrSceneMeshIndicesUint32MSFT"]
        [::std::mem::align_of::<XrSceneMeshIndicesUint32MSFT>() - 8usize];
    ["Offset of field: XrSceneMeshIndicesUint32MSFT::type_"]
        [::std::mem::offset_of!(XrSceneMeshIndicesUint32MSFT, type_) - 0usize];
    ["Offset of field: XrSceneMeshIndicesUint32MSFT::next"]
        [::std::mem::offset_of!(XrSceneMeshIndicesUint32MSFT, next) - 8usize];
    ["Offset of field: XrSceneMeshIndicesUint32MSFT::indexCapacityInput"]
        [::std::mem::offset_of!(XrSceneMeshIndicesUint32MSFT, indexCapacityInput) - 16usize];
    ["Offset of field: XrSceneMeshIndicesUint32MSFT::indexCountOutput"]
        [::std::mem::offset_of!(XrSceneMeshIndicesUint32MSFT, indexCountOutput) - 20usize];
    ["Offset of field: XrSceneMeshIndicesUint32MSFT::indices"]
        [::std::mem::offset_of!(XrSceneMeshIndicesUint32MSFT, indices) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMeshIndicesUint16MSFT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub indexCapacityInput: u32,
    pub indexCountOutput: u32,
    pub indices: *mut u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneMeshIndicesUint16MSFT"]
        [::std::mem::size_of::<XrSceneMeshIndicesUint16MSFT>() - 32usize];
    ["Alignment of XrSceneMeshIndicesUint16MSFT"]
        [::std::mem::align_of::<XrSceneMeshIndicesUint16MSFT>() - 8usize];
    ["Offset of field: XrSceneMeshIndicesUint16MSFT::type_"]
        [::std::mem::offset_of!(XrSceneMeshIndicesUint16MSFT, type_) - 0usize];
    ["Offset of field: XrSceneMeshIndicesUint16MSFT::next"]
        [::std::mem::offset_of!(XrSceneMeshIndicesUint16MSFT, next) - 8usize];
    ["Offset of field: XrSceneMeshIndicesUint16MSFT::indexCapacityInput"]
        [::std::mem::offset_of!(XrSceneMeshIndicesUint16MSFT, indexCapacityInput) - 16usize];
    ["Offset of field: XrSceneMeshIndicesUint16MSFT::indexCountOutput"]
        [::std::mem::offset_of!(XrSceneMeshIndicesUint16MSFT, indexCountOutput) - 20usize];
    ["Offset of field: XrSceneMeshIndicesUint16MSFT::indices"]
        [::std::mem::offset_of!(XrSceneMeshIndicesUint16MSFT, indices) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSerializedSceneFragmentDataGetInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub sceneFragmentId: XrUuidMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSerializedSceneFragmentDataGetInfoMSFT"]
        [::std::mem::size_of::<XrSerializedSceneFragmentDataGetInfoMSFT>() - 32usize];
    ["Alignment of XrSerializedSceneFragmentDataGetInfoMSFT"]
        [::std::mem::align_of::<XrSerializedSceneFragmentDataGetInfoMSFT>() - 8usize];
    ["Offset of field: XrSerializedSceneFragmentDataGetInfoMSFT::type_"]
        [::std::mem::offset_of!(XrSerializedSceneFragmentDataGetInfoMSFT, type_) - 0usize];
    ["Offset of field: XrSerializedSceneFragmentDataGetInfoMSFT::next"]
        [::std::mem::offset_of!(XrSerializedSceneFragmentDataGetInfoMSFT, next) - 8usize];
    ["Offset of field: XrSerializedSceneFragmentDataGetInfoMSFT::sceneFragmentId"][::std::mem::offset_of!(
        XrSerializedSceneFragmentDataGetInfoMSFT,
        sceneFragmentId
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrDeserializeSceneFragmentMSFT {
    pub bufferSize: u32,
    pub buffer: *const u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrDeserializeSceneFragmentMSFT"]
        [::std::mem::size_of::<XrDeserializeSceneFragmentMSFT>() - 16usize];
    ["Alignment of XrDeserializeSceneFragmentMSFT"]
        [::std::mem::align_of::<XrDeserializeSceneFragmentMSFT>() - 8usize];
    ["Offset of field: XrDeserializeSceneFragmentMSFT::bufferSize"]
        [::std::mem::offset_of!(XrDeserializeSceneFragmentMSFT, bufferSize) - 0usize];
    ["Offset of field: XrDeserializeSceneFragmentMSFT::buffer"]
        [::std::mem::offset_of!(XrDeserializeSceneFragmentMSFT, buffer) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneDeserializeInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub fragmentCount: u32,
    pub fragments: *const XrDeserializeSceneFragmentMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneDeserializeInfoMSFT"]
        [::std::mem::size_of::<XrSceneDeserializeInfoMSFT>() - 32usize];
    ["Alignment of XrSceneDeserializeInfoMSFT"]
        [::std::mem::align_of::<XrSceneDeserializeInfoMSFT>() - 8usize];
    ["Offset of field: XrSceneDeserializeInfoMSFT::type_"]
        [::std::mem::offset_of!(XrSceneDeserializeInfoMSFT, type_) - 0usize];
    ["Offset of field: XrSceneDeserializeInfoMSFT::next"]
        [::std::mem::offset_of!(XrSceneDeserializeInfoMSFT, next) - 8usize];
    ["Offset of field: XrSceneDeserializeInfoMSFT::fragmentCount"]
        [::std::mem::offset_of!(XrSceneDeserializeInfoMSFT, fragmentCount) - 16usize];
    ["Offset of field: XrSceneDeserializeInfoMSFT::fragments"]
        [::std::mem::offset_of!(XrSceneDeserializeInfoMSFT, fragments) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataDisplayRefreshRateChangedFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub fromDisplayRefreshRate: f32,
    pub toDisplayRefreshRate: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataDisplayRefreshRateChangedFB"]
        [::std::mem::size_of::<XrEventDataDisplayRefreshRateChangedFB>() - 24usize];
    ["Alignment of XrEventDataDisplayRefreshRateChangedFB"]
        [::std::mem::align_of::<XrEventDataDisplayRefreshRateChangedFB>() - 8usize];
    ["Offset of field: XrEventDataDisplayRefreshRateChangedFB::type_"]
        [::std::mem::offset_of!(XrEventDataDisplayRefreshRateChangedFB, type_) - 0usize];
    ["Offset of field: XrEventDataDisplayRefreshRateChangedFB::next"]
        [::std::mem::offset_of!(XrEventDataDisplayRefreshRateChangedFB, next) - 8usize];
    ["Offset of field: XrEventDataDisplayRefreshRateChangedFB::fromDisplayRefreshRate"][::std::mem::offset_of!(
        XrEventDataDisplayRefreshRateChangedFB,
        fromDisplayRefreshRate
    )
        - 16usize];
    ["Offset of field: XrEventDataDisplayRefreshRateChangedFB::toDisplayRefreshRate"][::std::mem::offset_of!(
        XrEventDataDisplayRefreshRateChangedFB,
        toDisplayRefreshRate
    ) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViveTrackerPathsHTCX {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub persistentPath: XrPath,
    pub rolePath: XrPath,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrViveTrackerPathsHTCX"][::std::mem::size_of::<XrViveTrackerPathsHTCX>() - 32usize];
    ["Alignment of XrViveTrackerPathsHTCX"]
        [::std::mem::align_of::<XrViveTrackerPathsHTCX>() - 8usize];
    ["Offset of field: XrViveTrackerPathsHTCX::type_"]
        [::std::mem::offset_of!(XrViveTrackerPathsHTCX, type_) - 0usize];
    ["Offset of field: XrViveTrackerPathsHTCX::next"]
        [::std::mem::offset_of!(XrViveTrackerPathsHTCX, next) - 8usize];
    ["Offset of field: XrViveTrackerPathsHTCX::persistentPath"]
        [::std::mem::offset_of!(XrViveTrackerPathsHTCX, persistentPath) - 16usize];
    ["Offset of field: XrViveTrackerPathsHTCX::rolePath"]
        [::std::mem::offset_of!(XrViveTrackerPathsHTCX, rolePath) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataViveTrackerConnectedHTCX {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub paths: *mut XrViveTrackerPathsHTCX,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataViveTrackerConnectedHTCX"]
        [::std::mem::size_of::<XrEventDataViveTrackerConnectedHTCX>() - 24usize];
    ["Alignment of XrEventDataViveTrackerConnectedHTCX"]
        [::std::mem::align_of::<XrEventDataViveTrackerConnectedHTCX>() - 8usize];
    ["Offset of field: XrEventDataViveTrackerConnectedHTCX::type_"]
        [::std::mem::offset_of!(XrEventDataViveTrackerConnectedHTCX, type_) - 0usize];
    ["Offset of field: XrEventDataViveTrackerConnectedHTCX::next"]
        [::std::mem::offset_of!(XrEventDataViveTrackerConnectedHTCX, next) - 8usize];
    ["Offset of field: XrEventDataViveTrackerConnectedHTCX::paths"]
        [::std::mem::offset_of!(XrEventDataViveTrackerConnectedHTCX, paths) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFacialTrackerHTC_T {
    _unused: [u8; 0],
}
pub type XrFacialTrackerHTC = *mut XrFacialTrackerHTC_T;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_LEFT_BLINK_HTC: XrEyeExpressionHTC = 0;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_LEFT_WIDE_HTC: XrEyeExpressionHTC = 1;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_RIGHT_BLINK_HTC: XrEyeExpressionHTC = 2;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_RIGHT_WIDE_HTC: XrEyeExpressionHTC = 3;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_LEFT_SQUEEZE_HTC: XrEyeExpressionHTC = 4;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_RIGHT_SQUEEZE_HTC: XrEyeExpressionHTC = 5;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_LEFT_DOWN_HTC: XrEyeExpressionHTC = 6;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_RIGHT_DOWN_HTC: XrEyeExpressionHTC = 7;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_LEFT_OUT_HTC: XrEyeExpressionHTC = 8;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_RIGHT_IN_HTC: XrEyeExpressionHTC = 9;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_LEFT_IN_HTC: XrEyeExpressionHTC = 10;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_RIGHT_OUT_HTC: XrEyeExpressionHTC = 11;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_LEFT_UP_HTC: XrEyeExpressionHTC = 12;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_RIGHT_UP_HTC: XrEyeExpressionHTC = 13;
pub const XrEyeExpressionHTC_XR_EYE_EXPRESSION_MAX_ENUM_HTC: XrEyeExpressionHTC = 2147483647;
pub type XrEyeExpressionHTC = ::std::os::raw::c_uint;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_JAW_RIGHT_HTC: XrLipExpressionHTC = 0;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_JAW_LEFT_HTC: XrLipExpressionHTC = 1;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_JAW_FORWARD_HTC: XrLipExpressionHTC = 2;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_JAW_OPEN_HTC: XrLipExpressionHTC = 3;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_APE_SHAPE_HTC: XrLipExpressionHTC = 4;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_UPPER_RIGHT_HTC: XrLipExpressionHTC = 5;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_UPPER_LEFT_HTC: XrLipExpressionHTC = 6;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_LOWER_RIGHT_HTC: XrLipExpressionHTC = 7;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_LOWER_LEFT_HTC: XrLipExpressionHTC = 8;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_UPPER_OVERTURN_HTC: XrLipExpressionHTC = 9;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_LOWER_OVERTURN_HTC: XrLipExpressionHTC = 10;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_POUT_HTC: XrLipExpressionHTC = 11;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_RAISER_RIGHT_HTC: XrLipExpressionHTC = 12;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_RAISER_LEFT_HTC: XrLipExpressionHTC = 13;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_STRETCHER_RIGHT_HTC: XrLipExpressionHTC = 14;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_STRETCHER_LEFT_HTC: XrLipExpressionHTC = 15;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_CHEEK_PUFF_RIGHT_HTC: XrLipExpressionHTC = 16;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_CHEEK_PUFF_LEFT_HTC: XrLipExpressionHTC = 17;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_CHEEK_SUCK_HTC: XrLipExpressionHTC = 18;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_UPPER_UPRIGHT_HTC: XrLipExpressionHTC = 19;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_UPPER_UPLEFT_HTC: XrLipExpressionHTC = 20;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_LOWER_DOWNRIGHT_HTC: XrLipExpressionHTC = 21;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_LOWER_DOWNLEFT_HTC: XrLipExpressionHTC = 22;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_UPPER_INSIDE_HTC: XrLipExpressionHTC = 23;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_LOWER_INSIDE_HTC: XrLipExpressionHTC = 24;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_LOWER_OVERLAY_HTC: XrLipExpressionHTC = 25;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_LONGSTEP1_HTC: XrLipExpressionHTC = 26;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_LEFT_HTC: XrLipExpressionHTC = 27;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_RIGHT_HTC: XrLipExpressionHTC = 28;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_UP_HTC: XrLipExpressionHTC = 29;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_DOWN_HTC: XrLipExpressionHTC = 30;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_ROLL_HTC: XrLipExpressionHTC = 31;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_LONGSTEP2_HTC: XrLipExpressionHTC = 32;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_UPRIGHT_MORPH_HTC: XrLipExpressionHTC = 33;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_UPLEFT_MORPH_HTC: XrLipExpressionHTC = 34;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_DOWNRIGHT_MORPH_HTC: XrLipExpressionHTC = 35;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_TONGUE_DOWNLEFT_MORPH_HTC: XrLipExpressionHTC = 36;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_SMILE_RIGHT_HTC: XrLipExpressionHTC = 12;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_SMILE_LEFT_HTC: XrLipExpressionHTC = 13;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_SAD_RIGHT_HTC: XrLipExpressionHTC = 14;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MOUTH_SAD_LEFT_HTC: XrLipExpressionHTC = 15;
pub const XrLipExpressionHTC_XR_LIP_EXPRESSION_MAX_ENUM_HTC: XrLipExpressionHTC = 2147483647;
pub type XrLipExpressionHTC = ::std::os::raw::c_uint;
pub const XrFacialTrackingTypeHTC_XR_FACIAL_TRACKING_TYPE_EYE_DEFAULT_HTC: XrFacialTrackingTypeHTC =
    1;
pub const XrFacialTrackingTypeHTC_XR_FACIAL_TRACKING_TYPE_LIP_DEFAULT_HTC: XrFacialTrackingTypeHTC =
    2;
pub const XrFacialTrackingTypeHTC_XR_FACIAL_TRACKING_TYPE_MAX_ENUM_HTC: XrFacialTrackingTypeHTC =
    2147483647;
pub type XrFacialTrackingTypeHTC = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemFacialTrackingPropertiesHTC {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportEyeFacialTracking: XrBool32,
    pub supportLipFacialTracking: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemFacialTrackingPropertiesHTC"]
        [::std::mem::size_of::<XrSystemFacialTrackingPropertiesHTC>() - 24usize];
    ["Alignment of XrSystemFacialTrackingPropertiesHTC"]
        [::std::mem::align_of::<XrSystemFacialTrackingPropertiesHTC>() - 8usize];
    ["Offset of field: XrSystemFacialTrackingPropertiesHTC::type_"]
        [::std::mem::offset_of!(XrSystemFacialTrackingPropertiesHTC, type_) - 0usize];
    ["Offset of field: XrSystemFacialTrackingPropertiesHTC::next"]
        [::std::mem::offset_of!(XrSystemFacialTrackingPropertiesHTC, next) - 8usize];
    ["Offset of field: XrSystemFacialTrackingPropertiesHTC::supportEyeFacialTracking"][::std::mem::offset_of!(
        XrSystemFacialTrackingPropertiesHTC,
        supportEyeFacialTracking
    ) - 16usize];
    ["Offset of field: XrSystemFacialTrackingPropertiesHTC::supportLipFacialTracking"][::std::mem::offset_of!(
        XrSystemFacialTrackingPropertiesHTC,
        supportLipFacialTracking
    ) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFacialExpressionsHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub isActive: XrBool32,
    pub sampleTime: XrTime,
    pub expressionCount: u32,
    pub expressionWeightings: *mut f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFacialExpressionsHTC"][::std::mem::size_of::<XrFacialExpressionsHTC>() - 48usize];
    ["Alignment of XrFacialExpressionsHTC"]
        [::std::mem::align_of::<XrFacialExpressionsHTC>() - 8usize];
    ["Offset of field: XrFacialExpressionsHTC::type_"]
        [::std::mem::offset_of!(XrFacialExpressionsHTC, type_) - 0usize];
    ["Offset of field: XrFacialExpressionsHTC::next"]
        [::std::mem::offset_of!(XrFacialExpressionsHTC, next) - 8usize];
    ["Offset of field: XrFacialExpressionsHTC::isActive"]
        [::std::mem::offset_of!(XrFacialExpressionsHTC, isActive) - 16usize];
    ["Offset of field: XrFacialExpressionsHTC::sampleTime"]
        [::std::mem::offset_of!(XrFacialExpressionsHTC, sampleTime) - 24usize];
    ["Offset of field: XrFacialExpressionsHTC::expressionCount"]
        [::std::mem::offset_of!(XrFacialExpressionsHTC, expressionCount) - 32usize];
    ["Offset of field: XrFacialExpressionsHTC::expressionWeightings"]
        [::std::mem::offset_of!(XrFacialExpressionsHTC, expressionWeightings) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFacialTrackerCreateInfoHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub facialTrackingType: XrFacialTrackingTypeHTC,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFacialTrackerCreateInfoHTC"]
        [::std::mem::size_of::<XrFacialTrackerCreateInfoHTC>() - 24usize];
    ["Alignment of XrFacialTrackerCreateInfoHTC"]
        [::std::mem::align_of::<XrFacialTrackerCreateInfoHTC>() - 8usize];
    ["Offset of field: XrFacialTrackerCreateInfoHTC::type_"]
        [::std::mem::offset_of!(XrFacialTrackerCreateInfoHTC, type_) - 0usize];
    ["Offset of field: XrFacialTrackerCreateInfoHTC::next"]
        [::std::mem::offset_of!(XrFacialTrackerCreateInfoHTC, next) - 8usize];
    ["Offset of field: XrFacialTrackerCreateInfoHTC::facialTrackingType"]
        [::std::mem::offset_of!(XrFacialTrackerCreateInfoHTC, facialTrackingType) - 16usize];
};
pub const XrColorSpaceFB_XR_COLOR_SPACE_UNMANAGED_FB: XrColorSpaceFB = 0;
pub const XrColorSpaceFB_XR_COLOR_SPACE_REC2020_FB: XrColorSpaceFB = 1;
pub const XrColorSpaceFB_XR_COLOR_SPACE_REC709_FB: XrColorSpaceFB = 2;
pub const XrColorSpaceFB_XR_COLOR_SPACE_RIFT_CV1_FB: XrColorSpaceFB = 3;
pub const XrColorSpaceFB_XR_COLOR_SPACE_RIFT_S_FB: XrColorSpaceFB = 4;
pub const XrColorSpaceFB_XR_COLOR_SPACE_QUEST_FB: XrColorSpaceFB = 5;
pub const XrColorSpaceFB_XR_COLOR_SPACE_P3_FB: XrColorSpaceFB = 6;
pub const XrColorSpaceFB_XR_COLOR_SPACE_ADOBE_RGB_FB: XrColorSpaceFB = 7;
pub const XrColorSpaceFB_XR_COLOR_SPACE_MAX_ENUM_FB: XrColorSpaceFB = 2147483647;
pub type XrColorSpaceFB = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemColorSpacePropertiesFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub colorSpace: XrColorSpaceFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemColorSpacePropertiesFB"]
        [::std::mem::size_of::<XrSystemColorSpacePropertiesFB>() - 24usize];
    ["Alignment of XrSystemColorSpacePropertiesFB"]
        [::std::mem::align_of::<XrSystemColorSpacePropertiesFB>() - 8usize];
    ["Offset of field: XrSystemColorSpacePropertiesFB::type_"]
        [::std::mem::offset_of!(XrSystemColorSpacePropertiesFB, type_) - 0usize];
    ["Offset of field: XrSystemColorSpacePropertiesFB::next"]
        [::std::mem::offset_of!(XrSystemColorSpacePropertiesFB, next) - 8usize];
    ["Offset of field: XrSystemColorSpacePropertiesFB::colorSpace"]
        [::std::mem::offset_of!(XrSystemColorSpacePropertiesFB, colorSpace) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVector4sFB {
    pub x: i16,
    pub y: i16,
    pub z: i16,
    pub w: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrVector4sFB"][::std::mem::size_of::<XrVector4sFB>() - 8usize];
    ["Alignment of XrVector4sFB"][::std::mem::align_of::<XrVector4sFB>() - 2usize];
    ["Offset of field: XrVector4sFB::x"][::std::mem::offset_of!(XrVector4sFB, x) - 0usize];
    ["Offset of field: XrVector4sFB::y"][::std::mem::offset_of!(XrVector4sFB, y) - 2usize];
    ["Offset of field: XrVector4sFB::z"][::std::mem::offset_of!(XrVector4sFB, z) - 4usize];
    ["Offset of field: XrVector4sFB::w"][::std::mem::offset_of!(XrVector4sFB, w) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandTrackingMeshFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub jointCapacityInput: u32,
    pub jointCountOutput: u32,
    pub jointBindPoses: *mut XrPosef,
    pub jointRadii: *mut f32,
    pub jointParents: *mut XrHandJointEXT,
    pub vertexCapacityInput: u32,
    pub vertexCountOutput: u32,
    pub vertexPositions: *mut XrVector3f,
    pub vertexNormals: *mut XrVector3f,
    pub vertexUVs: *mut XrVector2f,
    pub vertexBlendIndices: *mut XrVector4sFB,
    pub vertexBlendWeights: *mut XrVector4f,
    pub indexCapacityInput: u32,
    pub indexCountOutput: u32,
    pub indices: *mut i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHandTrackingMeshFB"][::std::mem::size_of::<XrHandTrackingMeshFB>() - 112usize];
    ["Alignment of XrHandTrackingMeshFB"][::std::mem::align_of::<XrHandTrackingMeshFB>() - 8usize];
    ["Offset of field: XrHandTrackingMeshFB::type_"]
        [::std::mem::offset_of!(XrHandTrackingMeshFB, type_) - 0usize];
    ["Offset of field: XrHandTrackingMeshFB::next"]
        [::std::mem::offset_of!(XrHandTrackingMeshFB, next) - 8usize];
    ["Offset of field: XrHandTrackingMeshFB::jointCapacityInput"]
        [::std::mem::offset_of!(XrHandTrackingMeshFB, jointCapacityInput) - 16usize];
    ["Offset of field: XrHandTrackingMeshFB::jointCountOutput"]
        [::std::mem::offset_of!(XrHandTrackingMeshFB, jointCountOutput) - 20usize];
    ["Offset of field: XrHandTrackingMeshFB::jointBindPoses"]
        [::std::mem::offset_of!(XrHandTrackingMeshFB, jointBindPoses) - 24usize];
    ["Offset of field: XrHandTrackingMeshFB::jointRadii"]
        [::std::mem::offset_of!(XrHandTrackingMeshFB, jointRadii) - 32usize];
    ["Offset of field: XrHandTrackingMeshFB::jointParents"]
        [::std::mem::offset_of!(XrHandTrackingMeshFB, jointParents) - 40usize];
    ["Offset of field: XrHandTrackingMeshFB::vertexCapacityInput"]
        [::std::mem::offset_of!(XrHandTrackingMeshFB, vertexCapacityInput) - 48usize];
    ["Offset of field: XrHandTrackingMeshFB::vertexCountOutput"]
        [::std::mem::offset_of!(XrHandTrackingMeshFB, vertexCountOutput) - 52usize];
    ["Offset of field: XrHandTrackingMeshFB::vertexPositions"]
        [::std::mem::offset_of!(XrHandTrackingMeshFB, vertexPositions) - 56usize];
    ["Offset of field: XrHandTrackingMeshFB::vertexNormals"]
        [::std::mem::offset_of!(XrHandTrackingMeshFB, vertexNormals) - 64usize];
    ["Offset of field: XrHandTrackingMeshFB::vertexUVs"]
        [::std::mem::offset_of!(XrHandTrackingMeshFB, vertexUVs) - 72usize];
    ["Offset of field: XrHandTrackingMeshFB::vertexBlendIndices"]
        [::std::mem::offset_of!(XrHandTrackingMeshFB, vertexBlendIndices) - 80usize];
    ["Offset of field: XrHandTrackingMeshFB::vertexBlendWeights"]
        [::std::mem::offset_of!(XrHandTrackingMeshFB, vertexBlendWeights) - 88usize];
    ["Offset of field: XrHandTrackingMeshFB::indexCapacityInput"]
        [::std::mem::offset_of!(XrHandTrackingMeshFB, indexCapacityInput) - 96usize];
    ["Offset of field: XrHandTrackingMeshFB::indexCountOutput"]
        [::std::mem::offset_of!(XrHandTrackingMeshFB, indexCountOutput) - 100usize];
    ["Offset of field: XrHandTrackingMeshFB::indices"]
        [::std::mem::offset_of!(XrHandTrackingMeshFB, indices) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandTrackingScaleFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub sensorOutput: f32,
    pub currentOutput: f32,
    pub overrideHandScale: XrBool32,
    pub overrideValueInput: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHandTrackingScaleFB"][::std::mem::size_of::<XrHandTrackingScaleFB>() - 32usize];
    ["Alignment of XrHandTrackingScaleFB"]
        [::std::mem::align_of::<XrHandTrackingScaleFB>() - 8usize];
    ["Offset of field: XrHandTrackingScaleFB::type_"]
        [::std::mem::offset_of!(XrHandTrackingScaleFB, type_) - 0usize];
    ["Offset of field: XrHandTrackingScaleFB::next"]
        [::std::mem::offset_of!(XrHandTrackingScaleFB, next) - 8usize];
    ["Offset of field: XrHandTrackingScaleFB::sensorOutput"]
        [::std::mem::offset_of!(XrHandTrackingScaleFB, sensorOutput) - 16usize];
    ["Offset of field: XrHandTrackingScaleFB::currentOutput"]
        [::std::mem::offset_of!(XrHandTrackingScaleFB, currentOutput) - 20usize];
    ["Offset of field: XrHandTrackingScaleFB::overrideHandScale"]
        [::std::mem::offset_of!(XrHandTrackingScaleFB, overrideHandScale) - 24usize];
    ["Offset of field: XrHandTrackingScaleFB::overrideValueInput"]
        [::std::mem::offset_of!(XrHandTrackingScaleFB, overrideValueInput) - 28usize];
};
pub type XrHandTrackingAimFlagsFB = XrFlags64;
pub const XR_HAND_TRACKING_AIM_COMPUTED_BIT_FB: XrHandTrackingAimFlagsFB = 1;
pub const XR_HAND_TRACKING_AIM_VALID_BIT_FB: XrHandTrackingAimFlagsFB = 2;
pub const XR_HAND_TRACKING_AIM_INDEX_PINCHING_BIT_FB: XrHandTrackingAimFlagsFB = 4;
pub const XR_HAND_TRACKING_AIM_MIDDLE_PINCHING_BIT_FB: XrHandTrackingAimFlagsFB = 8;
pub const XR_HAND_TRACKING_AIM_RING_PINCHING_BIT_FB: XrHandTrackingAimFlagsFB = 16;
pub const XR_HAND_TRACKING_AIM_LITTLE_PINCHING_BIT_FB: XrHandTrackingAimFlagsFB = 32;
pub const XR_HAND_TRACKING_AIM_SYSTEM_GESTURE_BIT_FB: XrHandTrackingAimFlagsFB = 64;
pub const XR_HAND_TRACKING_AIM_DOMINANT_HAND_BIT_FB: XrHandTrackingAimFlagsFB = 128;
pub const XR_HAND_TRACKING_AIM_MENU_PRESSED_BIT_FB: XrHandTrackingAimFlagsFB = 256;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandTrackingAimStateFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub status: XrHandTrackingAimFlagsFB,
    pub aimPose: XrPosef,
    pub pinchStrengthIndex: f32,
    pub pinchStrengthMiddle: f32,
    pub pinchStrengthRing: f32,
    pub pinchStrengthLittle: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHandTrackingAimStateFB"]
        [::std::mem::size_of::<XrHandTrackingAimStateFB>() - 72usize];
    ["Alignment of XrHandTrackingAimStateFB"]
        [::std::mem::align_of::<XrHandTrackingAimStateFB>() - 8usize];
    ["Offset of field: XrHandTrackingAimStateFB::type_"]
        [::std::mem::offset_of!(XrHandTrackingAimStateFB, type_) - 0usize];
    ["Offset of field: XrHandTrackingAimStateFB::next"]
        [::std::mem::offset_of!(XrHandTrackingAimStateFB, next) - 8usize];
    ["Offset of field: XrHandTrackingAimStateFB::status"]
        [::std::mem::offset_of!(XrHandTrackingAimStateFB, status) - 16usize];
    ["Offset of field: XrHandTrackingAimStateFB::aimPose"]
        [::std::mem::offset_of!(XrHandTrackingAimStateFB, aimPose) - 24usize];
    ["Offset of field: XrHandTrackingAimStateFB::pinchStrengthIndex"]
        [::std::mem::offset_of!(XrHandTrackingAimStateFB, pinchStrengthIndex) - 52usize];
    ["Offset of field: XrHandTrackingAimStateFB::pinchStrengthMiddle"]
        [::std::mem::offset_of!(XrHandTrackingAimStateFB, pinchStrengthMiddle) - 56usize];
    ["Offset of field: XrHandTrackingAimStateFB::pinchStrengthRing"]
        [::std::mem::offset_of!(XrHandTrackingAimStateFB, pinchStrengthRing) - 60usize];
    ["Offset of field: XrHandTrackingAimStateFB::pinchStrengthLittle"]
        [::std::mem::offset_of!(XrHandTrackingAimStateFB, pinchStrengthLittle) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandCapsuleFB {
    pub points: [XrVector3f; 2usize],
    pub radius: f32,
    pub joint: XrHandJointEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHandCapsuleFB"][::std::mem::size_of::<XrHandCapsuleFB>() - 32usize];
    ["Alignment of XrHandCapsuleFB"][::std::mem::align_of::<XrHandCapsuleFB>() - 4usize];
    ["Offset of field: XrHandCapsuleFB::points"]
        [::std::mem::offset_of!(XrHandCapsuleFB, points) - 0usize];
    ["Offset of field: XrHandCapsuleFB::radius"]
        [::std::mem::offset_of!(XrHandCapsuleFB, radius) - 24usize];
    ["Offset of field: XrHandCapsuleFB::joint"]
        [::std::mem::offset_of!(XrHandCapsuleFB, joint) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandTrackingCapsulesStateFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub capsules: [XrHandCapsuleFB; 19usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHandTrackingCapsulesStateFB"]
        [::std::mem::size_of::<XrHandTrackingCapsulesStateFB>() - 624usize];
    ["Alignment of XrHandTrackingCapsulesStateFB"]
        [::std::mem::align_of::<XrHandTrackingCapsulesStateFB>() - 8usize];
    ["Offset of field: XrHandTrackingCapsulesStateFB::type_"]
        [::std::mem::offset_of!(XrHandTrackingCapsulesStateFB, type_) - 0usize];
    ["Offset of field: XrHandTrackingCapsulesStateFB::next"]
        [::std::mem::offset_of!(XrHandTrackingCapsulesStateFB, next) - 8usize];
    ["Offset of field: XrHandTrackingCapsulesStateFB::capsules"]
        [::std::mem::offset_of!(XrHandTrackingCapsulesStateFB, capsules) - 16usize];
};
pub type XrAsyncRequestIdFB = u64;
pub const XrSpaceComponentTypeFB_XR_SPACE_COMPONENT_TYPE_LOCATABLE_FB: XrSpaceComponentTypeFB = 0;
pub const XrSpaceComponentTypeFB_XR_SPACE_COMPONENT_TYPE_STORABLE_FB: XrSpaceComponentTypeFB = 1;
pub const XrSpaceComponentTypeFB_XR_SPACE_COMPONENT_TYPE_SHARABLE_FB: XrSpaceComponentTypeFB = 2;
pub const XrSpaceComponentTypeFB_XR_SPACE_COMPONENT_TYPE_BOUNDED_2D_FB: XrSpaceComponentTypeFB = 3;
pub const XrSpaceComponentTypeFB_XR_SPACE_COMPONENT_TYPE_BOUNDED_3D_FB: XrSpaceComponentTypeFB = 4;
pub const XrSpaceComponentTypeFB_XR_SPACE_COMPONENT_TYPE_SEMANTIC_LABELS_FB:
    XrSpaceComponentTypeFB = 5;
pub const XrSpaceComponentTypeFB_XR_SPACE_COMPONENT_TYPE_ROOM_LAYOUT_FB: XrSpaceComponentTypeFB = 6;
pub const XrSpaceComponentTypeFB_XR_SPACE_COMPONENT_TYPE_SPACE_CONTAINER_FB:
    XrSpaceComponentTypeFB = 7;
pub const XrSpaceComponentTypeFB_XR_SPACE_COMPONENT_TYPE_TRIANGLE_MESH_META:
    XrSpaceComponentTypeFB = 1000269000;
pub const XrSpaceComponentTypeFB_XR_SPACE_COMPONENT_TYPE_MAX_ENUM_FB: XrSpaceComponentTypeFB =
    2147483647;
pub type XrSpaceComponentTypeFB = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemSpatialEntityPropertiesFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub supportsSpatialEntity: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemSpatialEntityPropertiesFB"]
        [::std::mem::size_of::<XrSystemSpatialEntityPropertiesFB>() - 24usize];
    ["Alignment of XrSystemSpatialEntityPropertiesFB"]
        [::std::mem::align_of::<XrSystemSpatialEntityPropertiesFB>() - 8usize];
    ["Offset of field: XrSystemSpatialEntityPropertiesFB::type_"]
        [::std::mem::offset_of!(XrSystemSpatialEntityPropertiesFB, type_) - 0usize];
    ["Offset of field: XrSystemSpatialEntityPropertiesFB::next"]
        [::std::mem::offset_of!(XrSystemSpatialEntityPropertiesFB, next) - 8usize];
    ["Offset of field: XrSystemSpatialEntityPropertiesFB::supportsSpatialEntity"][::std::mem::offset_of!(
        XrSystemSpatialEntityPropertiesFB,
        supportsSpatialEntity
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub space: XrSpace,
    pub poseInSpace: XrPosef,
    pub time: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorCreateInfoFB"]
        [::std::mem::size_of::<XrSpatialAnchorCreateInfoFB>() - 64usize];
    ["Alignment of XrSpatialAnchorCreateInfoFB"]
        [::std::mem::align_of::<XrSpatialAnchorCreateInfoFB>() - 8usize];
    ["Offset of field: XrSpatialAnchorCreateInfoFB::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorCreateInfoFB, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorCreateInfoFB::next"]
        [::std::mem::offset_of!(XrSpatialAnchorCreateInfoFB, next) - 8usize];
    ["Offset of field: XrSpatialAnchorCreateInfoFB::space"]
        [::std::mem::offset_of!(XrSpatialAnchorCreateInfoFB, space) - 16usize];
    ["Offset of field: XrSpatialAnchorCreateInfoFB::poseInSpace"]
        [::std::mem::offset_of!(XrSpatialAnchorCreateInfoFB, poseInSpace) - 24usize];
    ["Offset of field: XrSpatialAnchorCreateInfoFB::time"]
        [::std::mem::offset_of!(XrSpatialAnchorCreateInfoFB, time) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceComponentStatusSetInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub componentType: XrSpaceComponentTypeFB,
    pub enabled: XrBool32,
    pub timeout: XrDuration,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceComponentStatusSetInfoFB"]
        [::std::mem::size_of::<XrSpaceComponentStatusSetInfoFB>() - 32usize];
    ["Alignment of XrSpaceComponentStatusSetInfoFB"]
        [::std::mem::align_of::<XrSpaceComponentStatusSetInfoFB>() - 8usize];
    ["Offset of field: XrSpaceComponentStatusSetInfoFB::type_"]
        [::std::mem::offset_of!(XrSpaceComponentStatusSetInfoFB, type_) - 0usize];
    ["Offset of field: XrSpaceComponentStatusSetInfoFB::next"]
        [::std::mem::offset_of!(XrSpaceComponentStatusSetInfoFB, next) - 8usize];
    ["Offset of field: XrSpaceComponentStatusSetInfoFB::componentType"]
        [::std::mem::offset_of!(XrSpaceComponentStatusSetInfoFB, componentType) - 16usize];
    ["Offset of field: XrSpaceComponentStatusSetInfoFB::enabled"]
        [::std::mem::offset_of!(XrSpaceComponentStatusSetInfoFB, enabled) - 20usize];
    ["Offset of field: XrSpaceComponentStatusSetInfoFB::timeout"]
        [::std::mem::offset_of!(XrSpaceComponentStatusSetInfoFB, timeout) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceComponentStatusFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub enabled: XrBool32,
    pub changePending: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceComponentStatusFB"]
        [::std::mem::size_of::<XrSpaceComponentStatusFB>() - 24usize];
    ["Alignment of XrSpaceComponentStatusFB"]
        [::std::mem::align_of::<XrSpaceComponentStatusFB>() - 8usize];
    ["Offset of field: XrSpaceComponentStatusFB::type_"]
        [::std::mem::offset_of!(XrSpaceComponentStatusFB, type_) - 0usize];
    ["Offset of field: XrSpaceComponentStatusFB::next"]
        [::std::mem::offset_of!(XrSpaceComponentStatusFB, next) - 8usize];
    ["Offset of field: XrSpaceComponentStatusFB::enabled"]
        [::std::mem::offset_of!(XrSpaceComponentStatusFB, enabled) - 16usize];
    ["Offset of field: XrSpaceComponentStatusFB::changePending"]
        [::std::mem::offset_of!(XrSpaceComponentStatusFB, changePending) - 20usize];
};
pub type XrUuidEXT = XrUuid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataSpatialAnchorCreateCompleteFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestId: XrAsyncRequestIdFB,
    pub result: XrResult,
    pub space: XrSpace,
    pub uuid: XrUuidEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataSpatialAnchorCreateCompleteFB"]
        [::std::mem::size_of::<XrEventDataSpatialAnchorCreateCompleteFB>() - 56usize];
    ["Alignment of XrEventDataSpatialAnchorCreateCompleteFB"]
        [::std::mem::align_of::<XrEventDataSpatialAnchorCreateCompleteFB>() - 8usize];
    ["Offset of field: XrEventDataSpatialAnchorCreateCompleteFB::type_"]
        [::std::mem::offset_of!(XrEventDataSpatialAnchorCreateCompleteFB, type_) - 0usize];
    ["Offset of field: XrEventDataSpatialAnchorCreateCompleteFB::next"]
        [::std::mem::offset_of!(XrEventDataSpatialAnchorCreateCompleteFB, next) - 8usize];
    ["Offset of field: XrEventDataSpatialAnchorCreateCompleteFB::requestId"]
        [::std::mem::offset_of!(XrEventDataSpatialAnchorCreateCompleteFB, requestId) - 16usize];
    ["Offset of field: XrEventDataSpatialAnchorCreateCompleteFB::result"]
        [::std::mem::offset_of!(XrEventDataSpatialAnchorCreateCompleteFB, result) - 24usize];
    ["Offset of field: XrEventDataSpatialAnchorCreateCompleteFB::space"]
        [::std::mem::offset_of!(XrEventDataSpatialAnchorCreateCompleteFB, space) - 32usize];
    ["Offset of field: XrEventDataSpatialAnchorCreateCompleteFB::uuid"]
        [::std::mem::offset_of!(XrEventDataSpatialAnchorCreateCompleteFB, uuid) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataSpaceSetStatusCompleteFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestId: XrAsyncRequestIdFB,
    pub result: XrResult,
    pub space: XrSpace,
    pub uuid: XrUuidEXT,
    pub componentType: XrSpaceComponentTypeFB,
    pub enabled: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataSpaceSetStatusCompleteFB"]
        [::std::mem::size_of::<XrEventDataSpaceSetStatusCompleteFB>() - 64usize];
    ["Alignment of XrEventDataSpaceSetStatusCompleteFB"]
        [::std::mem::align_of::<XrEventDataSpaceSetStatusCompleteFB>() - 8usize];
    ["Offset of field: XrEventDataSpaceSetStatusCompleteFB::type_"]
        [::std::mem::offset_of!(XrEventDataSpaceSetStatusCompleteFB, type_) - 0usize];
    ["Offset of field: XrEventDataSpaceSetStatusCompleteFB::next"]
        [::std::mem::offset_of!(XrEventDataSpaceSetStatusCompleteFB, next) - 8usize];
    ["Offset of field: XrEventDataSpaceSetStatusCompleteFB::requestId"]
        [::std::mem::offset_of!(XrEventDataSpaceSetStatusCompleteFB, requestId) - 16usize];
    ["Offset of field: XrEventDataSpaceSetStatusCompleteFB::result"]
        [::std::mem::offset_of!(XrEventDataSpaceSetStatusCompleteFB, result) - 24usize];
    ["Offset of field: XrEventDataSpaceSetStatusCompleteFB::space"]
        [::std::mem::offset_of!(XrEventDataSpaceSetStatusCompleteFB, space) - 32usize];
    ["Offset of field: XrEventDataSpaceSetStatusCompleteFB::uuid"]
        [::std::mem::offset_of!(XrEventDataSpaceSetStatusCompleteFB, uuid) - 40usize];
    ["Offset of field: XrEventDataSpaceSetStatusCompleteFB::componentType"]
        [::std::mem::offset_of!(XrEventDataSpaceSetStatusCompleteFB, componentType) - 56usize];
    ["Offset of field: XrEventDataSpaceSetStatusCompleteFB::enabled"]
        [::std::mem::offset_of!(XrEventDataSpaceSetStatusCompleteFB, enabled) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFoveationProfileFB_T {
    _unused: [u8; 0],
}
pub type XrFoveationProfileFB = *mut XrFoveationProfileFB_T;
pub type XrSwapchainCreateFoveationFlagsFB = XrFlags64;
pub const XR_SWAPCHAIN_CREATE_FOVEATION_SCALED_BIN_BIT_FB: XrSwapchainCreateFoveationFlagsFB = 1;
pub const XR_SWAPCHAIN_CREATE_FOVEATION_FRAGMENT_DENSITY_MAP_BIT_FB:
    XrSwapchainCreateFoveationFlagsFB = 2;
pub type XrSwapchainStateFoveationFlagsFB = XrFlags64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFoveationProfileCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFoveationProfileCreateInfoFB"]
        [::std::mem::size_of::<XrFoveationProfileCreateInfoFB>() - 16usize];
    ["Alignment of XrFoveationProfileCreateInfoFB"]
        [::std::mem::align_of::<XrFoveationProfileCreateInfoFB>() - 8usize];
    ["Offset of field: XrFoveationProfileCreateInfoFB::type_"]
        [::std::mem::offset_of!(XrFoveationProfileCreateInfoFB, type_) - 0usize];
    ["Offset of field: XrFoveationProfileCreateInfoFB::next"]
        [::std::mem::offset_of!(XrFoveationProfileCreateInfoFB, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainCreateInfoFoveationFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub flags: XrSwapchainCreateFoveationFlagsFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSwapchainCreateInfoFoveationFB"]
        [::std::mem::size_of::<XrSwapchainCreateInfoFoveationFB>() - 24usize];
    ["Alignment of XrSwapchainCreateInfoFoveationFB"]
        [::std::mem::align_of::<XrSwapchainCreateInfoFoveationFB>() - 8usize];
    ["Offset of field: XrSwapchainCreateInfoFoveationFB::type_"]
        [::std::mem::offset_of!(XrSwapchainCreateInfoFoveationFB, type_) - 0usize];
    ["Offset of field: XrSwapchainCreateInfoFoveationFB::next"]
        [::std::mem::offset_of!(XrSwapchainCreateInfoFoveationFB, next) - 8usize];
    ["Offset of field: XrSwapchainCreateInfoFoveationFB::flags"]
        [::std::mem::offset_of!(XrSwapchainCreateInfoFoveationFB, flags) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSwapchainStateFoveationFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub flags: XrSwapchainStateFoveationFlagsFB,
    pub profile: XrFoveationProfileFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSwapchainStateFoveationFB"]
        [::std::mem::size_of::<XrSwapchainStateFoveationFB>() - 32usize];
    ["Alignment of XrSwapchainStateFoveationFB"]
        [::std::mem::align_of::<XrSwapchainStateFoveationFB>() - 8usize];
    ["Offset of field: XrSwapchainStateFoveationFB::type_"]
        [::std::mem::offset_of!(XrSwapchainStateFoveationFB, type_) - 0usize];
    ["Offset of field: XrSwapchainStateFoveationFB::next"]
        [::std::mem::offset_of!(XrSwapchainStateFoveationFB, next) - 8usize];
    ["Offset of field: XrSwapchainStateFoveationFB::flags"]
        [::std::mem::offset_of!(XrSwapchainStateFoveationFB, flags) - 16usize];
    ["Offset of field: XrSwapchainStateFoveationFB::profile"]
        [::std::mem::offset_of!(XrSwapchainStateFoveationFB, profile) - 24usize];
};
pub const XrFoveationLevelFB_XR_FOVEATION_LEVEL_NONE_FB: XrFoveationLevelFB = 0;
pub const XrFoveationLevelFB_XR_FOVEATION_LEVEL_LOW_FB: XrFoveationLevelFB = 1;
pub const XrFoveationLevelFB_XR_FOVEATION_LEVEL_MEDIUM_FB: XrFoveationLevelFB = 2;
pub const XrFoveationLevelFB_XR_FOVEATION_LEVEL_HIGH_FB: XrFoveationLevelFB = 3;
pub const XrFoveationLevelFB_XR_FOVEATION_LEVEL_MAX_ENUM_FB: XrFoveationLevelFB = 2147483647;
pub type XrFoveationLevelFB = ::std::os::raw::c_uint;
pub const XrFoveationDynamicFB_XR_FOVEATION_DYNAMIC_DISABLED_FB: XrFoveationDynamicFB = 0;
pub const XrFoveationDynamicFB_XR_FOVEATION_DYNAMIC_LEVEL_ENABLED_FB: XrFoveationDynamicFB = 1;
pub const XrFoveationDynamicFB_XR_FOVEATION_DYNAMIC_MAX_ENUM_FB: XrFoveationDynamicFB = 2147483647;
pub type XrFoveationDynamicFB = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFoveationLevelProfileCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub level: XrFoveationLevelFB,
    pub verticalOffset: f32,
    pub dynamic: XrFoveationDynamicFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFoveationLevelProfileCreateInfoFB"]
        [::std::mem::size_of::<XrFoveationLevelProfileCreateInfoFB>() - 32usize];
    ["Alignment of XrFoveationLevelProfileCreateInfoFB"]
        [::std::mem::align_of::<XrFoveationLevelProfileCreateInfoFB>() - 8usize];
    ["Offset of field: XrFoveationLevelProfileCreateInfoFB::type_"]
        [::std::mem::offset_of!(XrFoveationLevelProfileCreateInfoFB, type_) - 0usize];
    ["Offset of field: XrFoveationLevelProfileCreateInfoFB::next"]
        [::std::mem::offset_of!(XrFoveationLevelProfileCreateInfoFB, next) - 8usize];
    ["Offset of field: XrFoveationLevelProfileCreateInfoFB::level"]
        [::std::mem::offset_of!(XrFoveationLevelProfileCreateInfoFB, level) - 16usize];
    ["Offset of field: XrFoveationLevelProfileCreateInfoFB::verticalOffset"]
        [::std::mem::offset_of!(XrFoveationLevelProfileCreateInfoFB, verticalOffset) - 20usize];
    ["Offset of field: XrFoveationLevelProfileCreateInfoFB::dynamic"]
        [::std::mem::offset_of!(XrFoveationLevelProfileCreateInfoFB, dynamic) - 24usize];
};
pub type XrKeyboardTrackingFlagsFB = XrFlags64;
pub const XR_KEYBOARD_TRACKING_EXISTS_BIT_FB: XrKeyboardTrackingFlagsFB = 1;
pub const XR_KEYBOARD_TRACKING_LOCAL_BIT_FB: XrKeyboardTrackingFlagsFB = 2;
pub const XR_KEYBOARD_TRACKING_REMOTE_BIT_FB: XrKeyboardTrackingFlagsFB = 4;
pub const XR_KEYBOARD_TRACKING_CONNECTED_BIT_FB: XrKeyboardTrackingFlagsFB = 8;
pub type XrKeyboardTrackingQueryFlagsFB = XrFlags64;
pub const XR_KEYBOARD_TRACKING_QUERY_LOCAL_BIT_FB: XrKeyboardTrackingQueryFlagsFB = 2;
pub const XR_KEYBOARD_TRACKING_QUERY_REMOTE_BIT_FB: XrKeyboardTrackingQueryFlagsFB = 4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemKeyboardTrackingPropertiesFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsKeyboardTracking: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemKeyboardTrackingPropertiesFB"]
        [::std::mem::size_of::<XrSystemKeyboardTrackingPropertiesFB>() - 24usize];
    ["Alignment of XrSystemKeyboardTrackingPropertiesFB"]
        [::std::mem::align_of::<XrSystemKeyboardTrackingPropertiesFB>() - 8usize];
    ["Offset of field: XrSystemKeyboardTrackingPropertiesFB::type_"]
        [::std::mem::offset_of!(XrSystemKeyboardTrackingPropertiesFB, type_) - 0usize];
    ["Offset of field: XrSystemKeyboardTrackingPropertiesFB::next"]
        [::std::mem::offset_of!(XrSystemKeyboardTrackingPropertiesFB, next) - 8usize];
    ["Offset of field: XrSystemKeyboardTrackingPropertiesFB::supportsKeyboardTracking"][::std::mem::offset_of!(
        XrSystemKeyboardTrackingPropertiesFB,
        supportsKeyboardTracking
    )
        - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrKeyboardTrackingDescriptionFB {
    pub trackedKeyboardId: u64,
    pub size: XrVector3f,
    pub flags: XrKeyboardTrackingFlagsFB,
    pub name: [::std::os::raw::c_char; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrKeyboardTrackingDescriptionFB"]
        [::std::mem::size_of::<XrKeyboardTrackingDescriptionFB>() - 160usize];
    ["Alignment of XrKeyboardTrackingDescriptionFB"]
        [::std::mem::align_of::<XrKeyboardTrackingDescriptionFB>() - 8usize];
    ["Offset of field: XrKeyboardTrackingDescriptionFB::trackedKeyboardId"]
        [::std::mem::offset_of!(XrKeyboardTrackingDescriptionFB, trackedKeyboardId) - 0usize];
    ["Offset of field: XrKeyboardTrackingDescriptionFB::size"]
        [::std::mem::offset_of!(XrKeyboardTrackingDescriptionFB, size) - 8usize];
    ["Offset of field: XrKeyboardTrackingDescriptionFB::flags"]
        [::std::mem::offset_of!(XrKeyboardTrackingDescriptionFB, flags) - 24usize];
    ["Offset of field: XrKeyboardTrackingDescriptionFB::name"]
        [::std::mem::offset_of!(XrKeyboardTrackingDescriptionFB, name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrKeyboardSpaceCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub trackedKeyboardId: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrKeyboardSpaceCreateInfoFB"]
        [::std::mem::size_of::<XrKeyboardSpaceCreateInfoFB>() - 24usize];
    ["Alignment of XrKeyboardSpaceCreateInfoFB"]
        [::std::mem::align_of::<XrKeyboardSpaceCreateInfoFB>() - 8usize];
    ["Offset of field: XrKeyboardSpaceCreateInfoFB::type_"]
        [::std::mem::offset_of!(XrKeyboardSpaceCreateInfoFB, type_) - 0usize];
    ["Offset of field: XrKeyboardSpaceCreateInfoFB::next"]
        [::std::mem::offset_of!(XrKeyboardSpaceCreateInfoFB, next) - 8usize];
    ["Offset of field: XrKeyboardSpaceCreateInfoFB::trackedKeyboardId"]
        [::std::mem::offset_of!(XrKeyboardSpaceCreateInfoFB, trackedKeyboardId) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrKeyboardTrackingQueryFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub flags: XrKeyboardTrackingQueryFlagsFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrKeyboardTrackingQueryFB"]
        [::std::mem::size_of::<XrKeyboardTrackingQueryFB>() - 24usize];
    ["Alignment of XrKeyboardTrackingQueryFB"]
        [::std::mem::align_of::<XrKeyboardTrackingQueryFB>() - 8usize];
    ["Offset of field: XrKeyboardTrackingQueryFB::type_"]
        [::std::mem::offset_of!(XrKeyboardTrackingQueryFB, type_) - 0usize];
    ["Offset of field: XrKeyboardTrackingQueryFB::next"]
        [::std::mem::offset_of!(XrKeyboardTrackingQueryFB, next) - 8usize];
    ["Offset of field: XrKeyboardTrackingQueryFB::flags"]
        [::std::mem::offset_of!(XrKeyboardTrackingQueryFB, flags) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrTriangleMeshFB_T {
    _unused: [u8; 0],
}
pub type XrTriangleMeshFB = *mut XrTriangleMeshFB_T;
pub const XrWindingOrderFB_XR_WINDING_ORDER_UNKNOWN_FB: XrWindingOrderFB = 0;
pub const XrWindingOrderFB_XR_WINDING_ORDER_CW_FB: XrWindingOrderFB = 1;
pub const XrWindingOrderFB_XR_WINDING_ORDER_CCW_FB: XrWindingOrderFB = 2;
pub const XrWindingOrderFB_XR_WINDING_ORDER_MAX_ENUM_FB: XrWindingOrderFB = 2147483647;
pub type XrWindingOrderFB = ::std::os::raw::c_uint;
pub type XrTriangleMeshFlagsFB = XrFlags64;
pub const XR_TRIANGLE_MESH_MUTABLE_BIT_FB: XrTriangleMeshFlagsFB = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrTriangleMeshCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub flags: XrTriangleMeshFlagsFB,
    pub windingOrder: XrWindingOrderFB,
    pub vertexCount: u32,
    pub vertexBuffer: *const XrVector3f,
    pub triangleCount: u32,
    pub indexBuffer: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrTriangleMeshCreateInfoFB"]
        [::std::mem::size_of::<XrTriangleMeshCreateInfoFB>() - 56usize];
    ["Alignment of XrTriangleMeshCreateInfoFB"]
        [::std::mem::align_of::<XrTriangleMeshCreateInfoFB>() - 8usize];
    ["Offset of field: XrTriangleMeshCreateInfoFB::type_"]
        [::std::mem::offset_of!(XrTriangleMeshCreateInfoFB, type_) - 0usize];
    ["Offset of field: XrTriangleMeshCreateInfoFB::next"]
        [::std::mem::offset_of!(XrTriangleMeshCreateInfoFB, next) - 8usize];
    ["Offset of field: XrTriangleMeshCreateInfoFB::flags"]
        [::std::mem::offset_of!(XrTriangleMeshCreateInfoFB, flags) - 16usize];
    ["Offset of field: XrTriangleMeshCreateInfoFB::windingOrder"]
        [::std::mem::offset_of!(XrTriangleMeshCreateInfoFB, windingOrder) - 24usize];
    ["Offset of field: XrTriangleMeshCreateInfoFB::vertexCount"]
        [::std::mem::offset_of!(XrTriangleMeshCreateInfoFB, vertexCount) - 28usize];
    ["Offset of field: XrTriangleMeshCreateInfoFB::vertexBuffer"]
        [::std::mem::offset_of!(XrTriangleMeshCreateInfoFB, vertexBuffer) - 32usize];
    ["Offset of field: XrTriangleMeshCreateInfoFB::triangleCount"]
        [::std::mem::offset_of!(XrTriangleMeshCreateInfoFB, triangleCount) - 40usize];
    ["Offset of field: XrTriangleMeshCreateInfoFB::indexBuffer"]
        [::std::mem::offset_of!(XrTriangleMeshCreateInfoFB, indexBuffer) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughFB_T {
    _unused: [u8; 0],
}
pub type XrPassthroughFB = *mut XrPassthroughFB_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughLayerFB_T {
    _unused: [u8; 0],
}
pub type XrPassthroughLayerFB = *mut XrPassthroughLayerFB_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrGeometryInstanceFB_T {
    _unused: [u8; 0],
}
pub type XrGeometryInstanceFB = *mut XrGeometryInstanceFB_T;
pub const XrPassthroughLayerPurposeFB_XR_PASSTHROUGH_LAYER_PURPOSE_RECONSTRUCTION_FB:
    XrPassthroughLayerPurposeFB = 0;
pub const XrPassthroughLayerPurposeFB_XR_PASSTHROUGH_LAYER_PURPOSE_PROJECTED_FB:
    XrPassthroughLayerPurposeFB = 1;
pub const XrPassthroughLayerPurposeFB_XR_PASSTHROUGH_LAYER_PURPOSE_TRACKED_KEYBOARD_HANDS_FB:
    XrPassthroughLayerPurposeFB = 1000203001;
pub const XrPassthroughLayerPurposeFB_XR_PASSTHROUGH_LAYER_PURPOSE_TRACKED_KEYBOARD_MASKED_HANDS_FB : XrPassthroughLayerPurposeFB = 1000203002 ;
pub const XrPassthroughLayerPurposeFB_XR_PASSTHROUGH_LAYER_PURPOSE_MAX_ENUM_FB:
    XrPassthroughLayerPurposeFB = 2147483647;
pub type XrPassthroughLayerPurposeFB = ::std::os::raw::c_uint;
pub type XrPassthroughCapabilityFlagsFB = XrFlags64;
pub const XR_PASSTHROUGH_CAPABILITY_BIT_FB: XrPassthroughCapabilityFlagsFB = 1;
pub const XR_PASSTHROUGH_CAPABILITY_COLOR_BIT_FB: XrPassthroughCapabilityFlagsFB = 2;
pub const XR_PASSTHROUGH_CAPABILITY_LAYER_DEPTH_BIT_FB: XrPassthroughCapabilityFlagsFB = 4;
pub type XrPassthroughFlagsFB = XrFlags64;
pub const XR_PASSTHROUGH_IS_RUNNING_AT_CREATION_BIT_FB: XrPassthroughFlagsFB = 1;
pub const XR_PASSTHROUGH_LAYER_DEPTH_BIT_FB: XrPassthroughFlagsFB = 2;
pub type XrPassthroughStateChangedFlagsFB = XrFlags64;
pub const XR_PASSTHROUGH_STATE_CHANGED_REINIT_REQUIRED_BIT_FB: XrPassthroughStateChangedFlagsFB = 1;
pub const XR_PASSTHROUGH_STATE_CHANGED_NON_RECOVERABLE_ERROR_BIT_FB:
    XrPassthroughStateChangedFlagsFB = 2;
pub const XR_PASSTHROUGH_STATE_CHANGED_RECOVERABLE_ERROR_BIT_FB: XrPassthroughStateChangedFlagsFB =
    4;
pub const XR_PASSTHROUGH_STATE_CHANGED_RESTORED_ERROR_BIT_FB: XrPassthroughStateChangedFlagsFB = 8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemPassthroughPropertiesFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub supportsPassthrough: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemPassthroughPropertiesFB"]
        [::std::mem::size_of::<XrSystemPassthroughPropertiesFB>() - 24usize];
    ["Alignment of XrSystemPassthroughPropertiesFB"]
        [::std::mem::align_of::<XrSystemPassthroughPropertiesFB>() - 8usize];
    ["Offset of field: XrSystemPassthroughPropertiesFB::type_"]
        [::std::mem::offset_of!(XrSystemPassthroughPropertiesFB, type_) - 0usize];
    ["Offset of field: XrSystemPassthroughPropertiesFB::next"]
        [::std::mem::offset_of!(XrSystemPassthroughPropertiesFB, next) - 8usize];
    ["Offset of field: XrSystemPassthroughPropertiesFB::supportsPassthrough"]
        [::std::mem::offset_of!(XrSystemPassthroughPropertiesFB, supportsPassthrough) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemPassthroughProperties2FB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub capabilities: XrPassthroughCapabilityFlagsFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemPassthroughProperties2FB"]
        [::std::mem::size_of::<XrSystemPassthroughProperties2FB>() - 24usize];
    ["Alignment of XrSystemPassthroughProperties2FB"]
        [::std::mem::align_of::<XrSystemPassthroughProperties2FB>() - 8usize];
    ["Offset of field: XrSystemPassthroughProperties2FB::type_"]
        [::std::mem::offset_of!(XrSystemPassthroughProperties2FB, type_) - 0usize];
    ["Offset of field: XrSystemPassthroughProperties2FB::next"]
        [::std::mem::offset_of!(XrSystemPassthroughProperties2FB, next) - 8usize];
    ["Offset of field: XrSystemPassthroughProperties2FB::capabilities"]
        [::std::mem::offset_of!(XrSystemPassthroughProperties2FB, capabilities) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub flags: XrPassthroughFlagsFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPassthroughCreateInfoFB"]
        [::std::mem::size_of::<XrPassthroughCreateInfoFB>() - 24usize];
    ["Alignment of XrPassthroughCreateInfoFB"]
        [::std::mem::align_of::<XrPassthroughCreateInfoFB>() - 8usize];
    ["Offset of field: XrPassthroughCreateInfoFB::type_"]
        [::std::mem::offset_of!(XrPassthroughCreateInfoFB, type_) - 0usize];
    ["Offset of field: XrPassthroughCreateInfoFB::next"]
        [::std::mem::offset_of!(XrPassthroughCreateInfoFB, next) - 8usize];
    ["Offset of field: XrPassthroughCreateInfoFB::flags"]
        [::std::mem::offset_of!(XrPassthroughCreateInfoFB, flags) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughLayerCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub passthrough: XrPassthroughFB,
    pub flags: XrPassthroughFlagsFB,
    pub purpose: XrPassthroughLayerPurposeFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPassthroughLayerCreateInfoFB"]
        [::std::mem::size_of::<XrPassthroughLayerCreateInfoFB>() - 40usize];
    ["Alignment of XrPassthroughLayerCreateInfoFB"]
        [::std::mem::align_of::<XrPassthroughLayerCreateInfoFB>() - 8usize];
    ["Offset of field: XrPassthroughLayerCreateInfoFB::type_"]
        [::std::mem::offset_of!(XrPassthroughLayerCreateInfoFB, type_) - 0usize];
    ["Offset of field: XrPassthroughLayerCreateInfoFB::next"]
        [::std::mem::offset_of!(XrPassthroughLayerCreateInfoFB, next) - 8usize];
    ["Offset of field: XrPassthroughLayerCreateInfoFB::passthrough"]
        [::std::mem::offset_of!(XrPassthroughLayerCreateInfoFB, passthrough) - 16usize];
    ["Offset of field: XrPassthroughLayerCreateInfoFB::flags"]
        [::std::mem::offset_of!(XrPassthroughLayerCreateInfoFB, flags) - 24usize];
    ["Offset of field: XrPassthroughLayerCreateInfoFB::purpose"]
        [::std::mem::offset_of!(XrPassthroughLayerCreateInfoFB, purpose) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerPassthroughFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub flags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub layerHandle: XrPassthroughLayerFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCompositionLayerPassthroughFB"]
        [::std::mem::size_of::<XrCompositionLayerPassthroughFB>() - 40usize];
    ["Alignment of XrCompositionLayerPassthroughFB"]
        [::std::mem::align_of::<XrCompositionLayerPassthroughFB>() - 8usize];
    ["Offset of field: XrCompositionLayerPassthroughFB::type_"]
        [::std::mem::offset_of!(XrCompositionLayerPassthroughFB, type_) - 0usize];
    ["Offset of field: XrCompositionLayerPassthroughFB::next"]
        [::std::mem::offset_of!(XrCompositionLayerPassthroughFB, next) - 8usize];
    ["Offset of field: XrCompositionLayerPassthroughFB::flags"]
        [::std::mem::offset_of!(XrCompositionLayerPassthroughFB, flags) - 16usize];
    ["Offset of field: XrCompositionLayerPassthroughFB::space"]
        [::std::mem::offset_of!(XrCompositionLayerPassthroughFB, space) - 24usize];
    ["Offset of field: XrCompositionLayerPassthroughFB::layerHandle"]
        [::std::mem::offset_of!(XrCompositionLayerPassthroughFB, layerHandle) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrGeometryInstanceCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layer: XrPassthroughLayerFB,
    pub mesh: XrTriangleMeshFB,
    pub baseSpace: XrSpace,
    pub pose: XrPosef,
    pub scale: XrVector3f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrGeometryInstanceCreateInfoFB"]
        [::std::mem::size_of::<XrGeometryInstanceCreateInfoFB>() - 80usize];
    ["Alignment of XrGeometryInstanceCreateInfoFB"]
        [::std::mem::align_of::<XrGeometryInstanceCreateInfoFB>() - 8usize];
    ["Offset of field: XrGeometryInstanceCreateInfoFB::type_"]
        [::std::mem::offset_of!(XrGeometryInstanceCreateInfoFB, type_) - 0usize];
    ["Offset of field: XrGeometryInstanceCreateInfoFB::next"]
        [::std::mem::offset_of!(XrGeometryInstanceCreateInfoFB, next) - 8usize];
    ["Offset of field: XrGeometryInstanceCreateInfoFB::layer"]
        [::std::mem::offset_of!(XrGeometryInstanceCreateInfoFB, layer) - 16usize];
    ["Offset of field: XrGeometryInstanceCreateInfoFB::mesh"]
        [::std::mem::offset_of!(XrGeometryInstanceCreateInfoFB, mesh) - 24usize];
    ["Offset of field: XrGeometryInstanceCreateInfoFB::baseSpace"]
        [::std::mem::offset_of!(XrGeometryInstanceCreateInfoFB, baseSpace) - 32usize];
    ["Offset of field: XrGeometryInstanceCreateInfoFB::pose"]
        [::std::mem::offset_of!(XrGeometryInstanceCreateInfoFB, pose) - 40usize];
    ["Offset of field: XrGeometryInstanceCreateInfoFB::scale"]
        [::std::mem::offset_of!(XrGeometryInstanceCreateInfoFB, scale) - 68usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrGeometryInstanceTransformFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub baseSpace: XrSpace,
    pub time: XrTime,
    pub pose: XrPosef,
    pub scale: XrVector3f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrGeometryInstanceTransformFB"]
        [::std::mem::size_of::<XrGeometryInstanceTransformFB>() - 72usize];
    ["Alignment of XrGeometryInstanceTransformFB"]
        [::std::mem::align_of::<XrGeometryInstanceTransformFB>() - 8usize];
    ["Offset of field: XrGeometryInstanceTransformFB::type_"]
        [::std::mem::offset_of!(XrGeometryInstanceTransformFB, type_) - 0usize];
    ["Offset of field: XrGeometryInstanceTransformFB::next"]
        [::std::mem::offset_of!(XrGeometryInstanceTransformFB, next) - 8usize];
    ["Offset of field: XrGeometryInstanceTransformFB::baseSpace"]
        [::std::mem::offset_of!(XrGeometryInstanceTransformFB, baseSpace) - 16usize];
    ["Offset of field: XrGeometryInstanceTransformFB::time"]
        [::std::mem::offset_of!(XrGeometryInstanceTransformFB, time) - 24usize];
    ["Offset of field: XrGeometryInstanceTransformFB::pose"]
        [::std::mem::offset_of!(XrGeometryInstanceTransformFB, pose) - 32usize];
    ["Offset of field: XrGeometryInstanceTransformFB::scale"]
        [::std::mem::offset_of!(XrGeometryInstanceTransformFB, scale) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughStyleFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub textureOpacityFactor: f32,
    pub edgeColor: XrColor4f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPassthroughStyleFB"][::std::mem::size_of::<XrPassthroughStyleFB>() - 40usize];
    ["Alignment of XrPassthroughStyleFB"][::std::mem::align_of::<XrPassthroughStyleFB>() - 8usize];
    ["Offset of field: XrPassthroughStyleFB::type_"]
        [::std::mem::offset_of!(XrPassthroughStyleFB, type_) - 0usize];
    ["Offset of field: XrPassthroughStyleFB::next"]
        [::std::mem::offset_of!(XrPassthroughStyleFB, next) - 8usize];
    ["Offset of field: XrPassthroughStyleFB::textureOpacityFactor"]
        [::std::mem::offset_of!(XrPassthroughStyleFB, textureOpacityFactor) - 16usize];
    ["Offset of field: XrPassthroughStyleFB::edgeColor"]
        [::std::mem::offset_of!(XrPassthroughStyleFB, edgeColor) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughColorMapMonoToRgbaFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub textureColorMap: [XrColor4f; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPassthroughColorMapMonoToRgbaFB"]
        [::std::mem::size_of::<XrPassthroughColorMapMonoToRgbaFB>() - 4112usize];
    ["Alignment of XrPassthroughColorMapMonoToRgbaFB"]
        [::std::mem::align_of::<XrPassthroughColorMapMonoToRgbaFB>() - 8usize];
    ["Offset of field: XrPassthroughColorMapMonoToRgbaFB::type_"]
        [::std::mem::offset_of!(XrPassthroughColorMapMonoToRgbaFB, type_) - 0usize];
    ["Offset of field: XrPassthroughColorMapMonoToRgbaFB::next"]
        [::std::mem::offset_of!(XrPassthroughColorMapMonoToRgbaFB, next) - 8usize];
    ["Offset of field: XrPassthroughColorMapMonoToRgbaFB::textureColorMap"]
        [::std::mem::offset_of!(XrPassthroughColorMapMonoToRgbaFB, textureColorMap) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughColorMapMonoToMonoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub textureColorMap: [u8; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPassthroughColorMapMonoToMonoFB"]
        [::std::mem::size_of::<XrPassthroughColorMapMonoToMonoFB>() - 272usize];
    ["Alignment of XrPassthroughColorMapMonoToMonoFB"]
        [::std::mem::align_of::<XrPassthroughColorMapMonoToMonoFB>() - 8usize];
    ["Offset of field: XrPassthroughColorMapMonoToMonoFB::type_"]
        [::std::mem::offset_of!(XrPassthroughColorMapMonoToMonoFB, type_) - 0usize];
    ["Offset of field: XrPassthroughColorMapMonoToMonoFB::next"]
        [::std::mem::offset_of!(XrPassthroughColorMapMonoToMonoFB, next) - 8usize];
    ["Offset of field: XrPassthroughColorMapMonoToMonoFB::textureColorMap"]
        [::std::mem::offset_of!(XrPassthroughColorMapMonoToMonoFB, textureColorMap) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughBrightnessContrastSaturationFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub brightness: f32,
    pub contrast: f32,
    pub saturation: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPassthroughBrightnessContrastSaturationFB"]
        [::std::mem::size_of::<XrPassthroughBrightnessContrastSaturationFB>() - 32usize];
    ["Alignment of XrPassthroughBrightnessContrastSaturationFB"]
        [::std::mem::align_of::<XrPassthroughBrightnessContrastSaturationFB>() - 8usize];
    ["Offset of field: XrPassthroughBrightnessContrastSaturationFB::type_"]
        [::std::mem::offset_of!(XrPassthroughBrightnessContrastSaturationFB, type_) - 0usize];
    ["Offset of field: XrPassthroughBrightnessContrastSaturationFB::next"]
        [::std::mem::offset_of!(XrPassthroughBrightnessContrastSaturationFB, next) - 8usize];
    ["Offset of field: XrPassthroughBrightnessContrastSaturationFB::brightness"]
        [::std::mem::offset_of!(XrPassthroughBrightnessContrastSaturationFB, brightness) - 16usize];
    ["Offset of field: XrPassthroughBrightnessContrastSaturationFB::contrast"]
        [::std::mem::offset_of!(XrPassthroughBrightnessContrastSaturationFB, contrast) - 20usize];
    ["Offset of field: XrPassthroughBrightnessContrastSaturationFB::saturation"]
        [::std::mem::offset_of!(XrPassthroughBrightnessContrastSaturationFB, saturation) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataPassthroughStateChangedFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub flags: XrPassthroughStateChangedFlagsFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataPassthroughStateChangedFB"]
        [::std::mem::size_of::<XrEventDataPassthroughStateChangedFB>() - 24usize];
    ["Alignment of XrEventDataPassthroughStateChangedFB"]
        [::std::mem::align_of::<XrEventDataPassthroughStateChangedFB>() - 8usize];
    ["Offset of field: XrEventDataPassthroughStateChangedFB::type_"]
        [::std::mem::offset_of!(XrEventDataPassthroughStateChangedFB, type_) - 0usize];
    ["Offset of field: XrEventDataPassthroughStateChangedFB::next"]
        [::std::mem::offset_of!(XrEventDataPassthroughStateChangedFB, next) - 8usize];
    ["Offset of field: XrEventDataPassthroughStateChangedFB::flags"]
        [::std::mem::offset_of!(XrEventDataPassthroughStateChangedFB, flags) - 16usize];
};
pub type XrRenderModelKeyFB = u64;
pub type XrRenderModelFlagsFB = XrFlags64;
pub const XR_RENDER_MODEL_SUPPORTS_GLTF_2_0_SUBSET_1_BIT_FB: XrRenderModelFlagsFB = 1;
pub const XR_RENDER_MODEL_SUPPORTS_GLTF_2_0_SUBSET_2_BIT_FB: XrRenderModelFlagsFB = 2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRenderModelPathInfoFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub path: XrPath,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrRenderModelPathInfoFB"][::std::mem::size_of::<XrRenderModelPathInfoFB>() - 24usize];
    ["Alignment of XrRenderModelPathInfoFB"]
        [::std::mem::align_of::<XrRenderModelPathInfoFB>() - 8usize];
    ["Offset of field: XrRenderModelPathInfoFB::type_"]
        [::std::mem::offset_of!(XrRenderModelPathInfoFB, type_) - 0usize];
    ["Offset of field: XrRenderModelPathInfoFB::next"]
        [::std::mem::offset_of!(XrRenderModelPathInfoFB, next) - 8usize];
    ["Offset of field: XrRenderModelPathInfoFB::path"]
        [::std::mem::offset_of!(XrRenderModelPathInfoFB, path) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRenderModelPropertiesFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub vendorId: u32,
    pub modelName: [::std::os::raw::c_char; 64usize],
    pub modelKey: XrRenderModelKeyFB,
    pub modelVersion: u32,
    pub flags: XrRenderModelFlagsFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrRenderModelPropertiesFB"]
        [::std::mem::size_of::<XrRenderModelPropertiesFB>() - 112usize];
    ["Alignment of XrRenderModelPropertiesFB"]
        [::std::mem::align_of::<XrRenderModelPropertiesFB>() - 8usize];
    ["Offset of field: XrRenderModelPropertiesFB::type_"]
        [::std::mem::offset_of!(XrRenderModelPropertiesFB, type_) - 0usize];
    ["Offset of field: XrRenderModelPropertiesFB::next"]
        [::std::mem::offset_of!(XrRenderModelPropertiesFB, next) - 8usize];
    ["Offset of field: XrRenderModelPropertiesFB::vendorId"]
        [::std::mem::offset_of!(XrRenderModelPropertiesFB, vendorId) - 16usize];
    ["Offset of field: XrRenderModelPropertiesFB::modelName"]
        [::std::mem::offset_of!(XrRenderModelPropertiesFB, modelName) - 20usize];
    ["Offset of field: XrRenderModelPropertiesFB::modelKey"]
        [::std::mem::offset_of!(XrRenderModelPropertiesFB, modelKey) - 88usize];
    ["Offset of field: XrRenderModelPropertiesFB::modelVersion"]
        [::std::mem::offset_of!(XrRenderModelPropertiesFB, modelVersion) - 96usize];
    ["Offset of field: XrRenderModelPropertiesFB::flags"]
        [::std::mem::offset_of!(XrRenderModelPropertiesFB, flags) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRenderModelBufferFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub bufferCapacityInput: u32,
    pub bufferCountOutput: u32,
    pub buffer: *mut u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrRenderModelBufferFB"][::std::mem::size_of::<XrRenderModelBufferFB>() - 32usize];
    ["Alignment of XrRenderModelBufferFB"]
        [::std::mem::align_of::<XrRenderModelBufferFB>() - 8usize];
    ["Offset of field: XrRenderModelBufferFB::type_"]
        [::std::mem::offset_of!(XrRenderModelBufferFB, type_) - 0usize];
    ["Offset of field: XrRenderModelBufferFB::next"]
        [::std::mem::offset_of!(XrRenderModelBufferFB, next) - 8usize];
    ["Offset of field: XrRenderModelBufferFB::bufferCapacityInput"]
        [::std::mem::offset_of!(XrRenderModelBufferFB, bufferCapacityInput) - 16usize];
    ["Offset of field: XrRenderModelBufferFB::bufferCountOutput"]
        [::std::mem::offset_of!(XrRenderModelBufferFB, bufferCountOutput) - 20usize];
    ["Offset of field: XrRenderModelBufferFB::buffer"]
        [::std::mem::offset_of!(XrRenderModelBufferFB, buffer) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRenderModelLoadInfoFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub modelKey: XrRenderModelKeyFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrRenderModelLoadInfoFB"][::std::mem::size_of::<XrRenderModelLoadInfoFB>() - 24usize];
    ["Alignment of XrRenderModelLoadInfoFB"]
        [::std::mem::align_of::<XrRenderModelLoadInfoFB>() - 8usize];
    ["Offset of field: XrRenderModelLoadInfoFB::type_"]
        [::std::mem::offset_of!(XrRenderModelLoadInfoFB, type_) - 0usize];
    ["Offset of field: XrRenderModelLoadInfoFB::next"]
        [::std::mem::offset_of!(XrRenderModelLoadInfoFB, next) - 8usize];
    ["Offset of field: XrRenderModelLoadInfoFB::modelKey"]
        [::std::mem::offset_of!(XrRenderModelLoadInfoFB, modelKey) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemRenderModelPropertiesFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsRenderModelLoading: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemRenderModelPropertiesFB"]
        [::std::mem::size_of::<XrSystemRenderModelPropertiesFB>() - 24usize];
    ["Alignment of XrSystemRenderModelPropertiesFB"]
        [::std::mem::align_of::<XrSystemRenderModelPropertiesFB>() - 8usize];
    ["Offset of field: XrSystemRenderModelPropertiesFB::type_"]
        [::std::mem::offset_of!(XrSystemRenderModelPropertiesFB, type_) - 0usize];
    ["Offset of field: XrSystemRenderModelPropertiesFB::next"]
        [::std::mem::offset_of!(XrSystemRenderModelPropertiesFB, next) - 8usize];
    ["Offset of field: XrSystemRenderModelPropertiesFB::supportsRenderModelLoading"][::std::mem::offset_of!(
        XrSystemRenderModelPropertiesFB,
        supportsRenderModelLoading
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRenderModelCapabilitiesRequestFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub flags: XrRenderModelFlagsFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrRenderModelCapabilitiesRequestFB"]
        [::std::mem::size_of::<XrRenderModelCapabilitiesRequestFB>() - 24usize];
    ["Alignment of XrRenderModelCapabilitiesRequestFB"]
        [::std::mem::align_of::<XrRenderModelCapabilitiesRequestFB>() - 8usize];
    ["Offset of field: XrRenderModelCapabilitiesRequestFB::type_"]
        [::std::mem::offset_of!(XrRenderModelCapabilitiesRequestFB, type_) - 0usize];
    ["Offset of field: XrRenderModelCapabilitiesRequestFB::next"]
        [::std::mem::offset_of!(XrRenderModelCapabilitiesRequestFB, next) - 8usize];
    ["Offset of field: XrRenderModelCapabilitiesRequestFB::flags"]
        [::std::mem::offset_of!(XrRenderModelCapabilitiesRequestFB, flags) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrViewLocateFoveatedRenderingVARJO {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub foveatedRenderingActive: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrViewLocateFoveatedRenderingVARJO"]
        [::std::mem::size_of::<XrViewLocateFoveatedRenderingVARJO>() - 24usize];
    ["Alignment of XrViewLocateFoveatedRenderingVARJO"]
        [::std::mem::align_of::<XrViewLocateFoveatedRenderingVARJO>() - 8usize];
    ["Offset of field: XrViewLocateFoveatedRenderingVARJO::type_"]
        [::std::mem::offset_of!(XrViewLocateFoveatedRenderingVARJO, type_) - 0usize];
    ["Offset of field: XrViewLocateFoveatedRenderingVARJO::next"]
        [::std::mem::offset_of!(XrViewLocateFoveatedRenderingVARJO, next) - 8usize];
    ["Offset of field: XrViewLocateFoveatedRenderingVARJO::foveatedRenderingActive"][::std::mem::offset_of!(
        XrViewLocateFoveatedRenderingVARJO,
        foveatedRenderingActive
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFoveatedViewConfigurationViewVARJO {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub foveatedRenderingActive: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFoveatedViewConfigurationViewVARJO"]
        [::std::mem::size_of::<XrFoveatedViewConfigurationViewVARJO>() - 24usize];
    ["Alignment of XrFoveatedViewConfigurationViewVARJO"]
        [::std::mem::align_of::<XrFoveatedViewConfigurationViewVARJO>() - 8usize];
    ["Offset of field: XrFoveatedViewConfigurationViewVARJO::type_"]
        [::std::mem::offset_of!(XrFoveatedViewConfigurationViewVARJO, type_) - 0usize];
    ["Offset of field: XrFoveatedViewConfigurationViewVARJO::next"]
        [::std::mem::offset_of!(XrFoveatedViewConfigurationViewVARJO, next) - 8usize];
    ["Offset of field: XrFoveatedViewConfigurationViewVARJO::foveatedRenderingActive"][::std::mem::offset_of!(
        XrFoveatedViewConfigurationViewVARJO,
        foveatedRenderingActive
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemFoveatedRenderingPropertiesVARJO {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsFoveatedRendering: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemFoveatedRenderingPropertiesVARJO"]
        [::std::mem::size_of::<XrSystemFoveatedRenderingPropertiesVARJO>() - 24usize];
    ["Alignment of XrSystemFoveatedRenderingPropertiesVARJO"]
        [::std::mem::align_of::<XrSystemFoveatedRenderingPropertiesVARJO>() - 8usize];
    ["Offset of field: XrSystemFoveatedRenderingPropertiesVARJO::type_"]
        [::std::mem::offset_of!(XrSystemFoveatedRenderingPropertiesVARJO, type_) - 0usize];
    ["Offset of field: XrSystemFoveatedRenderingPropertiesVARJO::next"]
        [::std::mem::offset_of!(XrSystemFoveatedRenderingPropertiesVARJO, next) - 8usize];
    ["Offset of field: XrSystemFoveatedRenderingPropertiesVARJO::supportsFoveatedRendering"][::std::mem::offset_of!(
        XrSystemFoveatedRenderingPropertiesVARJO,
        supportsFoveatedRendering
    )
        - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerDepthTestVARJO {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub depthTestRangeNearZ: f32,
    pub depthTestRangeFarZ: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCompositionLayerDepthTestVARJO"]
        [::std::mem::size_of::<XrCompositionLayerDepthTestVARJO>() - 24usize];
    ["Alignment of XrCompositionLayerDepthTestVARJO"]
        [::std::mem::align_of::<XrCompositionLayerDepthTestVARJO>() - 8usize];
    ["Offset of field: XrCompositionLayerDepthTestVARJO::type_"]
        [::std::mem::offset_of!(XrCompositionLayerDepthTestVARJO, type_) - 0usize];
    ["Offset of field: XrCompositionLayerDepthTestVARJO::next"]
        [::std::mem::offset_of!(XrCompositionLayerDepthTestVARJO, next) - 8usize];
    ["Offset of field: XrCompositionLayerDepthTestVARJO::depthTestRangeNearZ"]
        [::std::mem::offset_of!(XrCompositionLayerDepthTestVARJO, depthTestRangeNearZ) - 16usize];
    ["Offset of field: XrCompositionLayerDepthTestVARJO::depthTestRangeFarZ"]
        [::std::mem::offset_of!(XrCompositionLayerDepthTestVARJO, depthTestRangeFarZ) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemMarkerTrackingPropertiesVARJO {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsMarkerTracking: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemMarkerTrackingPropertiesVARJO"]
        [::std::mem::size_of::<XrSystemMarkerTrackingPropertiesVARJO>() - 24usize];
    ["Alignment of XrSystemMarkerTrackingPropertiesVARJO"]
        [::std::mem::align_of::<XrSystemMarkerTrackingPropertiesVARJO>() - 8usize];
    ["Offset of field: XrSystemMarkerTrackingPropertiesVARJO::type_"]
        [::std::mem::offset_of!(XrSystemMarkerTrackingPropertiesVARJO, type_) - 0usize];
    ["Offset of field: XrSystemMarkerTrackingPropertiesVARJO::next"]
        [::std::mem::offset_of!(XrSystemMarkerTrackingPropertiesVARJO, next) - 8usize];
    ["Offset of field: XrSystemMarkerTrackingPropertiesVARJO::supportsMarkerTracking"][::std::mem::offset_of!(
        XrSystemMarkerTrackingPropertiesVARJO,
        supportsMarkerTracking
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataMarkerTrackingUpdateVARJO {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub markerId: u64,
    pub isActive: XrBool32,
    pub isPredicted: XrBool32,
    pub time: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataMarkerTrackingUpdateVARJO"]
        [::std::mem::size_of::<XrEventDataMarkerTrackingUpdateVARJO>() - 40usize];
    ["Alignment of XrEventDataMarkerTrackingUpdateVARJO"]
        [::std::mem::align_of::<XrEventDataMarkerTrackingUpdateVARJO>() - 8usize];
    ["Offset of field: XrEventDataMarkerTrackingUpdateVARJO::type_"]
        [::std::mem::offset_of!(XrEventDataMarkerTrackingUpdateVARJO, type_) - 0usize];
    ["Offset of field: XrEventDataMarkerTrackingUpdateVARJO::next"]
        [::std::mem::offset_of!(XrEventDataMarkerTrackingUpdateVARJO, next) - 8usize];
    ["Offset of field: XrEventDataMarkerTrackingUpdateVARJO::markerId"]
        [::std::mem::offset_of!(XrEventDataMarkerTrackingUpdateVARJO, markerId) - 16usize];
    ["Offset of field: XrEventDataMarkerTrackingUpdateVARJO::isActive"]
        [::std::mem::offset_of!(XrEventDataMarkerTrackingUpdateVARJO, isActive) - 24usize];
    ["Offset of field: XrEventDataMarkerTrackingUpdateVARJO::isPredicted"]
        [::std::mem::offset_of!(XrEventDataMarkerTrackingUpdateVARJO, isPredicted) - 28usize];
    ["Offset of field: XrEventDataMarkerTrackingUpdateVARJO::time"]
        [::std::mem::offset_of!(XrEventDataMarkerTrackingUpdateVARJO, time) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMarkerSpaceCreateInfoVARJO {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub markerId: u64,
    pub poseInMarkerSpace: XrPosef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrMarkerSpaceCreateInfoVARJO"]
        [::std::mem::size_of::<XrMarkerSpaceCreateInfoVARJO>() - 56usize];
    ["Alignment of XrMarkerSpaceCreateInfoVARJO"]
        [::std::mem::align_of::<XrMarkerSpaceCreateInfoVARJO>() - 8usize];
    ["Offset of field: XrMarkerSpaceCreateInfoVARJO::type_"]
        [::std::mem::offset_of!(XrMarkerSpaceCreateInfoVARJO, type_) - 0usize];
    ["Offset of field: XrMarkerSpaceCreateInfoVARJO::next"]
        [::std::mem::offset_of!(XrMarkerSpaceCreateInfoVARJO, next) - 8usize];
    ["Offset of field: XrMarkerSpaceCreateInfoVARJO::markerId"]
        [::std::mem::offset_of!(XrMarkerSpaceCreateInfoVARJO, markerId) - 16usize];
    ["Offset of field: XrMarkerSpaceCreateInfoVARJO::poseInMarkerSpace"]
        [::std::mem::offset_of!(XrMarkerSpaceCreateInfoVARJO, poseInMarkerSpace) - 24usize];
};
pub type XrFrameEndInfoFlagsML = XrFlags64;
pub const XR_FRAME_END_INFO_PROTECTED_BIT_ML: XrFrameEndInfoFlagsML = 1;
pub const XR_FRAME_END_INFO_VIGNETTE_BIT_ML: XrFrameEndInfoFlagsML = 2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFrameEndInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub focusDistance: f32,
    pub flags: XrFrameEndInfoFlagsML,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFrameEndInfoML"][::std::mem::size_of::<XrFrameEndInfoML>() - 32usize];
    ["Alignment of XrFrameEndInfoML"][::std::mem::align_of::<XrFrameEndInfoML>() - 8usize];
    ["Offset of field: XrFrameEndInfoML::type_"]
        [::std::mem::offset_of!(XrFrameEndInfoML, type_) - 0usize];
    ["Offset of field: XrFrameEndInfoML::next"]
        [::std::mem::offset_of!(XrFrameEndInfoML, next) - 8usize];
    ["Offset of field: XrFrameEndInfoML::focusDistance"]
        [::std::mem::offset_of!(XrFrameEndInfoML, focusDistance) - 16usize];
    ["Offset of field: XrFrameEndInfoML::flags"]
        [::std::mem::offset_of!(XrFrameEndInfoML, flags) - 24usize];
};
pub type XrGlobalDimmerFrameEndInfoFlagsML = XrFlags64;
pub const XR_GLOBAL_DIMMER_FRAME_END_INFO_ENABLED_BIT_ML: XrGlobalDimmerFrameEndInfoFlagsML = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrGlobalDimmerFrameEndInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub dimmerValue: f32,
    pub flags: XrGlobalDimmerFrameEndInfoFlagsML,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrGlobalDimmerFrameEndInfoML"]
        [::std::mem::size_of::<XrGlobalDimmerFrameEndInfoML>() - 32usize];
    ["Alignment of XrGlobalDimmerFrameEndInfoML"]
        [::std::mem::align_of::<XrGlobalDimmerFrameEndInfoML>() - 8usize];
    ["Offset of field: XrGlobalDimmerFrameEndInfoML::type_"]
        [::std::mem::offset_of!(XrGlobalDimmerFrameEndInfoML, type_) - 0usize];
    ["Offset of field: XrGlobalDimmerFrameEndInfoML::next"]
        [::std::mem::offset_of!(XrGlobalDimmerFrameEndInfoML, next) - 8usize];
    ["Offset of field: XrGlobalDimmerFrameEndInfoML::dimmerValue"]
        [::std::mem::offset_of!(XrGlobalDimmerFrameEndInfoML, dimmerValue) - 16usize];
    ["Offset of field: XrGlobalDimmerFrameEndInfoML::flags"]
        [::std::mem::offset_of!(XrGlobalDimmerFrameEndInfoML, flags) - 24usize];
};
pub type XrMarkerML = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMarkerDetectorML_T {
    _unused: [u8; 0],
}
pub type XrMarkerDetectorML = *mut XrMarkerDetectorML_T;
pub const XrMarkerDetectorProfileML_XR_MARKER_DETECTOR_PROFILE_DEFAULT_ML:
    XrMarkerDetectorProfileML = 0;
pub const XrMarkerDetectorProfileML_XR_MARKER_DETECTOR_PROFILE_SPEED_ML: XrMarkerDetectorProfileML =
    1;
pub const XrMarkerDetectorProfileML_XR_MARKER_DETECTOR_PROFILE_ACCURACY_ML:
    XrMarkerDetectorProfileML = 2;
pub const XrMarkerDetectorProfileML_XR_MARKER_DETECTOR_PROFILE_SMALL_TARGETS_ML:
    XrMarkerDetectorProfileML = 3;
pub const XrMarkerDetectorProfileML_XR_MARKER_DETECTOR_PROFILE_LARGE_FOV_ML:
    XrMarkerDetectorProfileML = 4;
pub const XrMarkerDetectorProfileML_XR_MARKER_DETECTOR_PROFILE_CUSTOM_ML:
    XrMarkerDetectorProfileML = 5;
pub const XrMarkerDetectorProfileML_XR_MARKER_DETECTOR_PROFILE_MAX_ENUM_ML:
    XrMarkerDetectorProfileML = 2147483647;
pub type XrMarkerDetectorProfileML = ::std::os::raw::c_uint;
pub const XrMarkerTypeML_XR_MARKER_TYPE_ARUCO_ML: XrMarkerTypeML = 0;
pub const XrMarkerTypeML_XR_MARKER_TYPE_APRIL_TAG_ML: XrMarkerTypeML = 1;
pub const XrMarkerTypeML_XR_MARKER_TYPE_QR_ML: XrMarkerTypeML = 2;
pub const XrMarkerTypeML_XR_MARKER_TYPE_EAN_13_ML: XrMarkerTypeML = 3;
pub const XrMarkerTypeML_XR_MARKER_TYPE_UPC_A_ML: XrMarkerTypeML = 4;
pub const XrMarkerTypeML_XR_MARKER_TYPE_CODE_128_ML: XrMarkerTypeML = 5;
pub const XrMarkerTypeML_XR_MARKER_TYPE_MAX_ENUM_ML: XrMarkerTypeML = 2147483647;
pub type XrMarkerTypeML = ::std::os::raw::c_uint;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_4X4_50_ML: XrMarkerArucoDictML = 0;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_4X4_100_ML: XrMarkerArucoDictML = 1;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_4X4_250_ML: XrMarkerArucoDictML = 2;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_4X4_1000_ML: XrMarkerArucoDictML = 3;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_5X5_50_ML: XrMarkerArucoDictML = 4;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_5X5_100_ML: XrMarkerArucoDictML = 5;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_5X5_250_ML: XrMarkerArucoDictML = 6;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_5X5_1000_ML: XrMarkerArucoDictML = 7;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_6X6_50_ML: XrMarkerArucoDictML = 8;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_6X6_100_ML: XrMarkerArucoDictML = 9;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_6X6_250_ML: XrMarkerArucoDictML = 10;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_6X6_1000_ML: XrMarkerArucoDictML = 11;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_7X7_50_ML: XrMarkerArucoDictML = 12;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_7X7_100_ML: XrMarkerArucoDictML = 13;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_7X7_250_ML: XrMarkerArucoDictML = 14;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_7X7_1000_ML: XrMarkerArucoDictML = 15;
pub const XrMarkerArucoDictML_XR_MARKER_ARUCO_DICT_MAX_ENUM_ML: XrMarkerArucoDictML = 2147483647;
pub type XrMarkerArucoDictML = ::std::os::raw::c_uint;
pub const XrMarkerAprilTagDictML_XR_MARKER_APRIL_TAG_DICT_16H5_ML: XrMarkerAprilTagDictML = 0;
pub const XrMarkerAprilTagDictML_XR_MARKER_APRIL_TAG_DICT_25H9_ML: XrMarkerAprilTagDictML = 1;
pub const XrMarkerAprilTagDictML_XR_MARKER_APRIL_TAG_DICT_36H10_ML: XrMarkerAprilTagDictML = 2;
pub const XrMarkerAprilTagDictML_XR_MARKER_APRIL_TAG_DICT_36H11_ML: XrMarkerAprilTagDictML = 3;
pub const XrMarkerAprilTagDictML_XR_MARKER_APRIL_TAG_DICT_MAX_ENUM_ML: XrMarkerAprilTagDictML =
    2147483647;
pub type XrMarkerAprilTagDictML = ::std::os::raw::c_uint;
pub const XrMarkerDetectorFpsML_XR_MARKER_DETECTOR_FPS_LOW_ML: XrMarkerDetectorFpsML = 0;
pub const XrMarkerDetectorFpsML_XR_MARKER_DETECTOR_FPS_MEDIUM_ML: XrMarkerDetectorFpsML = 1;
pub const XrMarkerDetectorFpsML_XR_MARKER_DETECTOR_FPS_HIGH_ML: XrMarkerDetectorFpsML = 2;
pub const XrMarkerDetectorFpsML_XR_MARKER_DETECTOR_FPS_MAX_ML: XrMarkerDetectorFpsML = 3;
pub const XrMarkerDetectorFpsML_XR_MARKER_DETECTOR_FPS_MAX_ENUM_ML: XrMarkerDetectorFpsML =
    2147483647;
pub type XrMarkerDetectorFpsML = ::std::os::raw::c_uint;
pub const XrMarkerDetectorResolutionML_XR_MARKER_DETECTOR_RESOLUTION_LOW_ML:
    XrMarkerDetectorResolutionML = 0;
pub const XrMarkerDetectorResolutionML_XR_MARKER_DETECTOR_RESOLUTION_MEDIUM_ML:
    XrMarkerDetectorResolutionML = 1;
pub const XrMarkerDetectorResolutionML_XR_MARKER_DETECTOR_RESOLUTION_HIGH_ML:
    XrMarkerDetectorResolutionML = 2;
pub const XrMarkerDetectorResolutionML_XR_MARKER_DETECTOR_RESOLUTION_MAX_ENUM_ML:
    XrMarkerDetectorResolutionML = 2147483647;
pub type XrMarkerDetectorResolutionML = ::std::os::raw::c_uint;
pub const XrMarkerDetectorCameraML_XR_MARKER_DETECTOR_CAMERA_RGB_CAMERA_ML:
    XrMarkerDetectorCameraML = 0;
pub const XrMarkerDetectorCameraML_XR_MARKER_DETECTOR_CAMERA_WORLD_CAMERAS_ML:
    XrMarkerDetectorCameraML = 1;
pub const XrMarkerDetectorCameraML_XR_MARKER_DETECTOR_CAMERA_MAX_ENUM_ML: XrMarkerDetectorCameraML =
    2147483647;
pub type XrMarkerDetectorCameraML = ::std::os::raw::c_uint;
pub const XrMarkerDetectorCornerRefineMethodML_XR_MARKER_DETECTOR_CORNER_REFINE_METHOD_NONE_ML:
    XrMarkerDetectorCornerRefineMethodML = 0;
pub const XrMarkerDetectorCornerRefineMethodML_XR_MARKER_DETECTOR_CORNER_REFINE_METHOD_SUBPIX_ML:
    XrMarkerDetectorCornerRefineMethodML = 1;
pub const XrMarkerDetectorCornerRefineMethodML_XR_MARKER_DETECTOR_CORNER_REFINE_METHOD_CONTOUR_ML : XrMarkerDetectorCornerRefineMethodML = 2 ;
pub const XrMarkerDetectorCornerRefineMethodML_XR_MARKER_DETECTOR_CORNER_REFINE_METHOD_APRIL_TAG_ML : XrMarkerDetectorCornerRefineMethodML = 3 ;
pub const XrMarkerDetectorCornerRefineMethodML_XR_MARKER_DETECTOR_CORNER_REFINE_METHOD_MAX_ENUM_ML : XrMarkerDetectorCornerRefineMethodML = 2147483647 ;
pub type XrMarkerDetectorCornerRefineMethodML = ::std::os::raw::c_uint;
pub const XrMarkerDetectorFullAnalysisIntervalML_XR_MARKER_DETECTOR_FULL_ANALYSIS_INTERVAL_MAX_ML : XrMarkerDetectorFullAnalysisIntervalML = 0 ;
pub const XrMarkerDetectorFullAnalysisIntervalML_XR_MARKER_DETECTOR_FULL_ANALYSIS_INTERVAL_FAST_ML : XrMarkerDetectorFullAnalysisIntervalML = 1 ;
pub const XrMarkerDetectorFullAnalysisIntervalML_XR_MARKER_DETECTOR_FULL_ANALYSIS_INTERVAL_MEDIUM_ML : XrMarkerDetectorFullAnalysisIntervalML = 2 ;
pub const XrMarkerDetectorFullAnalysisIntervalML_XR_MARKER_DETECTOR_FULL_ANALYSIS_INTERVAL_SLOW_ML : XrMarkerDetectorFullAnalysisIntervalML = 3 ;
pub const XrMarkerDetectorFullAnalysisIntervalML_XR_MARKER_DETECTOR_FULL_ANALYSIS_INTERVAL_MAX_ENUM_ML : XrMarkerDetectorFullAnalysisIntervalML = 2147483647 ;
pub type XrMarkerDetectorFullAnalysisIntervalML = ::std::os::raw::c_uint;
pub const XrMarkerDetectorStatusML_XR_MARKER_DETECTOR_STATUS_PENDING_ML: XrMarkerDetectorStatusML =
    0;
pub const XrMarkerDetectorStatusML_XR_MARKER_DETECTOR_STATUS_READY_ML: XrMarkerDetectorStatusML = 1;
pub const XrMarkerDetectorStatusML_XR_MARKER_DETECTOR_STATUS_ERROR_ML: XrMarkerDetectorStatusML = 2;
pub const XrMarkerDetectorStatusML_XR_MARKER_DETECTOR_STATUS_MAX_ENUM_ML: XrMarkerDetectorStatusML =
    2147483647;
pub type XrMarkerDetectorStatusML = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemMarkerUnderstandingPropertiesML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsMarkerUnderstanding: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemMarkerUnderstandingPropertiesML"]
        [::std::mem::size_of::<XrSystemMarkerUnderstandingPropertiesML>() - 24usize];
    ["Alignment of XrSystemMarkerUnderstandingPropertiesML"]
        [::std::mem::align_of::<XrSystemMarkerUnderstandingPropertiesML>() - 8usize];
    ["Offset of field: XrSystemMarkerUnderstandingPropertiesML::type_"]
        [::std::mem::offset_of!(XrSystemMarkerUnderstandingPropertiesML, type_) - 0usize];
    ["Offset of field: XrSystemMarkerUnderstandingPropertiesML::next"]
        [::std::mem::offset_of!(XrSystemMarkerUnderstandingPropertiesML, next) - 8usize];
    ["Offset of field: XrSystemMarkerUnderstandingPropertiesML::supportsMarkerUnderstanding"][::std::mem::offset_of!(
        XrSystemMarkerUnderstandingPropertiesML,
        supportsMarkerUnderstanding
    )
        - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMarkerDetectorCreateInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub profile: XrMarkerDetectorProfileML,
    pub markerType: XrMarkerTypeML,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrMarkerDetectorCreateInfoML"]
        [::std::mem::size_of::<XrMarkerDetectorCreateInfoML>() - 24usize];
    ["Alignment of XrMarkerDetectorCreateInfoML"]
        [::std::mem::align_of::<XrMarkerDetectorCreateInfoML>() - 8usize];
    ["Offset of field: XrMarkerDetectorCreateInfoML::type_"]
        [::std::mem::offset_of!(XrMarkerDetectorCreateInfoML, type_) - 0usize];
    ["Offset of field: XrMarkerDetectorCreateInfoML::next"]
        [::std::mem::offset_of!(XrMarkerDetectorCreateInfoML, next) - 8usize];
    ["Offset of field: XrMarkerDetectorCreateInfoML::profile"]
        [::std::mem::offset_of!(XrMarkerDetectorCreateInfoML, profile) - 16usize];
    ["Offset of field: XrMarkerDetectorCreateInfoML::markerType"]
        [::std::mem::offset_of!(XrMarkerDetectorCreateInfoML, markerType) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMarkerDetectorArucoInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub arucoDict: XrMarkerArucoDictML,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrMarkerDetectorArucoInfoML"]
        [::std::mem::size_of::<XrMarkerDetectorArucoInfoML>() - 24usize];
    ["Alignment of XrMarkerDetectorArucoInfoML"]
        [::std::mem::align_of::<XrMarkerDetectorArucoInfoML>() - 8usize];
    ["Offset of field: XrMarkerDetectorArucoInfoML::type_"]
        [::std::mem::offset_of!(XrMarkerDetectorArucoInfoML, type_) - 0usize];
    ["Offset of field: XrMarkerDetectorArucoInfoML::next"]
        [::std::mem::offset_of!(XrMarkerDetectorArucoInfoML, next) - 8usize];
    ["Offset of field: XrMarkerDetectorArucoInfoML::arucoDict"]
        [::std::mem::offset_of!(XrMarkerDetectorArucoInfoML, arucoDict) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMarkerDetectorSizeInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub markerLength: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrMarkerDetectorSizeInfoML"]
        [::std::mem::size_of::<XrMarkerDetectorSizeInfoML>() - 24usize];
    ["Alignment of XrMarkerDetectorSizeInfoML"]
        [::std::mem::align_of::<XrMarkerDetectorSizeInfoML>() - 8usize];
    ["Offset of field: XrMarkerDetectorSizeInfoML::type_"]
        [::std::mem::offset_of!(XrMarkerDetectorSizeInfoML, type_) - 0usize];
    ["Offset of field: XrMarkerDetectorSizeInfoML::next"]
        [::std::mem::offset_of!(XrMarkerDetectorSizeInfoML, next) - 8usize];
    ["Offset of field: XrMarkerDetectorSizeInfoML::markerLength"]
        [::std::mem::offset_of!(XrMarkerDetectorSizeInfoML, markerLength) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMarkerDetectorAprilTagInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub aprilTagDict: XrMarkerAprilTagDictML,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrMarkerDetectorAprilTagInfoML"]
        [::std::mem::size_of::<XrMarkerDetectorAprilTagInfoML>() - 24usize];
    ["Alignment of XrMarkerDetectorAprilTagInfoML"]
        [::std::mem::align_of::<XrMarkerDetectorAprilTagInfoML>() - 8usize];
    ["Offset of field: XrMarkerDetectorAprilTagInfoML::type_"]
        [::std::mem::offset_of!(XrMarkerDetectorAprilTagInfoML, type_) - 0usize];
    ["Offset of field: XrMarkerDetectorAprilTagInfoML::next"]
        [::std::mem::offset_of!(XrMarkerDetectorAprilTagInfoML, next) - 8usize];
    ["Offset of field: XrMarkerDetectorAprilTagInfoML::aprilTagDict"]
        [::std::mem::offset_of!(XrMarkerDetectorAprilTagInfoML, aprilTagDict) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMarkerDetectorCustomProfileInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub fpsHint: XrMarkerDetectorFpsML,
    pub resolutionHint: XrMarkerDetectorResolutionML,
    pub cameraHint: XrMarkerDetectorCameraML,
    pub cornerRefineMethod: XrMarkerDetectorCornerRefineMethodML,
    pub useEdgeRefinement: XrBool32,
    pub fullAnalysisIntervalHint: XrMarkerDetectorFullAnalysisIntervalML,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrMarkerDetectorCustomProfileInfoML"]
        [::std::mem::size_of::<XrMarkerDetectorCustomProfileInfoML>() - 40usize];
    ["Alignment of XrMarkerDetectorCustomProfileInfoML"]
        [::std::mem::align_of::<XrMarkerDetectorCustomProfileInfoML>() - 8usize];
    ["Offset of field: XrMarkerDetectorCustomProfileInfoML::type_"]
        [::std::mem::offset_of!(XrMarkerDetectorCustomProfileInfoML, type_) - 0usize];
    ["Offset of field: XrMarkerDetectorCustomProfileInfoML::next"]
        [::std::mem::offset_of!(XrMarkerDetectorCustomProfileInfoML, next) - 8usize];
    ["Offset of field: XrMarkerDetectorCustomProfileInfoML::fpsHint"]
        [::std::mem::offset_of!(XrMarkerDetectorCustomProfileInfoML, fpsHint) - 16usize];
    ["Offset of field: XrMarkerDetectorCustomProfileInfoML::resolutionHint"]
        [::std::mem::offset_of!(XrMarkerDetectorCustomProfileInfoML, resolutionHint) - 20usize];
    ["Offset of field: XrMarkerDetectorCustomProfileInfoML::cameraHint"]
        [::std::mem::offset_of!(XrMarkerDetectorCustomProfileInfoML, cameraHint) - 24usize];
    ["Offset of field: XrMarkerDetectorCustomProfileInfoML::cornerRefineMethod"]
        [::std::mem::offset_of!(XrMarkerDetectorCustomProfileInfoML, cornerRefineMethod) - 28usize];
    ["Offset of field: XrMarkerDetectorCustomProfileInfoML::useEdgeRefinement"]
        [::std::mem::offset_of!(XrMarkerDetectorCustomProfileInfoML, useEdgeRefinement) - 32usize];
    ["Offset of field: XrMarkerDetectorCustomProfileInfoML::fullAnalysisIntervalHint"][::std::mem::offset_of!(
        XrMarkerDetectorCustomProfileInfoML,
        fullAnalysisIntervalHint
    ) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMarkerDetectorSnapshotInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrMarkerDetectorSnapshotInfoML"]
        [::std::mem::size_of::<XrMarkerDetectorSnapshotInfoML>() - 16usize];
    ["Alignment of XrMarkerDetectorSnapshotInfoML"]
        [::std::mem::align_of::<XrMarkerDetectorSnapshotInfoML>() - 8usize];
    ["Offset of field: XrMarkerDetectorSnapshotInfoML::type_"]
        [::std::mem::offset_of!(XrMarkerDetectorSnapshotInfoML, type_) - 0usize];
    ["Offset of field: XrMarkerDetectorSnapshotInfoML::next"]
        [::std::mem::offset_of!(XrMarkerDetectorSnapshotInfoML, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMarkerDetectorStateML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub state: XrMarkerDetectorStatusML,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrMarkerDetectorStateML"][::std::mem::size_of::<XrMarkerDetectorStateML>() - 24usize];
    ["Alignment of XrMarkerDetectorStateML"]
        [::std::mem::align_of::<XrMarkerDetectorStateML>() - 8usize];
    ["Offset of field: XrMarkerDetectorStateML::type_"]
        [::std::mem::offset_of!(XrMarkerDetectorStateML, type_) - 0usize];
    ["Offset of field: XrMarkerDetectorStateML::next"]
        [::std::mem::offset_of!(XrMarkerDetectorStateML, next) - 8usize];
    ["Offset of field: XrMarkerDetectorStateML::state"]
        [::std::mem::offset_of!(XrMarkerDetectorStateML, state) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMarkerSpaceCreateInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub markerDetector: XrMarkerDetectorML,
    pub marker: XrMarkerML,
    pub poseInMarkerSpace: XrPosef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrMarkerSpaceCreateInfoML"]
        [::std::mem::size_of::<XrMarkerSpaceCreateInfoML>() - 64usize];
    ["Alignment of XrMarkerSpaceCreateInfoML"]
        [::std::mem::align_of::<XrMarkerSpaceCreateInfoML>() - 8usize];
    ["Offset of field: XrMarkerSpaceCreateInfoML::type_"]
        [::std::mem::offset_of!(XrMarkerSpaceCreateInfoML, type_) - 0usize];
    ["Offset of field: XrMarkerSpaceCreateInfoML::next"]
        [::std::mem::offset_of!(XrMarkerSpaceCreateInfoML, next) - 8usize];
    ["Offset of field: XrMarkerSpaceCreateInfoML::markerDetector"]
        [::std::mem::offset_of!(XrMarkerSpaceCreateInfoML, markerDetector) - 16usize];
    ["Offset of field: XrMarkerSpaceCreateInfoML::marker"]
        [::std::mem::offset_of!(XrMarkerSpaceCreateInfoML, marker) - 24usize];
    ["Offset of field: XrMarkerSpaceCreateInfoML::poseInMarkerSpace"]
        [::std::mem::offset_of!(XrMarkerSpaceCreateInfoML, poseInMarkerSpace) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrExportedLocalizationMapML_T {
    _unused: [u8; 0],
}
pub type XrExportedLocalizationMapML = *mut XrExportedLocalizationMapML_T;
pub const XrLocalizationMapStateML_XR_LOCALIZATION_MAP_STATE_NOT_LOCALIZED_ML:
    XrLocalizationMapStateML = 0;
pub const XrLocalizationMapStateML_XR_LOCALIZATION_MAP_STATE_LOCALIZED_ML:
    XrLocalizationMapStateML = 1;
pub const XrLocalizationMapStateML_XR_LOCALIZATION_MAP_STATE_LOCALIZATION_PENDING_ML:
    XrLocalizationMapStateML = 2;
pub const XrLocalizationMapStateML_XR_LOCALIZATION_MAP_STATE_LOCALIZATION_SLEEPING_BEFORE_RETRY_ML : XrLocalizationMapStateML = 3 ;
pub const XrLocalizationMapStateML_XR_LOCALIZATION_MAP_STATE_MAX_ENUM_ML: XrLocalizationMapStateML =
    2147483647;
pub type XrLocalizationMapStateML = ::std::os::raw::c_uint;
pub const XrLocalizationMapTypeML_XR_LOCALIZATION_MAP_TYPE_ON_DEVICE_ML: XrLocalizationMapTypeML =
    0;
pub const XrLocalizationMapTypeML_XR_LOCALIZATION_MAP_TYPE_CLOUD_ML: XrLocalizationMapTypeML = 1;
pub const XrLocalizationMapTypeML_XR_LOCALIZATION_MAP_TYPE_MAX_ENUM_ML: XrLocalizationMapTypeML =
    2147483647;
pub type XrLocalizationMapTypeML = ::std::os::raw::c_uint;
pub const XrLocalizationMapConfidenceML_XR_LOCALIZATION_MAP_CONFIDENCE_POOR_ML:
    XrLocalizationMapConfidenceML = 0;
pub const XrLocalizationMapConfidenceML_XR_LOCALIZATION_MAP_CONFIDENCE_FAIR_ML:
    XrLocalizationMapConfidenceML = 1;
pub const XrLocalizationMapConfidenceML_XR_LOCALIZATION_MAP_CONFIDENCE_GOOD_ML:
    XrLocalizationMapConfidenceML = 2;
pub const XrLocalizationMapConfidenceML_XR_LOCALIZATION_MAP_CONFIDENCE_EXCELLENT_ML:
    XrLocalizationMapConfidenceML = 3;
pub const XrLocalizationMapConfidenceML_XR_LOCALIZATION_MAP_CONFIDENCE_MAX_ENUM_ML:
    XrLocalizationMapConfidenceML = 2147483647;
pub type XrLocalizationMapConfidenceML = ::std::os::raw::c_uint;
pub type XrLocalizationMapErrorFlagsML = XrFlags64;
pub const XR_LOCALIZATION_MAP_ERROR_UNKNOWN_BIT_ML: XrLocalizationMapErrorFlagsML = 1;
pub const XR_LOCALIZATION_MAP_ERROR_OUT_OF_MAPPED_AREA_BIT_ML: XrLocalizationMapErrorFlagsML = 2;
pub const XR_LOCALIZATION_MAP_ERROR_LOW_FEATURE_COUNT_BIT_ML: XrLocalizationMapErrorFlagsML = 4;
pub const XR_LOCALIZATION_MAP_ERROR_EXCESSIVE_MOTION_BIT_ML: XrLocalizationMapErrorFlagsML = 8;
pub const XR_LOCALIZATION_MAP_ERROR_LOW_LIGHT_BIT_ML: XrLocalizationMapErrorFlagsML = 16;
pub const XR_LOCALIZATION_MAP_ERROR_HEADPOSE_BIT_ML: XrLocalizationMapErrorFlagsML = 32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrLocalizationMapML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub name: [::std::os::raw::c_char; 64usize],
    pub mapUuid: XrUuidEXT,
    pub mapType: XrLocalizationMapTypeML,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrLocalizationMapML"][::std::mem::size_of::<XrLocalizationMapML>() - 104usize];
    ["Alignment of XrLocalizationMapML"][::std::mem::align_of::<XrLocalizationMapML>() - 8usize];
    ["Offset of field: XrLocalizationMapML::type_"]
        [::std::mem::offset_of!(XrLocalizationMapML, type_) - 0usize];
    ["Offset of field: XrLocalizationMapML::next"]
        [::std::mem::offset_of!(XrLocalizationMapML, next) - 8usize];
    ["Offset of field: XrLocalizationMapML::name"]
        [::std::mem::offset_of!(XrLocalizationMapML, name) - 16usize];
    ["Offset of field: XrLocalizationMapML::mapUuid"]
        [::std::mem::offset_of!(XrLocalizationMapML, mapUuid) - 80usize];
    ["Offset of field: XrLocalizationMapML::mapType"]
        [::std::mem::offset_of!(XrLocalizationMapML, mapType) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataLocalizationChangedML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub session: XrSession,
    pub state: XrLocalizationMapStateML,
    pub map: XrLocalizationMapML,
    pub confidence: XrLocalizationMapConfidenceML,
    pub errorFlags: XrLocalizationMapErrorFlagsML,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataLocalizationChangedML"]
        [::std::mem::size_of::<XrEventDataLocalizationChangedML>() - 152usize];
    ["Alignment of XrEventDataLocalizationChangedML"]
        [::std::mem::align_of::<XrEventDataLocalizationChangedML>() - 8usize];
    ["Offset of field: XrEventDataLocalizationChangedML::type_"]
        [::std::mem::offset_of!(XrEventDataLocalizationChangedML, type_) - 0usize];
    ["Offset of field: XrEventDataLocalizationChangedML::next"]
        [::std::mem::offset_of!(XrEventDataLocalizationChangedML, next) - 8usize];
    ["Offset of field: XrEventDataLocalizationChangedML::session"]
        [::std::mem::offset_of!(XrEventDataLocalizationChangedML, session) - 16usize];
    ["Offset of field: XrEventDataLocalizationChangedML::state"]
        [::std::mem::offset_of!(XrEventDataLocalizationChangedML, state) - 24usize];
    ["Offset of field: XrEventDataLocalizationChangedML::map"]
        [::std::mem::offset_of!(XrEventDataLocalizationChangedML, map) - 32usize];
    ["Offset of field: XrEventDataLocalizationChangedML::confidence"]
        [::std::mem::offset_of!(XrEventDataLocalizationChangedML, confidence) - 136usize];
    ["Offset of field: XrEventDataLocalizationChangedML::errorFlags"]
        [::std::mem::offset_of!(XrEventDataLocalizationChangedML, errorFlags) - 144usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrLocalizationMapQueryInfoBaseHeaderML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrLocalizationMapQueryInfoBaseHeaderML"]
        [::std::mem::size_of::<XrLocalizationMapQueryInfoBaseHeaderML>() - 16usize];
    ["Alignment of XrLocalizationMapQueryInfoBaseHeaderML"]
        [::std::mem::align_of::<XrLocalizationMapQueryInfoBaseHeaderML>() - 8usize];
    ["Offset of field: XrLocalizationMapQueryInfoBaseHeaderML::type_"]
        [::std::mem::offset_of!(XrLocalizationMapQueryInfoBaseHeaderML, type_) - 0usize];
    ["Offset of field: XrLocalizationMapQueryInfoBaseHeaderML::next"]
        [::std::mem::offset_of!(XrLocalizationMapQueryInfoBaseHeaderML, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrMapLocalizationRequestInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub mapUuid: XrUuidEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrMapLocalizationRequestInfoML"]
        [::std::mem::size_of::<XrMapLocalizationRequestInfoML>() - 32usize];
    ["Alignment of XrMapLocalizationRequestInfoML"]
        [::std::mem::align_of::<XrMapLocalizationRequestInfoML>() - 8usize];
    ["Offset of field: XrMapLocalizationRequestInfoML::type_"]
        [::std::mem::offset_of!(XrMapLocalizationRequestInfoML, type_) - 0usize];
    ["Offset of field: XrMapLocalizationRequestInfoML::next"]
        [::std::mem::offset_of!(XrMapLocalizationRequestInfoML, next) - 8usize];
    ["Offset of field: XrMapLocalizationRequestInfoML::mapUuid"]
        [::std::mem::offset_of!(XrMapLocalizationRequestInfoML, mapUuid) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrLocalizationMapImportInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub size: u32,
    pub data: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrLocalizationMapImportInfoML"]
        [::std::mem::size_of::<XrLocalizationMapImportInfoML>() - 32usize];
    ["Alignment of XrLocalizationMapImportInfoML"]
        [::std::mem::align_of::<XrLocalizationMapImportInfoML>() - 8usize];
    ["Offset of field: XrLocalizationMapImportInfoML::type_"]
        [::std::mem::offset_of!(XrLocalizationMapImportInfoML, type_) - 0usize];
    ["Offset of field: XrLocalizationMapImportInfoML::next"]
        [::std::mem::offset_of!(XrLocalizationMapImportInfoML, next) - 8usize];
    ["Offset of field: XrLocalizationMapImportInfoML::size"]
        [::std::mem::offset_of!(XrLocalizationMapImportInfoML, size) - 16usize];
    ["Offset of field: XrLocalizationMapImportInfoML::data"]
        [::std::mem::offset_of!(XrLocalizationMapImportInfoML, data) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrLocalizationEnableEventsInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub enabled: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrLocalizationEnableEventsInfoML"]
        [::std::mem::size_of::<XrLocalizationEnableEventsInfoML>() - 24usize];
    ["Alignment of XrLocalizationEnableEventsInfoML"]
        [::std::mem::align_of::<XrLocalizationEnableEventsInfoML>() - 8usize];
    ["Offset of field: XrLocalizationEnableEventsInfoML::type_"]
        [::std::mem::offset_of!(XrLocalizationEnableEventsInfoML, type_) - 0usize];
    ["Offset of field: XrLocalizationEnableEventsInfoML::next"]
        [::std::mem::offset_of!(XrLocalizationEnableEventsInfoML, next) - 8usize];
    ["Offset of field: XrLocalizationEnableEventsInfoML::enabled"]
        [::std::mem::offset_of!(XrLocalizationEnableEventsInfoML, enabled) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFutureEXT_T {
    _unused: [u8; 0],
}
pub type XrFutureEXT = *mut XrFutureEXT_T;
pub const XrSpatialAnchorConfidenceML_XR_SPATIAL_ANCHOR_CONFIDENCE_LOW_ML:
    XrSpatialAnchorConfidenceML = 0;
pub const XrSpatialAnchorConfidenceML_XR_SPATIAL_ANCHOR_CONFIDENCE_MEDIUM_ML:
    XrSpatialAnchorConfidenceML = 1;
pub const XrSpatialAnchorConfidenceML_XR_SPATIAL_ANCHOR_CONFIDENCE_HIGH_ML:
    XrSpatialAnchorConfidenceML = 2;
pub const XrSpatialAnchorConfidenceML_XR_SPATIAL_ANCHOR_CONFIDENCE_MAX_ENUM_ML:
    XrSpatialAnchorConfidenceML = 2147483647;
pub type XrSpatialAnchorConfidenceML = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorsCreateInfoBaseHeaderML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorsCreateInfoBaseHeaderML"]
        [::std::mem::size_of::<XrSpatialAnchorsCreateInfoBaseHeaderML>() - 16usize];
    ["Alignment of XrSpatialAnchorsCreateInfoBaseHeaderML"]
        [::std::mem::align_of::<XrSpatialAnchorsCreateInfoBaseHeaderML>() - 8usize];
    ["Offset of field: XrSpatialAnchorsCreateInfoBaseHeaderML::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorsCreateInfoBaseHeaderML, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorsCreateInfoBaseHeaderML::next"]
        [::std::mem::offset_of!(XrSpatialAnchorsCreateInfoBaseHeaderML, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorsCreateInfoFromPoseML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub baseSpace: XrSpace,
    pub poseInBaseSpace: XrPosef,
    pub time: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorsCreateInfoFromPoseML"]
        [::std::mem::size_of::<XrSpatialAnchorsCreateInfoFromPoseML>() - 64usize];
    ["Alignment of XrSpatialAnchorsCreateInfoFromPoseML"]
        [::std::mem::align_of::<XrSpatialAnchorsCreateInfoFromPoseML>() - 8usize];
    ["Offset of field: XrSpatialAnchorsCreateInfoFromPoseML::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorsCreateInfoFromPoseML, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorsCreateInfoFromPoseML::next"]
        [::std::mem::offset_of!(XrSpatialAnchorsCreateInfoFromPoseML, next) - 8usize];
    ["Offset of field: XrSpatialAnchorsCreateInfoFromPoseML::baseSpace"]
        [::std::mem::offset_of!(XrSpatialAnchorsCreateInfoFromPoseML, baseSpace) - 16usize];
    ["Offset of field: XrSpatialAnchorsCreateInfoFromPoseML::poseInBaseSpace"]
        [::std::mem::offset_of!(XrSpatialAnchorsCreateInfoFromPoseML, poseInBaseSpace) - 24usize];
    ["Offset of field: XrSpatialAnchorsCreateInfoFromPoseML::time"]
        [::std::mem::offset_of!(XrSpatialAnchorsCreateInfoFromPoseML, time) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCreateSpatialAnchorsCompletionML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub futureResult: XrResult,
    pub spaceCount: u32,
    pub spaces: *mut XrSpace,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCreateSpatialAnchorsCompletionML"]
        [::std::mem::size_of::<XrCreateSpatialAnchorsCompletionML>() - 32usize];
    ["Alignment of XrCreateSpatialAnchorsCompletionML"]
        [::std::mem::align_of::<XrCreateSpatialAnchorsCompletionML>() - 8usize];
    ["Offset of field: XrCreateSpatialAnchorsCompletionML::type_"]
        [::std::mem::offset_of!(XrCreateSpatialAnchorsCompletionML, type_) - 0usize];
    ["Offset of field: XrCreateSpatialAnchorsCompletionML::next"]
        [::std::mem::offset_of!(XrCreateSpatialAnchorsCompletionML, next) - 8usize];
    ["Offset of field: XrCreateSpatialAnchorsCompletionML::futureResult"]
        [::std::mem::offset_of!(XrCreateSpatialAnchorsCompletionML, futureResult) - 16usize];
    ["Offset of field: XrCreateSpatialAnchorsCompletionML::spaceCount"]
        [::std::mem::offset_of!(XrCreateSpatialAnchorsCompletionML, spaceCount) - 20usize];
    ["Offset of field: XrCreateSpatialAnchorsCompletionML::spaces"]
        [::std::mem::offset_of!(XrCreateSpatialAnchorsCompletionML, spaces) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorStateML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub confidence: XrSpatialAnchorConfidenceML,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorStateML"][::std::mem::size_of::<XrSpatialAnchorStateML>() - 24usize];
    ["Alignment of XrSpatialAnchorStateML"]
        [::std::mem::align_of::<XrSpatialAnchorStateML>() - 8usize];
    ["Offset of field: XrSpatialAnchorStateML::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorStateML, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorStateML::next"]
        [::std::mem::offset_of!(XrSpatialAnchorStateML, next) - 8usize];
    ["Offset of field: XrSpatialAnchorStateML::confidence"]
        [::std::mem::offset_of!(XrSpatialAnchorStateML, confidence) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorsStorageML_T {
    _unused: [u8; 0],
}
pub type XrSpatialAnchorsStorageML = *mut XrSpatialAnchorsStorageML_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorsCreateStorageInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorsCreateStorageInfoML"]
        [::std::mem::size_of::<XrSpatialAnchorsCreateStorageInfoML>() - 16usize];
    ["Alignment of XrSpatialAnchorsCreateStorageInfoML"]
        [::std::mem::align_of::<XrSpatialAnchorsCreateStorageInfoML>() - 8usize];
    ["Offset of field: XrSpatialAnchorsCreateStorageInfoML::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorsCreateStorageInfoML, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorsCreateStorageInfoML::next"]
        [::std::mem::offset_of!(XrSpatialAnchorsCreateStorageInfoML, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorsQueryInfoBaseHeaderML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorsQueryInfoBaseHeaderML"]
        [::std::mem::size_of::<XrSpatialAnchorsQueryInfoBaseHeaderML>() - 16usize];
    ["Alignment of XrSpatialAnchorsQueryInfoBaseHeaderML"]
        [::std::mem::align_of::<XrSpatialAnchorsQueryInfoBaseHeaderML>() - 8usize];
    ["Offset of field: XrSpatialAnchorsQueryInfoBaseHeaderML::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorsQueryInfoBaseHeaderML, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorsQueryInfoBaseHeaderML::next"]
        [::std::mem::offset_of!(XrSpatialAnchorsQueryInfoBaseHeaderML, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorsQueryInfoRadiusML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub baseSpace: XrSpace,
    pub center: XrVector3f,
    pub time: XrTime,
    pub radius: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorsQueryInfoRadiusML"]
        [::std::mem::size_of::<XrSpatialAnchorsQueryInfoRadiusML>() - 56usize];
    ["Alignment of XrSpatialAnchorsQueryInfoRadiusML"]
        [::std::mem::align_of::<XrSpatialAnchorsQueryInfoRadiusML>() - 8usize];
    ["Offset of field: XrSpatialAnchorsQueryInfoRadiusML::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorsQueryInfoRadiusML, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorsQueryInfoRadiusML::next"]
        [::std::mem::offset_of!(XrSpatialAnchorsQueryInfoRadiusML, next) - 8usize];
    ["Offset of field: XrSpatialAnchorsQueryInfoRadiusML::baseSpace"]
        [::std::mem::offset_of!(XrSpatialAnchorsQueryInfoRadiusML, baseSpace) - 16usize];
    ["Offset of field: XrSpatialAnchorsQueryInfoRadiusML::center"]
        [::std::mem::offset_of!(XrSpatialAnchorsQueryInfoRadiusML, center) - 24usize];
    ["Offset of field: XrSpatialAnchorsQueryInfoRadiusML::time"]
        [::std::mem::offset_of!(XrSpatialAnchorsQueryInfoRadiusML, time) - 40usize];
    ["Offset of field: XrSpatialAnchorsQueryInfoRadiusML::radius"]
        [::std::mem::offset_of!(XrSpatialAnchorsQueryInfoRadiusML, radius) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorsQueryCompletionML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub futureResult: XrResult,
    pub uuidCapacityInput: u32,
    pub uuidCountOutput: u32,
    pub uuids: *mut XrUuidEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorsQueryCompletionML"]
        [::std::mem::size_of::<XrSpatialAnchorsQueryCompletionML>() - 40usize];
    ["Alignment of XrSpatialAnchorsQueryCompletionML"]
        [::std::mem::align_of::<XrSpatialAnchorsQueryCompletionML>() - 8usize];
    ["Offset of field: XrSpatialAnchorsQueryCompletionML::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorsQueryCompletionML, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorsQueryCompletionML::next"]
        [::std::mem::offset_of!(XrSpatialAnchorsQueryCompletionML, next) - 8usize];
    ["Offset of field: XrSpatialAnchorsQueryCompletionML::futureResult"]
        [::std::mem::offset_of!(XrSpatialAnchorsQueryCompletionML, futureResult) - 16usize];
    ["Offset of field: XrSpatialAnchorsQueryCompletionML::uuidCapacityInput"]
        [::std::mem::offset_of!(XrSpatialAnchorsQueryCompletionML, uuidCapacityInput) - 20usize];
    ["Offset of field: XrSpatialAnchorsQueryCompletionML::uuidCountOutput"]
        [::std::mem::offset_of!(XrSpatialAnchorsQueryCompletionML, uuidCountOutput) - 24usize];
    ["Offset of field: XrSpatialAnchorsQueryCompletionML::uuids"]
        [::std::mem::offset_of!(XrSpatialAnchorsQueryCompletionML, uuids) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorsCreateInfoFromUuidsML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub storage: XrSpatialAnchorsStorageML,
    pub uuidCount: u32,
    pub uuids: *const XrUuidEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorsCreateInfoFromUuidsML"]
        [::std::mem::size_of::<XrSpatialAnchorsCreateInfoFromUuidsML>() - 40usize];
    ["Alignment of XrSpatialAnchorsCreateInfoFromUuidsML"]
        [::std::mem::align_of::<XrSpatialAnchorsCreateInfoFromUuidsML>() - 8usize];
    ["Offset of field: XrSpatialAnchorsCreateInfoFromUuidsML::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorsCreateInfoFromUuidsML, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorsCreateInfoFromUuidsML::next"]
        [::std::mem::offset_of!(XrSpatialAnchorsCreateInfoFromUuidsML, next) - 8usize];
    ["Offset of field: XrSpatialAnchorsCreateInfoFromUuidsML::storage"]
        [::std::mem::offset_of!(XrSpatialAnchorsCreateInfoFromUuidsML, storage) - 16usize];
    ["Offset of field: XrSpatialAnchorsCreateInfoFromUuidsML::uuidCount"]
        [::std::mem::offset_of!(XrSpatialAnchorsCreateInfoFromUuidsML, uuidCount) - 24usize];
    ["Offset of field: XrSpatialAnchorsCreateInfoFromUuidsML::uuids"]
        [::std::mem::offset_of!(XrSpatialAnchorsCreateInfoFromUuidsML, uuids) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorsPublishInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub anchorCount: u32,
    pub anchors: *const XrSpace,
    pub expiration: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorsPublishInfoML"]
        [::std::mem::size_of::<XrSpatialAnchorsPublishInfoML>() - 40usize];
    ["Alignment of XrSpatialAnchorsPublishInfoML"]
        [::std::mem::align_of::<XrSpatialAnchorsPublishInfoML>() - 8usize];
    ["Offset of field: XrSpatialAnchorsPublishInfoML::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorsPublishInfoML, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorsPublishInfoML::next"]
        [::std::mem::offset_of!(XrSpatialAnchorsPublishInfoML, next) - 8usize];
    ["Offset of field: XrSpatialAnchorsPublishInfoML::anchorCount"]
        [::std::mem::offset_of!(XrSpatialAnchorsPublishInfoML, anchorCount) - 16usize];
    ["Offset of field: XrSpatialAnchorsPublishInfoML::anchors"]
        [::std::mem::offset_of!(XrSpatialAnchorsPublishInfoML, anchors) - 24usize];
    ["Offset of field: XrSpatialAnchorsPublishInfoML::expiration"]
        [::std::mem::offset_of!(XrSpatialAnchorsPublishInfoML, expiration) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorsPublishCompletionML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub futureResult: XrResult,
    pub uuidCount: u32,
    pub uuids: *mut XrUuidEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorsPublishCompletionML"]
        [::std::mem::size_of::<XrSpatialAnchorsPublishCompletionML>() - 32usize];
    ["Alignment of XrSpatialAnchorsPublishCompletionML"]
        [::std::mem::align_of::<XrSpatialAnchorsPublishCompletionML>() - 8usize];
    ["Offset of field: XrSpatialAnchorsPublishCompletionML::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorsPublishCompletionML, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorsPublishCompletionML::next"]
        [::std::mem::offset_of!(XrSpatialAnchorsPublishCompletionML, next) - 8usize];
    ["Offset of field: XrSpatialAnchorsPublishCompletionML::futureResult"]
        [::std::mem::offset_of!(XrSpatialAnchorsPublishCompletionML, futureResult) - 16usize];
    ["Offset of field: XrSpatialAnchorsPublishCompletionML::uuidCount"]
        [::std::mem::offset_of!(XrSpatialAnchorsPublishCompletionML, uuidCount) - 20usize];
    ["Offset of field: XrSpatialAnchorsPublishCompletionML::uuids"]
        [::std::mem::offset_of!(XrSpatialAnchorsPublishCompletionML, uuids) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorsDeleteInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub uuidCount: u32,
    pub uuids: *const XrUuidEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorsDeleteInfoML"]
        [::std::mem::size_of::<XrSpatialAnchorsDeleteInfoML>() - 32usize];
    ["Alignment of XrSpatialAnchorsDeleteInfoML"]
        [::std::mem::align_of::<XrSpatialAnchorsDeleteInfoML>() - 8usize];
    ["Offset of field: XrSpatialAnchorsDeleteInfoML::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorsDeleteInfoML, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorsDeleteInfoML::next"]
        [::std::mem::offset_of!(XrSpatialAnchorsDeleteInfoML, next) - 8usize];
    ["Offset of field: XrSpatialAnchorsDeleteInfoML::uuidCount"]
        [::std::mem::offset_of!(XrSpatialAnchorsDeleteInfoML, uuidCount) - 16usize];
    ["Offset of field: XrSpatialAnchorsDeleteInfoML::uuids"]
        [::std::mem::offset_of!(XrSpatialAnchorsDeleteInfoML, uuids) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorsDeleteCompletionML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub futureResult: XrResult,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorsDeleteCompletionML"]
        [::std::mem::size_of::<XrSpatialAnchorsDeleteCompletionML>() - 24usize];
    ["Alignment of XrSpatialAnchorsDeleteCompletionML"]
        [::std::mem::align_of::<XrSpatialAnchorsDeleteCompletionML>() - 8usize];
    ["Offset of field: XrSpatialAnchorsDeleteCompletionML::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorsDeleteCompletionML, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorsDeleteCompletionML::next"]
        [::std::mem::offset_of!(XrSpatialAnchorsDeleteCompletionML, next) - 8usize];
    ["Offset of field: XrSpatialAnchorsDeleteCompletionML::futureResult"]
        [::std::mem::offset_of!(XrSpatialAnchorsDeleteCompletionML, futureResult) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorsUpdateExpirationInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub uuidCount: u32,
    pub uuids: *const XrUuidEXT,
    pub expiration: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorsUpdateExpirationInfoML"]
        [::std::mem::size_of::<XrSpatialAnchorsUpdateExpirationInfoML>() - 40usize];
    ["Alignment of XrSpatialAnchorsUpdateExpirationInfoML"]
        [::std::mem::align_of::<XrSpatialAnchorsUpdateExpirationInfoML>() - 8usize];
    ["Offset of field: XrSpatialAnchorsUpdateExpirationInfoML::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorsUpdateExpirationInfoML, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorsUpdateExpirationInfoML::next"]
        [::std::mem::offset_of!(XrSpatialAnchorsUpdateExpirationInfoML, next) - 8usize];
    ["Offset of field: XrSpatialAnchorsUpdateExpirationInfoML::uuidCount"]
        [::std::mem::offset_of!(XrSpatialAnchorsUpdateExpirationInfoML, uuidCount) - 16usize];
    ["Offset of field: XrSpatialAnchorsUpdateExpirationInfoML::uuids"]
        [::std::mem::offset_of!(XrSpatialAnchorsUpdateExpirationInfoML, uuids) - 24usize];
    ["Offset of field: XrSpatialAnchorsUpdateExpirationInfoML::expiration"]
        [::std::mem::offset_of!(XrSpatialAnchorsUpdateExpirationInfoML, expiration) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorsUpdateExpirationCompletionML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub futureResult: XrResult,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorsUpdateExpirationCompletionML"]
        [::std::mem::size_of::<XrSpatialAnchorsUpdateExpirationCompletionML>() - 24usize];
    ["Alignment of XrSpatialAnchorsUpdateExpirationCompletionML"]
        [::std::mem::align_of::<XrSpatialAnchorsUpdateExpirationCompletionML>() - 8usize];
    ["Offset of field: XrSpatialAnchorsUpdateExpirationCompletionML::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorsUpdateExpirationCompletionML, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorsUpdateExpirationCompletionML::next"]
        [::std::mem::offset_of!(XrSpatialAnchorsUpdateExpirationCompletionML, next) - 8usize];
    ["Offset of field: XrSpatialAnchorsUpdateExpirationCompletionML::futureResult"][::std::mem::offset_of!(
        XrSpatialAnchorsUpdateExpirationCompletionML,
        futureResult
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorCompletionResultML {
    pub uuid: XrUuidEXT,
    pub result: XrResult,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorCompletionResultML"]
        [::std::mem::size_of::<XrSpatialAnchorCompletionResultML>() - 20usize];
    ["Alignment of XrSpatialAnchorCompletionResultML"]
        [::std::mem::align_of::<XrSpatialAnchorCompletionResultML>() - 4usize];
    ["Offset of field: XrSpatialAnchorCompletionResultML::uuid"]
        [::std::mem::offset_of!(XrSpatialAnchorCompletionResultML, uuid) - 0usize];
    ["Offset of field: XrSpatialAnchorCompletionResultML::result"]
        [::std::mem::offset_of!(XrSpatialAnchorCompletionResultML, result) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorsPublishCompletionDetailsML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub resultCount: u32,
    pub results: *mut XrSpatialAnchorCompletionResultML,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorsPublishCompletionDetailsML"]
        [::std::mem::size_of::<XrSpatialAnchorsPublishCompletionDetailsML>() - 32usize];
    ["Alignment of XrSpatialAnchorsPublishCompletionDetailsML"]
        [::std::mem::align_of::<XrSpatialAnchorsPublishCompletionDetailsML>() - 8usize];
    ["Offset of field: XrSpatialAnchorsPublishCompletionDetailsML::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorsPublishCompletionDetailsML, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorsPublishCompletionDetailsML::next"]
        [::std::mem::offset_of!(XrSpatialAnchorsPublishCompletionDetailsML, next) - 8usize];
    ["Offset of field: XrSpatialAnchorsPublishCompletionDetailsML::resultCount"]
        [::std::mem::offset_of!(XrSpatialAnchorsPublishCompletionDetailsML, resultCount) - 16usize];
    ["Offset of field: XrSpatialAnchorsPublishCompletionDetailsML::results"]
        [::std::mem::offset_of!(XrSpatialAnchorsPublishCompletionDetailsML, results) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorsDeleteCompletionDetailsML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub resultCount: u32,
    pub results: *mut XrSpatialAnchorCompletionResultML,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorsDeleteCompletionDetailsML"]
        [::std::mem::size_of::<XrSpatialAnchorsDeleteCompletionDetailsML>() - 32usize];
    ["Alignment of XrSpatialAnchorsDeleteCompletionDetailsML"]
        [::std::mem::align_of::<XrSpatialAnchorsDeleteCompletionDetailsML>() - 8usize];
    ["Offset of field: XrSpatialAnchorsDeleteCompletionDetailsML::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorsDeleteCompletionDetailsML, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorsDeleteCompletionDetailsML::next"]
        [::std::mem::offset_of!(XrSpatialAnchorsDeleteCompletionDetailsML, next) - 8usize];
    ["Offset of field: XrSpatialAnchorsDeleteCompletionDetailsML::resultCount"]
        [::std::mem::offset_of!(XrSpatialAnchorsDeleteCompletionDetailsML, resultCount) - 16usize];
    ["Offset of field: XrSpatialAnchorsDeleteCompletionDetailsML::results"]
        [::std::mem::offset_of!(XrSpatialAnchorsDeleteCompletionDetailsML, results) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorsUpdateExpirationCompletionDetailsML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub resultCount: u32,
    pub results: *mut XrSpatialAnchorCompletionResultML,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorsUpdateExpirationCompletionDetailsML"]
        [::std::mem::size_of::<XrSpatialAnchorsUpdateExpirationCompletionDetailsML>() - 32usize];
    ["Alignment of XrSpatialAnchorsUpdateExpirationCompletionDetailsML"]
        [::std::mem::align_of::<XrSpatialAnchorsUpdateExpirationCompletionDetailsML>() - 8usize];
    ["Offset of field: XrSpatialAnchorsUpdateExpirationCompletionDetailsML::type_"][::std::mem::offset_of!(
        XrSpatialAnchorsUpdateExpirationCompletionDetailsML,
        type_
    ) - 0usize];
    ["Offset of field: XrSpatialAnchorsUpdateExpirationCompletionDetailsML::next"][::std::mem::offset_of!(
        XrSpatialAnchorsUpdateExpirationCompletionDetailsML,
        next
    ) - 8usize];
    ["Offset of field: XrSpatialAnchorsUpdateExpirationCompletionDetailsML::resultCount"][::std::mem::offset_of!(
        XrSpatialAnchorsUpdateExpirationCompletionDetailsML,
        resultCount
    )
        - 16usize];
    ["Offset of field: XrSpatialAnchorsUpdateExpirationCompletionDetailsML::results"][::std::mem::offset_of!(
        XrSpatialAnchorsUpdateExpirationCompletionDetailsML,
        results
    ) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorStoreConnectionMSFT_T {
    _unused: [u8; 0],
}
pub type XrSpatialAnchorStoreConnectionMSFT = *mut XrSpatialAnchorStoreConnectionMSFT_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorPersistenceNameMSFT {
    pub name: [::std::os::raw::c_char; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorPersistenceNameMSFT"]
        [::std::mem::size_of::<XrSpatialAnchorPersistenceNameMSFT>() - 256usize];
    ["Alignment of XrSpatialAnchorPersistenceNameMSFT"]
        [::std::mem::align_of::<XrSpatialAnchorPersistenceNameMSFT>() - 1usize];
    ["Offset of field: XrSpatialAnchorPersistenceNameMSFT::name"]
        [::std::mem::offset_of!(XrSpatialAnchorPersistenceNameMSFT, name) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorPersistenceInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub spatialAnchorPersistenceName: XrSpatialAnchorPersistenceNameMSFT,
    pub spatialAnchor: XrSpatialAnchorMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorPersistenceInfoMSFT"]
        [::std::mem::size_of::<XrSpatialAnchorPersistenceInfoMSFT>() - 280usize];
    ["Alignment of XrSpatialAnchorPersistenceInfoMSFT"]
        [::std::mem::align_of::<XrSpatialAnchorPersistenceInfoMSFT>() - 8usize];
    ["Offset of field: XrSpatialAnchorPersistenceInfoMSFT::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorPersistenceInfoMSFT, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorPersistenceInfoMSFT::next"]
        [::std::mem::offset_of!(XrSpatialAnchorPersistenceInfoMSFT, next) - 8usize];
    ["Offset of field: XrSpatialAnchorPersistenceInfoMSFT::spatialAnchorPersistenceName"][::std::mem::offset_of!(
        XrSpatialAnchorPersistenceInfoMSFT,
        spatialAnchorPersistenceName
    )
        - 16usize];
    ["Offset of field: XrSpatialAnchorPersistenceInfoMSFT::spatialAnchor"]
        [::std::mem::offset_of!(XrSpatialAnchorPersistenceInfoMSFT, spatialAnchor) - 272usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub spatialAnchorStore: XrSpatialAnchorStoreConnectionMSFT,
    pub spatialAnchorPersistenceName: XrSpatialAnchorPersistenceNameMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT"]
        [::std::mem::size_of::<XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT>() - 280usize];
    ["Alignment of XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT"]
        [::std::mem::align_of::<XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT>() - 8usize];
    ["Offset of field: XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT::next"]
        [::std::mem::offset_of!(XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT, next) - 8usize];
    ["Offset of field: XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT::spatialAnchorStore"][::std::mem::offset_of!(
        XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT,
        spatialAnchorStore
    )
        - 16usize];
    ["Offset of field: XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT::spatialAnchorPersistenceName"] [:: std :: mem :: offset_of ! (XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT , spatialAnchorPersistenceName) - 24usize] ;
};
pub const XrSceneMarkerTypeMSFT_XR_SCENE_MARKER_TYPE_QR_CODE_MSFT: XrSceneMarkerTypeMSFT = 1;
pub const XrSceneMarkerTypeMSFT_XR_SCENE_MARKER_TYPE_MAX_ENUM_MSFT: XrSceneMarkerTypeMSFT =
    2147483647;
pub type XrSceneMarkerTypeMSFT = ::std::os::raw::c_uint;
pub const XrSceneMarkerQRCodeSymbolTypeMSFT_XR_SCENE_MARKER_QR_CODE_SYMBOL_TYPE_QR_CODE_MSFT:
    XrSceneMarkerQRCodeSymbolTypeMSFT = 1;
pub const XrSceneMarkerQRCodeSymbolTypeMSFT_XR_SCENE_MARKER_QR_CODE_SYMBOL_TYPE_MICRO_QR_CODE_MSFT : XrSceneMarkerQRCodeSymbolTypeMSFT = 2 ;
pub const XrSceneMarkerQRCodeSymbolTypeMSFT_XR_SCENE_MARKER_QRCODE_SYMBOL_TYPE_MAX_ENUM_MSFT:
    XrSceneMarkerQRCodeSymbolTypeMSFT = 2147483647;
pub type XrSceneMarkerQRCodeSymbolTypeMSFT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMarkerMSFT {
    pub markerType: XrSceneMarkerTypeMSFT,
    pub lastSeenTime: XrTime,
    pub center: XrOffset2Df,
    pub size: XrExtent2Df,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneMarkerMSFT"][::std::mem::size_of::<XrSceneMarkerMSFT>() - 32usize];
    ["Alignment of XrSceneMarkerMSFT"][::std::mem::align_of::<XrSceneMarkerMSFT>() - 8usize];
    ["Offset of field: XrSceneMarkerMSFT::markerType"]
        [::std::mem::offset_of!(XrSceneMarkerMSFT, markerType) - 0usize];
    ["Offset of field: XrSceneMarkerMSFT::lastSeenTime"]
        [::std::mem::offset_of!(XrSceneMarkerMSFT, lastSeenTime) - 8usize];
    ["Offset of field: XrSceneMarkerMSFT::center"]
        [::std::mem::offset_of!(XrSceneMarkerMSFT, center) - 16usize];
    ["Offset of field: XrSceneMarkerMSFT::size"]
        [::std::mem::offset_of!(XrSceneMarkerMSFT, size) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMarkersMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub sceneMarkerCapacityInput: u32,
    pub sceneMarkers: *mut XrSceneMarkerMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneMarkersMSFT"][::std::mem::size_of::<XrSceneMarkersMSFT>() - 32usize];
    ["Alignment of XrSceneMarkersMSFT"][::std::mem::align_of::<XrSceneMarkersMSFT>() - 8usize];
    ["Offset of field: XrSceneMarkersMSFT::type_"]
        [::std::mem::offset_of!(XrSceneMarkersMSFT, type_) - 0usize];
    ["Offset of field: XrSceneMarkersMSFT::next"]
        [::std::mem::offset_of!(XrSceneMarkersMSFT, next) - 8usize];
    ["Offset of field: XrSceneMarkersMSFT::sceneMarkerCapacityInput"]
        [::std::mem::offset_of!(XrSceneMarkersMSFT, sceneMarkerCapacityInput) - 16usize];
    ["Offset of field: XrSceneMarkersMSFT::sceneMarkers"]
        [::std::mem::offset_of!(XrSceneMarkersMSFT, sceneMarkers) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMarkerTypeFilterMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub markerTypeCount: u32,
    pub markerTypes: *mut XrSceneMarkerTypeMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneMarkerTypeFilterMSFT"]
        [::std::mem::size_of::<XrSceneMarkerTypeFilterMSFT>() - 32usize];
    ["Alignment of XrSceneMarkerTypeFilterMSFT"]
        [::std::mem::align_of::<XrSceneMarkerTypeFilterMSFT>() - 8usize];
    ["Offset of field: XrSceneMarkerTypeFilterMSFT::type_"]
        [::std::mem::offset_of!(XrSceneMarkerTypeFilterMSFT, type_) - 0usize];
    ["Offset of field: XrSceneMarkerTypeFilterMSFT::next"]
        [::std::mem::offset_of!(XrSceneMarkerTypeFilterMSFT, next) - 8usize];
    ["Offset of field: XrSceneMarkerTypeFilterMSFT::markerTypeCount"]
        [::std::mem::offset_of!(XrSceneMarkerTypeFilterMSFT, markerTypeCount) - 16usize];
    ["Offset of field: XrSceneMarkerTypeFilterMSFT::markerTypes"]
        [::std::mem::offset_of!(XrSceneMarkerTypeFilterMSFT, markerTypes) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMarkerQRCodeMSFT {
    pub symbolType: XrSceneMarkerQRCodeSymbolTypeMSFT,
    pub version: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneMarkerQRCodeMSFT"][::std::mem::size_of::<XrSceneMarkerQRCodeMSFT>() - 8usize];
    ["Alignment of XrSceneMarkerQRCodeMSFT"]
        [::std::mem::align_of::<XrSceneMarkerQRCodeMSFT>() - 4usize];
    ["Offset of field: XrSceneMarkerQRCodeMSFT::symbolType"]
        [::std::mem::offset_of!(XrSceneMarkerQRCodeMSFT, symbolType) - 0usize];
    ["Offset of field: XrSceneMarkerQRCodeMSFT::version"]
        [::std::mem::offset_of!(XrSceneMarkerQRCodeMSFT, version) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneMarkerQRCodesMSFT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub qrCodeCapacityInput: u32,
    pub qrCodes: *mut XrSceneMarkerQRCodeMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneMarkerQRCodesMSFT"]
        [::std::mem::size_of::<XrSceneMarkerQRCodesMSFT>() - 32usize];
    ["Alignment of XrSceneMarkerQRCodesMSFT"]
        [::std::mem::align_of::<XrSceneMarkerQRCodesMSFT>() - 8usize];
    ["Offset of field: XrSceneMarkerQRCodesMSFT::type_"]
        [::std::mem::offset_of!(XrSceneMarkerQRCodesMSFT, type_) - 0usize];
    ["Offset of field: XrSceneMarkerQRCodesMSFT::next"]
        [::std::mem::offset_of!(XrSceneMarkerQRCodesMSFT, next) - 8usize];
    ["Offset of field: XrSceneMarkerQRCodesMSFT::qrCodeCapacityInput"]
        [::std::mem::offset_of!(XrSceneMarkerQRCodesMSFT, qrCodeCapacityInput) - 16usize];
    ["Offset of field: XrSceneMarkerQRCodesMSFT::qrCodes"]
        [::std::mem::offset_of!(XrSceneMarkerQRCodesMSFT, qrCodes) - 24usize];
};
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_PALM_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 0;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_WRIST_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 1;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_THUMB_METACARPAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 2;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_THUMB_PROXIMAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 3;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_THUMB_DISTAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 4;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_THUMB_TIP_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 5;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_INDEX_METACARPAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 6;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_INDEX_PROXIMAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 7;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_INDEX_INTERMEDIATE_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 8;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_INDEX_DISTAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 9;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_INDEX_TIP_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 10;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_MIDDLE_METACARPAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 11;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_MIDDLE_PROXIMAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 12;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_MIDDLE_INTERMEDIATE_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 13;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_MIDDLE_DISTAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 14;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_MIDDLE_TIP_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 15;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_RING_METACARPAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 16;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_RING_PROXIMAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 17;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_RING_INTERMEDIATE_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 18;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_RING_DISTAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 19;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_RING_TIP_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 20;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_LITTLE_METACARPAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 21;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_LITTLE_PROXIMAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 22;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_LITTLE_INTERMEDIATE_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 23;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_LITTLE_DISTAL_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 24;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_LITTLE_TIP_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 25;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_ELBOW_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 26;
pub const XrHandForearmJointULTRALEAP_XR_HAND_FOREARM_JOINT_MAX_ENUM_ULTRALEAP:
    XrHandForearmJointULTRALEAP = 2147483647;
pub type XrHandForearmJointULTRALEAP = ::std::os::raw::c_uint;
pub const XrSpaceQueryActionFB_XR_SPACE_QUERY_ACTION_LOAD_FB: XrSpaceQueryActionFB = 0;
pub const XrSpaceQueryActionFB_XR_SPACE_QUERY_ACTION_MAX_ENUM_FB: XrSpaceQueryActionFB = 2147483647;
pub type XrSpaceQueryActionFB = ::std::os::raw::c_uint;
pub const XrSpaceStorageLocationFB_XR_SPACE_STORAGE_LOCATION_INVALID_FB: XrSpaceStorageLocationFB =
    0;
pub const XrSpaceStorageLocationFB_XR_SPACE_STORAGE_LOCATION_LOCAL_FB: XrSpaceStorageLocationFB = 1;
pub const XrSpaceStorageLocationFB_XR_SPACE_STORAGE_LOCATION_CLOUD_FB: XrSpaceStorageLocationFB = 2;
pub const XrSpaceStorageLocationFB_XR_SPACE_STORAGE_LOCATION_MAX_ENUM_FB: XrSpaceStorageLocationFB =
    2147483647;
pub type XrSpaceStorageLocationFB = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceQueryInfoBaseHeaderFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceQueryInfoBaseHeaderFB"]
        [::std::mem::size_of::<XrSpaceQueryInfoBaseHeaderFB>() - 16usize];
    ["Alignment of XrSpaceQueryInfoBaseHeaderFB"]
        [::std::mem::align_of::<XrSpaceQueryInfoBaseHeaderFB>() - 8usize];
    ["Offset of field: XrSpaceQueryInfoBaseHeaderFB::type_"]
        [::std::mem::offset_of!(XrSpaceQueryInfoBaseHeaderFB, type_) - 0usize];
    ["Offset of field: XrSpaceQueryInfoBaseHeaderFB::next"]
        [::std::mem::offset_of!(XrSpaceQueryInfoBaseHeaderFB, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceFilterInfoBaseHeaderFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceFilterInfoBaseHeaderFB"]
        [::std::mem::size_of::<XrSpaceFilterInfoBaseHeaderFB>() - 16usize];
    ["Alignment of XrSpaceFilterInfoBaseHeaderFB"]
        [::std::mem::align_of::<XrSpaceFilterInfoBaseHeaderFB>() - 8usize];
    ["Offset of field: XrSpaceFilterInfoBaseHeaderFB::type_"]
        [::std::mem::offset_of!(XrSpaceFilterInfoBaseHeaderFB, type_) - 0usize];
    ["Offset of field: XrSpaceFilterInfoBaseHeaderFB::next"]
        [::std::mem::offset_of!(XrSpaceFilterInfoBaseHeaderFB, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceQueryInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub queryAction: XrSpaceQueryActionFB,
    pub maxResultCount: u32,
    pub timeout: XrDuration,
    pub filter: *const XrSpaceFilterInfoBaseHeaderFB,
    pub excludeFilter: *const XrSpaceFilterInfoBaseHeaderFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceQueryInfoFB"][::std::mem::size_of::<XrSpaceQueryInfoFB>() - 48usize];
    ["Alignment of XrSpaceQueryInfoFB"][::std::mem::align_of::<XrSpaceQueryInfoFB>() - 8usize];
    ["Offset of field: XrSpaceQueryInfoFB::type_"]
        [::std::mem::offset_of!(XrSpaceQueryInfoFB, type_) - 0usize];
    ["Offset of field: XrSpaceQueryInfoFB::next"]
        [::std::mem::offset_of!(XrSpaceQueryInfoFB, next) - 8usize];
    ["Offset of field: XrSpaceQueryInfoFB::queryAction"]
        [::std::mem::offset_of!(XrSpaceQueryInfoFB, queryAction) - 16usize];
    ["Offset of field: XrSpaceQueryInfoFB::maxResultCount"]
        [::std::mem::offset_of!(XrSpaceQueryInfoFB, maxResultCount) - 20usize];
    ["Offset of field: XrSpaceQueryInfoFB::timeout"]
        [::std::mem::offset_of!(XrSpaceQueryInfoFB, timeout) - 24usize];
    ["Offset of field: XrSpaceQueryInfoFB::filter"]
        [::std::mem::offset_of!(XrSpaceQueryInfoFB, filter) - 32usize];
    ["Offset of field: XrSpaceQueryInfoFB::excludeFilter"]
        [::std::mem::offset_of!(XrSpaceQueryInfoFB, excludeFilter) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceStorageLocationFilterInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub location: XrSpaceStorageLocationFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceStorageLocationFilterInfoFB"]
        [::std::mem::size_of::<XrSpaceStorageLocationFilterInfoFB>() - 24usize];
    ["Alignment of XrSpaceStorageLocationFilterInfoFB"]
        [::std::mem::align_of::<XrSpaceStorageLocationFilterInfoFB>() - 8usize];
    ["Offset of field: XrSpaceStorageLocationFilterInfoFB::type_"]
        [::std::mem::offset_of!(XrSpaceStorageLocationFilterInfoFB, type_) - 0usize];
    ["Offset of field: XrSpaceStorageLocationFilterInfoFB::next"]
        [::std::mem::offset_of!(XrSpaceStorageLocationFilterInfoFB, next) - 8usize];
    ["Offset of field: XrSpaceStorageLocationFilterInfoFB::location"]
        [::std::mem::offset_of!(XrSpaceStorageLocationFilterInfoFB, location) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceUuidFilterInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub uuidCount: u32,
    pub uuids: *mut XrUuidEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceUuidFilterInfoFB"][::std::mem::size_of::<XrSpaceUuidFilterInfoFB>() - 32usize];
    ["Alignment of XrSpaceUuidFilterInfoFB"]
        [::std::mem::align_of::<XrSpaceUuidFilterInfoFB>() - 8usize];
    ["Offset of field: XrSpaceUuidFilterInfoFB::type_"]
        [::std::mem::offset_of!(XrSpaceUuidFilterInfoFB, type_) - 0usize];
    ["Offset of field: XrSpaceUuidFilterInfoFB::next"]
        [::std::mem::offset_of!(XrSpaceUuidFilterInfoFB, next) - 8usize];
    ["Offset of field: XrSpaceUuidFilterInfoFB::uuidCount"]
        [::std::mem::offset_of!(XrSpaceUuidFilterInfoFB, uuidCount) - 16usize];
    ["Offset of field: XrSpaceUuidFilterInfoFB::uuids"]
        [::std::mem::offset_of!(XrSpaceUuidFilterInfoFB, uuids) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceComponentFilterInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub componentType: XrSpaceComponentTypeFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceComponentFilterInfoFB"]
        [::std::mem::size_of::<XrSpaceComponentFilterInfoFB>() - 24usize];
    ["Alignment of XrSpaceComponentFilterInfoFB"]
        [::std::mem::align_of::<XrSpaceComponentFilterInfoFB>() - 8usize];
    ["Offset of field: XrSpaceComponentFilterInfoFB::type_"]
        [::std::mem::offset_of!(XrSpaceComponentFilterInfoFB, type_) - 0usize];
    ["Offset of field: XrSpaceComponentFilterInfoFB::next"]
        [::std::mem::offset_of!(XrSpaceComponentFilterInfoFB, next) - 8usize];
    ["Offset of field: XrSpaceComponentFilterInfoFB::componentType"]
        [::std::mem::offset_of!(XrSpaceComponentFilterInfoFB, componentType) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceQueryResultFB {
    pub space: XrSpace,
    pub uuid: XrUuidEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceQueryResultFB"][::std::mem::size_of::<XrSpaceQueryResultFB>() - 24usize];
    ["Alignment of XrSpaceQueryResultFB"][::std::mem::align_of::<XrSpaceQueryResultFB>() - 8usize];
    ["Offset of field: XrSpaceQueryResultFB::space"]
        [::std::mem::offset_of!(XrSpaceQueryResultFB, space) - 0usize];
    ["Offset of field: XrSpaceQueryResultFB::uuid"]
        [::std::mem::offset_of!(XrSpaceQueryResultFB, uuid) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceQueryResultsFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub resultCapacityInput: u32,
    pub resultCountOutput: u32,
    pub results: *mut XrSpaceQueryResultFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceQueryResultsFB"][::std::mem::size_of::<XrSpaceQueryResultsFB>() - 32usize];
    ["Alignment of XrSpaceQueryResultsFB"]
        [::std::mem::align_of::<XrSpaceQueryResultsFB>() - 8usize];
    ["Offset of field: XrSpaceQueryResultsFB::type_"]
        [::std::mem::offset_of!(XrSpaceQueryResultsFB, type_) - 0usize];
    ["Offset of field: XrSpaceQueryResultsFB::next"]
        [::std::mem::offset_of!(XrSpaceQueryResultsFB, next) - 8usize];
    ["Offset of field: XrSpaceQueryResultsFB::resultCapacityInput"]
        [::std::mem::offset_of!(XrSpaceQueryResultsFB, resultCapacityInput) - 16usize];
    ["Offset of field: XrSpaceQueryResultsFB::resultCountOutput"]
        [::std::mem::offset_of!(XrSpaceQueryResultsFB, resultCountOutput) - 20usize];
    ["Offset of field: XrSpaceQueryResultsFB::results"]
        [::std::mem::offset_of!(XrSpaceQueryResultsFB, results) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataSpaceQueryResultsAvailableFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestId: XrAsyncRequestIdFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataSpaceQueryResultsAvailableFB"]
        [::std::mem::size_of::<XrEventDataSpaceQueryResultsAvailableFB>() - 24usize];
    ["Alignment of XrEventDataSpaceQueryResultsAvailableFB"]
        [::std::mem::align_of::<XrEventDataSpaceQueryResultsAvailableFB>() - 8usize];
    ["Offset of field: XrEventDataSpaceQueryResultsAvailableFB::type_"]
        [::std::mem::offset_of!(XrEventDataSpaceQueryResultsAvailableFB, type_) - 0usize];
    ["Offset of field: XrEventDataSpaceQueryResultsAvailableFB::next"]
        [::std::mem::offset_of!(XrEventDataSpaceQueryResultsAvailableFB, next) - 8usize];
    ["Offset of field: XrEventDataSpaceQueryResultsAvailableFB::requestId"]
        [::std::mem::offset_of!(XrEventDataSpaceQueryResultsAvailableFB, requestId) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataSpaceQueryCompleteFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestId: XrAsyncRequestIdFB,
    pub result: XrResult,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataSpaceQueryCompleteFB"]
        [::std::mem::size_of::<XrEventDataSpaceQueryCompleteFB>() - 32usize];
    ["Alignment of XrEventDataSpaceQueryCompleteFB"]
        [::std::mem::align_of::<XrEventDataSpaceQueryCompleteFB>() - 8usize];
    ["Offset of field: XrEventDataSpaceQueryCompleteFB::type_"]
        [::std::mem::offset_of!(XrEventDataSpaceQueryCompleteFB, type_) - 0usize];
    ["Offset of field: XrEventDataSpaceQueryCompleteFB::next"]
        [::std::mem::offset_of!(XrEventDataSpaceQueryCompleteFB, next) - 8usize];
    ["Offset of field: XrEventDataSpaceQueryCompleteFB::requestId"]
        [::std::mem::offset_of!(XrEventDataSpaceQueryCompleteFB, requestId) - 16usize];
    ["Offset of field: XrEventDataSpaceQueryCompleteFB::result"]
        [::std::mem::offset_of!(XrEventDataSpaceQueryCompleteFB, result) - 24usize];
};
pub const XrSpacePersistenceModeFB_XR_SPACE_PERSISTENCE_MODE_INVALID_FB: XrSpacePersistenceModeFB =
    0;
pub const XrSpacePersistenceModeFB_XR_SPACE_PERSISTENCE_MODE_INDEFINITE_FB:
    XrSpacePersistenceModeFB = 1;
pub const XrSpacePersistenceModeFB_XR_SPACE_PERSISTENCE_MODE_MAX_ENUM_FB: XrSpacePersistenceModeFB =
    2147483647;
pub type XrSpacePersistenceModeFB = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceSaveInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub space: XrSpace,
    pub location: XrSpaceStorageLocationFB,
    pub persistenceMode: XrSpacePersistenceModeFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceSaveInfoFB"][::std::mem::size_of::<XrSpaceSaveInfoFB>() - 32usize];
    ["Alignment of XrSpaceSaveInfoFB"][::std::mem::align_of::<XrSpaceSaveInfoFB>() - 8usize];
    ["Offset of field: XrSpaceSaveInfoFB::type_"]
        [::std::mem::offset_of!(XrSpaceSaveInfoFB, type_) - 0usize];
    ["Offset of field: XrSpaceSaveInfoFB::next"]
        [::std::mem::offset_of!(XrSpaceSaveInfoFB, next) - 8usize];
    ["Offset of field: XrSpaceSaveInfoFB::space"]
        [::std::mem::offset_of!(XrSpaceSaveInfoFB, space) - 16usize];
    ["Offset of field: XrSpaceSaveInfoFB::location"]
        [::std::mem::offset_of!(XrSpaceSaveInfoFB, location) - 24usize];
    ["Offset of field: XrSpaceSaveInfoFB::persistenceMode"]
        [::std::mem::offset_of!(XrSpaceSaveInfoFB, persistenceMode) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceEraseInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub space: XrSpace,
    pub location: XrSpaceStorageLocationFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceEraseInfoFB"][::std::mem::size_of::<XrSpaceEraseInfoFB>() - 32usize];
    ["Alignment of XrSpaceEraseInfoFB"][::std::mem::align_of::<XrSpaceEraseInfoFB>() - 8usize];
    ["Offset of field: XrSpaceEraseInfoFB::type_"]
        [::std::mem::offset_of!(XrSpaceEraseInfoFB, type_) - 0usize];
    ["Offset of field: XrSpaceEraseInfoFB::next"]
        [::std::mem::offset_of!(XrSpaceEraseInfoFB, next) - 8usize];
    ["Offset of field: XrSpaceEraseInfoFB::space"]
        [::std::mem::offset_of!(XrSpaceEraseInfoFB, space) - 16usize];
    ["Offset of field: XrSpaceEraseInfoFB::location"]
        [::std::mem::offset_of!(XrSpaceEraseInfoFB, location) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataSpaceSaveCompleteFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestId: XrAsyncRequestIdFB,
    pub result: XrResult,
    pub space: XrSpace,
    pub uuid: XrUuidEXT,
    pub location: XrSpaceStorageLocationFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataSpaceSaveCompleteFB"]
        [::std::mem::size_of::<XrEventDataSpaceSaveCompleteFB>() - 64usize];
    ["Alignment of XrEventDataSpaceSaveCompleteFB"]
        [::std::mem::align_of::<XrEventDataSpaceSaveCompleteFB>() - 8usize];
    ["Offset of field: XrEventDataSpaceSaveCompleteFB::type_"]
        [::std::mem::offset_of!(XrEventDataSpaceSaveCompleteFB, type_) - 0usize];
    ["Offset of field: XrEventDataSpaceSaveCompleteFB::next"]
        [::std::mem::offset_of!(XrEventDataSpaceSaveCompleteFB, next) - 8usize];
    ["Offset of field: XrEventDataSpaceSaveCompleteFB::requestId"]
        [::std::mem::offset_of!(XrEventDataSpaceSaveCompleteFB, requestId) - 16usize];
    ["Offset of field: XrEventDataSpaceSaveCompleteFB::result"]
        [::std::mem::offset_of!(XrEventDataSpaceSaveCompleteFB, result) - 24usize];
    ["Offset of field: XrEventDataSpaceSaveCompleteFB::space"]
        [::std::mem::offset_of!(XrEventDataSpaceSaveCompleteFB, space) - 32usize];
    ["Offset of field: XrEventDataSpaceSaveCompleteFB::uuid"]
        [::std::mem::offset_of!(XrEventDataSpaceSaveCompleteFB, uuid) - 40usize];
    ["Offset of field: XrEventDataSpaceSaveCompleteFB::location"]
        [::std::mem::offset_of!(XrEventDataSpaceSaveCompleteFB, location) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataSpaceEraseCompleteFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestId: XrAsyncRequestIdFB,
    pub result: XrResult,
    pub space: XrSpace,
    pub uuid: XrUuidEXT,
    pub location: XrSpaceStorageLocationFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataSpaceEraseCompleteFB"]
        [::std::mem::size_of::<XrEventDataSpaceEraseCompleteFB>() - 64usize];
    ["Alignment of XrEventDataSpaceEraseCompleteFB"]
        [::std::mem::align_of::<XrEventDataSpaceEraseCompleteFB>() - 8usize];
    ["Offset of field: XrEventDataSpaceEraseCompleteFB::type_"]
        [::std::mem::offset_of!(XrEventDataSpaceEraseCompleteFB, type_) - 0usize];
    ["Offset of field: XrEventDataSpaceEraseCompleteFB::next"]
        [::std::mem::offset_of!(XrEventDataSpaceEraseCompleteFB, next) - 8usize];
    ["Offset of field: XrEventDataSpaceEraseCompleteFB::requestId"]
        [::std::mem::offset_of!(XrEventDataSpaceEraseCompleteFB, requestId) - 16usize];
    ["Offset of field: XrEventDataSpaceEraseCompleteFB::result"]
        [::std::mem::offset_of!(XrEventDataSpaceEraseCompleteFB, result) - 24usize];
    ["Offset of field: XrEventDataSpaceEraseCompleteFB::space"]
        [::std::mem::offset_of!(XrEventDataSpaceEraseCompleteFB, space) - 32usize];
    ["Offset of field: XrEventDataSpaceEraseCompleteFB::uuid"]
        [::std::mem::offset_of!(XrEventDataSpaceEraseCompleteFB, uuid) - 40usize];
    ["Offset of field: XrEventDataSpaceEraseCompleteFB::location"]
        [::std::mem::offset_of!(XrEventDataSpaceEraseCompleteFB, location) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceUserFB_T {
    _unused: [u8; 0],
}
pub type XrSpaceUserFB = *mut XrSpaceUserFB_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceShareInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub spaceCount: u32,
    pub spaces: *mut XrSpace,
    pub userCount: u32,
    pub users: *mut XrSpaceUserFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceShareInfoFB"][::std::mem::size_of::<XrSpaceShareInfoFB>() - 48usize];
    ["Alignment of XrSpaceShareInfoFB"][::std::mem::align_of::<XrSpaceShareInfoFB>() - 8usize];
    ["Offset of field: XrSpaceShareInfoFB::type_"]
        [::std::mem::offset_of!(XrSpaceShareInfoFB, type_) - 0usize];
    ["Offset of field: XrSpaceShareInfoFB::next"]
        [::std::mem::offset_of!(XrSpaceShareInfoFB, next) - 8usize];
    ["Offset of field: XrSpaceShareInfoFB::spaceCount"]
        [::std::mem::offset_of!(XrSpaceShareInfoFB, spaceCount) - 16usize];
    ["Offset of field: XrSpaceShareInfoFB::spaces"]
        [::std::mem::offset_of!(XrSpaceShareInfoFB, spaces) - 24usize];
    ["Offset of field: XrSpaceShareInfoFB::userCount"]
        [::std::mem::offset_of!(XrSpaceShareInfoFB, userCount) - 32usize];
    ["Offset of field: XrSpaceShareInfoFB::users"]
        [::std::mem::offset_of!(XrSpaceShareInfoFB, users) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataSpaceShareCompleteFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestId: XrAsyncRequestIdFB,
    pub result: XrResult,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataSpaceShareCompleteFB"]
        [::std::mem::size_of::<XrEventDataSpaceShareCompleteFB>() - 32usize];
    ["Alignment of XrEventDataSpaceShareCompleteFB"]
        [::std::mem::align_of::<XrEventDataSpaceShareCompleteFB>() - 8usize];
    ["Offset of field: XrEventDataSpaceShareCompleteFB::type_"]
        [::std::mem::offset_of!(XrEventDataSpaceShareCompleteFB, type_) - 0usize];
    ["Offset of field: XrEventDataSpaceShareCompleteFB::next"]
        [::std::mem::offset_of!(XrEventDataSpaceShareCompleteFB, next) - 8usize];
    ["Offset of field: XrEventDataSpaceShareCompleteFB::requestId"]
        [::std::mem::offset_of!(XrEventDataSpaceShareCompleteFB, requestId) - 16usize];
    ["Offset of field: XrEventDataSpaceShareCompleteFB::result"]
        [::std::mem::offset_of!(XrEventDataSpaceShareCompleteFB, result) - 24usize];
};
pub type XrCompositionLayerSpaceWarpInfoFlagsFB = XrFlags64;
pub const XR_COMPOSITION_LAYER_SPACE_WARP_INFO_FRAME_SKIP_BIT_FB:
    XrCompositionLayerSpaceWarpInfoFlagsFB = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerSpaceWarpInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerSpaceWarpInfoFlagsFB,
    pub motionVectorSubImage: XrSwapchainSubImage,
    pub appSpaceDeltaPose: XrPosef,
    pub depthSubImage: XrSwapchainSubImage,
    pub minDepth: f32,
    pub maxDepth: f32,
    pub nearZ: f32,
    pub farZ: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCompositionLayerSpaceWarpInfoFB"]
        [::std::mem::size_of::<XrCompositionLayerSpaceWarpInfoFB>() - 136usize];
    ["Alignment of XrCompositionLayerSpaceWarpInfoFB"]
        [::std::mem::align_of::<XrCompositionLayerSpaceWarpInfoFB>() - 8usize];
    ["Offset of field: XrCompositionLayerSpaceWarpInfoFB::type_"]
        [::std::mem::offset_of!(XrCompositionLayerSpaceWarpInfoFB, type_) - 0usize];
    ["Offset of field: XrCompositionLayerSpaceWarpInfoFB::next"]
        [::std::mem::offset_of!(XrCompositionLayerSpaceWarpInfoFB, next) - 8usize];
    ["Offset of field: XrCompositionLayerSpaceWarpInfoFB::layerFlags"]
        [::std::mem::offset_of!(XrCompositionLayerSpaceWarpInfoFB, layerFlags) - 16usize];
    ["Offset of field: XrCompositionLayerSpaceWarpInfoFB::motionVectorSubImage"]
        [::std::mem::offset_of!(XrCompositionLayerSpaceWarpInfoFB, motionVectorSubImage) - 24usize];
    ["Offset of field: XrCompositionLayerSpaceWarpInfoFB::appSpaceDeltaPose"]
        [::std::mem::offset_of!(XrCompositionLayerSpaceWarpInfoFB, appSpaceDeltaPose) - 56usize];
    ["Offset of field: XrCompositionLayerSpaceWarpInfoFB::depthSubImage"]
        [::std::mem::offset_of!(XrCompositionLayerSpaceWarpInfoFB, depthSubImage) - 88usize];
    ["Offset of field: XrCompositionLayerSpaceWarpInfoFB::minDepth"]
        [::std::mem::offset_of!(XrCompositionLayerSpaceWarpInfoFB, minDepth) - 120usize];
    ["Offset of field: XrCompositionLayerSpaceWarpInfoFB::maxDepth"]
        [::std::mem::offset_of!(XrCompositionLayerSpaceWarpInfoFB, maxDepth) - 124usize];
    ["Offset of field: XrCompositionLayerSpaceWarpInfoFB::nearZ"]
        [::std::mem::offset_of!(XrCompositionLayerSpaceWarpInfoFB, nearZ) - 128usize];
    ["Offset of field: XrCompositionLayerSpaceWarpInfoFB::farZ"]
        [::std::mem::offset_of!(XrCompositionLayerSpaceWarpInfoFB, farZ) - 132usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemSpaceWarpPropertiesFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub recommendedMotionVectorImageRectWidth: u32,
    pub recommendedMotionVectorImageRectHeight: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemSpaceWarpPropertiesFB"]
        [::std::mem::size_of::<XrSystemSpaceWarpPropertiesFB>() - 24usize];
    ["Alignment of XrSystemSpaceWarpPropertiesFB"]
        [::std::mem::align_of::<XrSystemSpaceWarpPropertiesFB>() - 8usize];
    ["Offset of field: XrSystemSpaceWarpPropertiesFB::type_"]
        [::std::mem::offset_of!(XrSystemSpaceWarpPropertiesFB, type_) - 0usize];
    ["Offset of field: XrSystemSpaceWarpPropertiesFB::next"]
        [::std::mem::offset_of!(XrSystemSpaceWarpPropertiesFB, next) - 8usize];
    ["Offset of field: XrSystemSpaceWarpPropertiesFB::recommendedMotionVectorImageRectWidth"][::std::mem::offset_of!(
        XrSystemSpaceWarpPropertiesFB,
        recommendedMotionVectorImageRectWidth
    )
        - 16usize];
    ["Offset of field: XrSystemSpaceWarpPropertiesFB::recommendedMotionVectorImageRectHeight"][::std::mem::offset_of!(
        XrSystemSpaceWarpPropertiesFB,
        recommendedMotionVectorImageRectHeight
    )
        - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHapticAmplitudeEnvelopeVibrationFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub duration: XrDuration,
    pub amplitudeCount: u32,
    pub amplitudes: *const f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHapticAmplitudeEnvelopeVibrationFB"]
        [::std::mem::size_of::<XrHapticAmplitudeEnvelopeVibrationFB>() - 40usize];
    ["Alignment of XrHapticAmplitudeEnvelopeVibrationFB"]
        [::std::mem::align_of::<XrHapticAmplitudeEnvelopeVibrationFB>() - 8usize];
    ["Offset of field: XrHapticAmplitudeEnvelopeVibrationFB::type_"]
        [::std::mem::offset_of!(XrHapticAmplitudeEnvelopeVibrationFB, type_) - 0usize];
    ["Offset of field: XrHapticAmplitudeEnvelopeVibrationFB::next"]
        [::std::mem::offset_of!(XrHapticAmplitudeEnvelopeVibrationFB, next) - 8usize];
    ["Offset of field: XrHapticAmplitudeEnvelopeVibrationFB::duration"]
        [::std::mem::offset_of!(XrHapticAmplitudeEnvelopeVibrationFB, duration) - 16usize];
    ["Offset of field: XrHapticAmplitudeEnvelopeVibrationFB::amplitudeCount"]
        [::std::mem::offset_of!(XrHapticAmplitudeEnvelopeVibrationFB, amplitudeCount) - 24usize];
    ["Offset of field: XrHapticAmplitudeEnvelopeVibrationFB::amplitudes"]
        [::std::mem::offset_of!(XrHapticAmplitudeEnvelopeVibrationFB, amplitudes) - 32usize];
};
pub type XrSemanticLabelsSupportFlagsFB = XrFlags64;
pub const XR_SEMANTIC_LABELS_SUPPORT_MULTIPLE_SEMANTIC_LABELS_BIT_FB:
    XrSemanticLabelsSupportFlagsFB = 1;
pub const XR_SEMANTIC_LABELS_SUPPORT_ACCEPT_DESK_TO_TABLE_MIGRATION_BIT_FB:
    XrSemanticLabelsSupportFlagsFB = 2;
pub const XR_SEMANTIC_LABELS_SUPPORT_ACCEPT_INVISIBLE_WALL_FACE_BIT_FB:
    XrSemanticLabelsSupportFlagsFB = 4;
pub type XrExtent3DfFB = XrExtent3Df;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrOffset3DfFB {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrOffset3DfFB"][::std::mem::size_of::<XrOffset3DfFB>() - 12usize];
    ["Alignment of XrOffset3DfFB"][::std::mem::align_of::<XrOffset3DfFB>() - 4usize];
    ["Offset of field: XrOffset3DfFB::x"][::std::mem::offset_of!(XrOffset3DfFB, x) - 0usize];
    ["Offset of field: XrOffset3DfFB::y"][::std::mem::offset_of!(XrOffset3DfFB, y) - 4usize];
    ["Offset of field: XrOffset3DfFB::z"][::std::mem::offset_of!(XrOffset3DfFB, z) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRect3DfFB {
    pub offset: XrOffset3DfFB,
    pub extent: XrExtent3DfFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrRect3DfFB"][::std::mem::size_of::<XrRect3DfFB>() - 24usize];
    ["Alignment of XrRect3DfFB"][::std::mem::align_of::<XrRect3DfFB>() - 4usize];
    ["Offset of field: XrRect3DfFB::offset"][::std::mem::offset_of!(XrRect3DfFB, offset) - 0usize];
    ["Offset of field: XrRect3DfFB::extent"][::std::mem::offset_of!(XrRect3DfFB, extent) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSemanticLabelsFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub bufferCapacityInput: u32,
    pub bufferCountOutput: u32,
    pub buffer: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSemanticLabelsFB"][::std::mem::size_of::<XrSemanticLabelsFB>() - 32usize];
    ["Alignment of XrSemanticLabelsFB"][::std::mem::align_of::<XrSemanticLabelsFB>() - 8usize];
    ["Offset of field: XrSemanticLabelsFB::type_"]
        [::std::mem::offset_of!(XrSemanticLabelsFB, type_) - 0usize];
    ["Offset of field: XrSemanticLabelsFB::next"]
        [::std::mem::offset_of!(XrSemanticLabelsFB, next) - 8usize];
    ["Offset of field: XrSemanticLabelsFB::bufferCapacityInput"]
        [::std::mem::offset_of!(XrSemanticLabelsFB, bufferCapacityInput) - 16usize];
    ["Offset of field: XrSemanticLabelsFB::bufferCountOutput"]
        [::std::mem::offset_of!(XrSemanticLabelsFB, bufferCountOutput) - 20usize];
    ["Offset of field: XrSemanticLabelsFB::buffer"]
        [::std::mem::offset_of!(XrSemanticLabelsFB, buffer) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRoomLayoutFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub floorUuid: XrUuidEXT,
    pub ceilingUuid: XrUuidEXT,
    pub wallUuidCapacityInput: u32,
    pub wallUuidCountOutput: u32,
    pub wallUuids: *mut XrUuidEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrRoomLayoutFB"][::std::mem::size_of::<XrRoomLayoutFB>() - 64usize];
    ["Alignment of XrRoomLayoutFB"][::std::mem::align_of::<XrRoomLayoutFB>() - 8usize];
    ["Offset of field: XrRoomLayoutFB::type_"]
        [::std::mem::offset_of!(XrRoomLayoutFB, type_) - 0usize];
    ["Offset of field: XrRoomLayoutFB::next"]
        [::std::mem::offset_of!(XrRoomLayoutFB, next) - 8usize];
    ["Offset of field: XrRoomLayoutFB::floorUuid"]
        [::std::mem::offset_of!(XrRoomLayoutFB, floorUuid) - 16usize];
    ["Offset of field: XrRoomLayoutFB::ceilingUuid"]
        [::std::mem::offset_of!(XrRoomLayoutFB, ceilingUuid) - 32usize];
    ["Offset of field: XrRoomLayoutFB::wallUuidCapacityInput"]
        [::std::mem::offset_of!(XrRoomLayoutFB, wallUuidCapacityInput) - 48usize];
    ["Offset of field: XrRoomLayoutFB::wallUuidCountOutput"]
        [::std::mem::offset_of!(XrRoomLayoutFB, wallUuidCountOutput) - 52usize];
    ["Offset of field: XrRoomLayoutFB::wallUuids"]
        [::std::mem::offset_of!(XrRoomLayoutFB, wallUuids) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBoundary2DFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub vertexCapacityInput: u32,
    pub vertexCountOutput: u32,
    pub vertices: *mut XrVector2f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrBoundary2DFB"][::std::mem::size_of::<XrBoundary2DFB>() - 32usize];
    ["Alignment of XrBoundary2DFB"][::std::mem::align_of::<XrBoundary2DFB>() - 8usize];
    ["Offset of field: XrBoundary2DFB::type_"]
        [::std::mem::offset_of!(XrBoundary2DFB, type_) - 0usize];
    ["Offset of field: XrBoundary2DFB::next"]
        [::std::mem::offset_of!(XrBoundary2DFB, next) - 8usize];
    ["Offset of field: XrBoundary2DFB::vertexCapacityInput"]
        [::std::mem::offset_of!(XrBoundary2DFB, vertexCapacityInput) - 16usize];
    ["Offset of field: XrBoundary2DFB::vertexCountOutput"]
        [::std::mem::offset_of!(XrBoundary2DFB, vertexCountOutput) - 20usize];
    ["Offset of field: XrBoundary2DFB::vertices"]
        [::std::mem::offset_of!(XrBoundary2DFB, vertices) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSemanticLabelsSupportInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub flags: XrSemanticLabelsSupportFlagsFB,
    pub recognizedLabels: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSemanticLabelsSupportInfoFB"]
        [::std::mem::size_of::<XrSemanticLabelsSupportInfoFB>() - 32usize];
    ["Alignment of XrSemanticLabelsSupportInfoFB"]
        [::std::mem::align_of::<XrSemanticLabelsSupportInfoFB>() - 8usize];
    ["Offset of field: XrSemanticLabelsSupportInfoFB::type_"]
        [::std::mem::offset_of!(XrSemanticLabelsSupportInfoFB, type_) - 0usize];
    ["Offset of field: XrSemanticLabelsSupportInfoFB::next"]
        [::std::mem::offset_of!(XrSemanticLabelsSupportInfoFB, next) - 8usize];
    ["Offset of field: XrSemanticLabelsSupportInfoFB::flags"]
        [::std::mem::offset_of!(XrSemanticLabelsSupportInfoFB, flags) - 16usize];
    ["Offset of field: XrSemanticLabelsSupportInfoFB::recognizedLabels"]
        [::std::mem::offset_of!(XrSemanticLabelsSupportInfoFB, recognizedLabels) - 24usize];
};
pub type XrDigitalLensControlFlagsALMALENCE = XrFlags64;
pub const XR_DIGITAL_LENS_CONTROL_PROCESSING_DISABLE_BIT_ALMALENCE:
    XrDigitalLensControlFlagsALMALENCE = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrDigitalLensControlALMALENCE {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub flags: XrDigitalLensControlFlagsALMALENCE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrDigitalLensControlALMALENCE"]
        [::std::mem::size_of::<XrDigitalLensControlALMALENCE>() - 24usize];
    ["Alignment of XrDigitalLensControlALMALENCE"]
        [::std::mem::align_of::<XrDigitalLensControlALMALENCE>() - 8usize];
    ["Offset of field: XrDigitalLensControlALMALENCE::type_"]
        [::std::mem::offset_of!(XrDigitalLensControlALMALENCE, type_) - 0usize];
    ["Offset of field: XrDigitalLensControlALMALENCE::next"]
        [::std::mem::offset_of!(XrDigitalLensControlALMALENCE, next) - 8usize];
    ["Offset of field: XrDigitalLensControlALMALENCE::flags"]
        [::std::mem::offset_of!(XrDigitalLensControlALMALENCE, flags) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataSceneCaptureCompleteFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestId: XrAsyncRequestIdFB,
    pub result: XrResult,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataSceneCaptureCompleteFB"]
        [::std::mem::size_of::<XrEventDataSceneCaptureCompleteFB>() - 32usize];
    ["Alignment of XrEventDataSceneCaptureCompleteFB"]
        [::std::mem::align_of::<XrEventDataSceneCaptureCompleteFB>() - 8usize];
    ["Offset of field: XrEventDataSceneCaptureCompleteFB::type_"]
        [::std::mem::offset_of!(XrEventDataSceneCaptureCompleteFB, type_) - 0usize];
    ["Offset of field: XrEventDataSceneCaptureCompleteFB::next"]
        [::std::mem::offset_of!(XrEventDataSceneCaptureCompleteFB, next) - 8usize];
    ["Offset of field: XrEventDataSceneCaptureCompleteFB::requestId"]
        [::std::mem::offset_of!(XrEventDataSceneCaptureCompleteFB, requestId) - 16usize];
    ["Offset of field: XrEventDataSceneCaptureCompleteFB::result"]
        [::std::mem::offset_of!(XrEventDataSceneCaptureCompleteFB, result) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSceneCaptureRequestInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestByteCount: u32,
    pub request: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSceneCaptureRequestInfoFB"]
        [::std::mem::size_of::<XrSceneCaptureRequestInfoFB>() - 32usize];
    ["Alignment of XrSceneCaptureRequestInfoFB"]
        [::std::mem::align_of::<XrSceneCaptureRequestInfoFB>() - 8usize];
    ["Offset of field: XrSceneCaptureRequestInfoFB::type_"]
        [::std::mem::offset_of!(XrSceneCaptureRequestInfoFB, type_) - 0usize];
    ["Offset of field: XrSceneCaptureRequestInfoFB::next"]
        [::std::mem::offset_of!(XrSceneCaptureRequestInfoFB, next) - 8usize];
    ["Offset of field: XrSceneCaptureRequestInfoFB::requestByteCount"]
        [::std::mem::offset_of!(XrSceneCaptureRequestInfoFB, requestByteCount) - 16usize];
    ["Offset of field: XrSceneCaptureRequestInfoFB::request"]
        [::std::mem::offset_of!(XrSceneCaptureRequestInfoFB, request) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceContainerFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub uuidCapacityInput: u32,
    pub uuidCountOutput: u32,
    pub uuids: *mut XrUuidEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceContainerFB"][::std::mem::size_of::<XrSpaceContainerFB>() - 32usize];
    ["Alignment of XrSpaceContainerFB"][::std::mem::align_of::<XrSpaceContainerFB>() - 8usize];
    ["Offset of field: XrSpaceContainerFB::type_"]
        [::std::mem::offset_of!(XrSpaceContainerFB, type_) - 0usize];
    ["Offset of field: XrSpaceContainerFB::next"]
        [::std::mem::offset_of!(XrSpaceContainerFB, next) - 8usize];
    ["Offset of field: XrSpaceContainerFB::uuidCapacityInput"]
        [::std::mem::offset_of!(XrSpaceContainerFB, uuidCapacityInput) - 16usize];
    ["Offset of field: XrSpaceContainerFB::uuidCountOutput"]
        [::std::mem::offset_of!(XrSpaceContainerFB, uuidCountOutput) - 20usize];
    ["Offset of field: XrSpaceContainerFB::uuids"]
        [::std::mem::offset_of!(XrSpaceContainerFB, uuids) - 24usize];
};
pub type XrFoveationEyeTrackedProfileCreateFlagsMETA = XrFlags64;
pub type XrFoveationEyeTrackedStateFlagsMETA = XrFlags64;
pub const XR_FOVEATION_EYE_TRACKED_STATE_VALID_BIT_META: XrFoveationEyeTrackedStateFlagsMETA = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFoveationEyeTrackedProfileCreateInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub flags: XrFoveationEyeTrackedProfileCreateFlagsMETA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFoveationEyeTrackedProfileCreateInfoMETA"]
        [::std::mem::size_of::<XrFoveationEyeTrackedProfileCreateInfoMETA>() - 24usize];
    ["Alignment of XrFoveationEyeTrackedProfileCreateInfoMETA"]
        [::std::mem::align_of::<XrFoveationEyeTrackedProfileCreateInfoMETA>() - 8usize];
    ["Offset of field: XrFoveationEyeTrackedProfileCreateInfoMETA::type_"]
        [::std::mem::offset_of!(XrFoveationEyeTrackedProfileCreateInfoMETA, type_) - 0usize];
    ["Offset of field: XrFoveationEyeTrackedProfileCreateInfoMETA::next"]
        [::std::mem::offset_of!(XrFoveationEyeTrackedProfileCreateInfoMETA, next) - 8usize];
    ["Offset of field: XrFoveationEyeTrackedProfileCreateInfoMETA::flags"]
        [::std::mem::offset_of!(XrFoveationEyeTrackedProfileCreateInfoMETA, flags) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFoveationEyeTrackedStateMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub foveationCenter: [XrVector2f; 2usize],
    pub flags: XrFoveationEyeTrackedStateFlagsMETA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFoveationEyeTrackedStateMETA"]
        [::std::mem::size_of::<XrFoveationEyeTrackedStateMETA>() - 40usize];
    ["Alignment of XrFoveationEyeTrackedStateMETA"]
        [::std::mem::align_of::<XrFoveationEyeTrackedStateMETA>() - 8usize];
    ["Offset of field: XrFoveationEyeTrackedStateMETA::type_"]
        [::std::mem::offset_of!(XrFoveationEyeTrackedStateMETA, type_) - 0usize];
    ["Offset of field: XrFoveationEyeTrackedStateMETA::next"]
        [::std::mem::offset_of!(XrFoveationEyeTrackedStateMETA, next) - 8usize];
    ["Offset of field: XrFoveationEyeTrackedStateMETA::foveationCenter"]
        [::std::mem::offset_of!(XrFoveationEyeTrackedStateMETA, foveationCenter) - 16usize];
    ["Offset of field: XrFoveationEyeTrackedStateMETA::flags"]
        [::std::mem::offset_of!(XrFoveationEyeTrackedStateMETA, flags) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemFoveationEyeTrackedPropertiesMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsFoveationEyeTracked: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemFoveationEyeTrackedPropertiesMETA"]
        [::std::mem::size_of::<XrSystemFoveationEyeTrackedPropertiesMETA>() - 24usize];
    ["Alignment of XrSystemFoveationEyeTrackedPropertiesMETA"]
        [::std::mem::align_of::<XrSystemFoveationEyeTrackedPropertiesMETA>() - 8usize];
    ["Offset of field: XrSystemFoveationEyeTrackedPropertiesMETA::type_"]
        [::std::mem::offset_of!(XrSystemFoveationEyeTrackedPropertiesMETA, type_) - 0usize];
    ["Offset of field: XrSystemFoveationEyeTrackedPropertiesMETA::next"]
        [::std::mem::offset_of!(XrSystemFoveationEyeTrackedPropertiesMETA, next) - 8usize];
    ["Offset of field: XrSystemFoveationEyeTrackedPropertiesMETA::supportsFoveationEyeTracked"][::std::mem::offset_of!(
        XrSystemFoveationEyeTrackedPropertiesMETA,
        supportsFoveationEyeTracked
    )
        - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFaceTrackerFB_T {
    _unused: [u8; 0],
}
pub type XrFaceTrackerFB = *mut XrFaceTrackerFB_T;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_BROW_LOWERER_L_FB: XrFaceExpressionFB = 0;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_BROW_LOWERER_R_FB: XrFaceExpressionFB = 1;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_CHEEK_PUFF_L_FB: XrFaceExpressionFB = 2;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_CHEEK_PUFF_R_FB: XrFaceExpressionFB = 3;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_CHEEK_RAISER_L_FB: XrFaceExpressionFB = 4;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_CHEEK_RAISER_R_FB: XrFaceExpressionFB = 5;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_CHEEK_SUCK_L_FB: XrFaceExpressionFB = 6;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_CHEEK_SUCK_R_FB: XrFaceExpressionFB = 7;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_CHIN_RAISER_B_FB: XrFaceExpressionFB = 8;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_CHIN_RAISER_T_FB: XrFaceExpressionFB = 9;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_DIMPLER_L_FB: XrFaceExpressionFB = 10;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_DIMPLER_R_FB: XrFaceExpressionFB = 11;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_EYES_CLOSED_L_FB: XrFaceExpressionFB = 12;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_EYES_CLOSED_R_FB: XrFaceExpressionFB = 13;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_EYES_LOOK_DOWN_L_FB: XrFaceExpressionFB = 14;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_EYES_LOOK_DOWN_R_FB: XrFaceExpressionFB = 15;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_EYES_LOOK_LEFT_L_FB: XrFaceExpressionFB = 16;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_EYES_LOOK_LEFT_R_FB: XrFaceExpressionFB = 17;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_EYES_LOOK_RIGHT_L_FB: XrFaceExpressionFB = 18;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_EYES_LOOK_RIGHT_R_FB: XrFaceExpressionFB = 19;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_EYES_LOOK_UP_L_FB: XrFaceExpressionFB = 20;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_EYES_LOOK_UP_R_FB: XrFaceExpressionFB = 21;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_INNER_BROW_RAISER_L_FB: XrFaceExpressionFB = 22;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_INNER_BROW_RAISER_R_FB: XrFaceExpressionFB = 23;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_JAW_DROP_FB: XrFaceExpressionFB = 24;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_JAW_SIDEWAYS_LEFT_FB: XrFaceExpressionFB = 25;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_JAW_SIDEWAYS_RIGHT_FB: XrFaceExpressionFB = 26;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_JAW_THRUST_FB: XrFaceExpressionFB = 27;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LID_TIGHTENER_L_FB: XrFaceExpressionFB = 28;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LID_TIGHTENER_R_FB: XrFaceExpressionFB = 29;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_CORNER_DEPRESSOR_L_FB: XrFaceExpressionFB = 30;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_CORNER_DEPRESSOR_R_FB: XrFaceExpressionFB = 31;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_CORNER_PULLER_L_FB: XrFaceExpressionFB = 32;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_CORNER_PULLER_R_FB: XrFaceExpressionFB = 33;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_FUNNELER_LB_FB: XrFaceExpressionFB = 34;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_FUNNELER_LT_FB: XrFaceExpressionFB = 35;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_FUNNELER_RB_FB: XrFaceExpressionFB = 36;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_FUNNELER_RT_FB: XrFaceExpressionFB = 37;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_PRESSOR_L_FB: XrFaceExpressionFB = 38;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_PRESSOR_R_FB: XrFaceExpressionFB = 39;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_PUCKER_L_FB: XrFaceExpressionFB = 40;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_PUCKER_R_FB: XrFaceExpressionFB = 41;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_STRETCHER_L_FB: XrFaceExpressionFB = 42;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_STRETCHER_R_FB: XrFaceExpressionFB = 43;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_SUCK_LB_FB: XrFaceExpressionFB = 44;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_SUCK_LT_FB: XrFaceExpressionFB = 45;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_SUCK_RB_FB: XrFaceExpressionFB = 46;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_SUCK_RT_FB: XrFaceExpressionFB = 47;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_TIGHTENER_L_FB: XrFaceExpressionFB = 48;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIP_TIGHTENER_R_FB: XrFaceExpressionFB = 49;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LIPS_TOWARD_FB: XrFaceExpressionFB = 50;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LOWER_LIP_DEPRESSOR_L_FB: XrFaceExpressionFB = 51;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_LOWER_LIP_DEPRESSOR_R_FB: XrFaceExpressionFB = 52;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_MOUTH_LEFT_FB: XrFaceExpressionFB = 53;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_MOUTH_RIGHT_FB: XrFaceExpressionFB = 54;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_NOSE_WRINKLER_L_FB: XrFaceExpressionFB = 55;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_NOSE_WRINKLER_R_FB: XrFaceExpressionFB = 56;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_OUTER_BROW_RAISER_L_FB: XrFaceExpressionFB = 57;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_OUTER_BROW_RAISER_R_FB: XrFaceExpressionFB = 58;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_UPPER_LID_RAISER_L_FB: XrFaceExpressionFB = 59;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_UPPER_LID_RAISER_R_FB: XrFaceExpressionFB = 60;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_UPPER_LIP_RAISER_L_FB: XrFaceExpressionFB = 61;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_UPPER_LIP_RAISER_R_FB: XrFaceExpressionFB = 62;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_COUNT_FB: XrFaceExpressionFB = 63;
pub const XrFaceExpressionFB_XR_FACE_EXPRESSION_MAX_ENUM_FB: XrFaceExpressionFB = 2147483647;
pub type XrFaceExpressionFB = ::std::os::raw::c_uint;
pub const XrFaceExpressionSetFB_XR_FACE_EXPRESSION_SET_DEFAULT_FB: XrFaceExpressionSetFB = 0;
pub const XrFaceExpressionSetFB_XR_FACE_EXPRESSION_SET_MAX_ENUM_FB: XrFaceExpressionSetFB =
    2147483647;
pub type XrFaceExpressionSetFB = ::std::os::raw::c_uint;
pub const XrFaceConfidenceFB_XR_FACE_CONFIDENCE_LOWER_FACE_FB: XrFaceConfidenceFB = 0;
pub const XrFaceConfidenceFB_XR_FACE_CONFIDENCE_UPPER_FACE_FB: XrFaceConfidenceFB = 1;
pub const XrFaceConfidenceFB_XR_FACE_CONFIDENCE_COUNT_FB: XrFaceConfidenceFB = 2;
pub const XrFaceConfidenceFB_XR_FACE_CONFIDENCE_MAX_ENUM_FB: XrFaceConfidenceFB = 2147483647;
pub type XrFaceConfidenceFB = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemFaceTrackingPropertiesFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsFaceTracking: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemFaceTrackingPropertiesFB"]
        [::std::mem::size_of::<XrSystemFaceTrackingPropertiesFB>() - 24usize];
    ["Alignment of XrSystemFaceTrackingPropertiesFB"]
        [::std::mem::align_of::<XrSystemFaceTrackingPropertiesFB>() - 8usize];
    ["Offset of field: XrSystemFaceTrackingPropertiesFB::type_"]
        [::std::mem::offset_of!(XrSystemFaceTrackingPropertiesFB, type_) - 0usize];
    ["Offset of field: XrSystemFaceTrackingPropertiesFB::next"]
        [::std::mem::offset_of!(XrSystemFaceTrackingPropertiesFB, next) - 8usize];
    ["Offset of field: XrSystemFaceTrackingPropertiesFB::supportsFaceTracking"]
        [::std::mem::offset_of!(XrSystemFaceTrackingPropertiesFB, supportsFaceTracking) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFaceTrackerCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub faceExpressionSet: XrFaceExpressionSetFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFaceTrackerCreateInfoFB"]
        [::std::mem::size_of::<XrFaceTrackerCreateInfoFB>() - 24usize];
    ["Alignment of XrFaceTrackerCreateInfoFB"]
        [::std::mem::align_of::<XrFaceTrackerCreateInfoFB>() - 8usize];
    ["Offset of field: XrFaceTrackerCreateInfoFB::type_"]
        [::std::mem::offset_of!(XrFaceTrackerCreateInfoFB, type_) - 0usize];
    ["Offset of field: XrFaceTrackerCreateInfoFB::next"]
        [::std::mem::offset_of!(XrFaceTrackerCreateInfoFB, next) - 8usize];
    ["Offset of field: XrFaceTrackerCreateInfoFB::faceExpressionSet"]
        [::std::mem::offset_of!(XrFaceTrackerCreateInfoFB, faceExpressionSet) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFaceExpressionInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub time: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFaceExpressionInfoFB"][::std::mem::size_of::<XrFaceExpressionInfoFB>() - 24usize];
    ["Alignment of XrFaceExpressionInfoFB"]
        [::std::mem::align_of::<XrFaceExpressionInfoFB>() - 8usize];
    ["Offset of field: XrFaceExpressionInfoFB::type_"]
        [::std::mem::offset_of!(XrFaceExpressionInfoFB, type_) - 0usize];
    ["Offset of field: XrFaceExpressionInfoFB::next"]
        [::std::mem::offset_of!(XrFaceExpressionInfoFB, next) - 8usize];
    ["Offset of field: XrFaceExpressionInfoFB::time"]
        [::std::mem::offset_of!(XrFaceExpressionInfoFB, time) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFaceExpressionStatusFB {
    pub isValid: XrBool32,
    pub isEyeFollowingBlendshapesValid: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFaceExpressionStatusFB"]
        [::std::mem::size_of::<XrFaceExpressionStatusFB>() - 8usize];
    ["Alignment of XrFaceExpressionStatusFB"]
        [::std::mem::align_of::<XrFaceExpressionStatusFB>() - 4usize];
    ["Offset of field: XrFaceExpressionStatusFB::isValid"]
        [::std::mem::offset_of!(XrFaceExpressionStatusFB, isValid) - 0usize];
    ["Offset of field: XrFaceExpressionStatusFB::isEyeFollowingBlendshapesValid"]
        [::std::mem::offset_of!(XrFaceExpressionStatusFB, isEyeFollowingBlendshapesValid) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFaceExpressionWeightsFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub weightCount: u32,
    pub weights: *mut f32,
    pub confidenceCount: u32,
    pub confidences: *mut f32,
    pub status: XrFaceExpressionStatusFB,
    pub time: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFaceExpressionWeightsFB"]
        [::std::mem::size_of::<XrFaceExpressionWeightsFB>() - 64usize];
    ["Alignment of XrFaceExpressionWeightsFB"]
        [::std::mem::align_of::<XrFaceExpressionWeightsFB>() - 8usize];
    ["Offset of field: XrFaceExpressionWeightsFB::type_"]
        [::std::mem::offset_of!(XrFaceExpressionWeightsFB, type_) - 0usize];
    ["Offset of field: XrFaceExpressionWeightsFB::next"]
        [::std::mem::offset_of!(XrFaceExpressionWeightsFB, next) - 8usize];
    ["Offset of field: XrFaceExpressionWeightsFB::weightCount"]
        [::std::mem::offset_of!(XrFaceExpressionWeightsFB, weightCount) - 16usize];
    ["Offset of field: XrFaceExpressionWeightsFB::weights"]
        [::std::mem::offset_of!(XrFaceExpressionWeightsFB, weights) - 24usize];
    ["Offset of field: XrFaceExpressionWeightsFB::confidenceCount"]
        [::std::mem::offset_of!(XrFaceExpressionWeightsFB, confidenceCount) - 32usize];
    ["Offset of field: XrFaceExpressionWeightsFB::confidences"]
        [::std::mem::offset_of!(XrFaceExpressionWeightsFB, confidences) - 40usize];
    ["Offset of field: XrFaceExpressionWeightsFB::status"]
        [::std::mem::offset_of!(XrFaceExpressionWeightsFB, status) - 48usize];
    ["Offset of field: XrFaceExpressionWeightsFB::time"]
        [::std::mem::offset_of!(XrFaceExpressionWeightsFB, time) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEyeTrackerFB_T {
    _unused: [u8; 0],
}
pub type XrEyeTrackerFB = *mut XrEyeTrackerFB_T;
pub const XrEyePositionFB_XR_EYE_POSITION_LEFT_FB: XrEyePositionFB = 0;
pub const XrEyePositionFB_XR_EYE_POSITION_RIGHT_FB: XrEyePositionFB = 1;
pub const XrEyePositionFB_XR_EYE_POSITION_COUNT_FB: XrEyePositionFB = 2;
pub const XrEyePositionFB_XR_EYE_POSITION_MAX_ENUM_FB: XrEyePositionFB = 2147483647;
pub type XrEyePositionFB = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEyeGazeFB {
    pub isValid: XrBool32,
    pub gazePose: XrPosef,
    pub gazeConfidence: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEyeGazeFB"][::std::mem::size_of::<XrEyeGazeFB>() - 36usize];
    ["Alignment of XrEyeGazeFB"][::std::mem::align_of::<XrEyeGazeFB>() - 4usize];
    ["Offset of field: XrEyeGazeFB::isValid"]
        [::std::mem::offset_of!(XrEyeGazeFB, isValid) - 0usize];
    ["Offset of field: XrEyeGazeFB::gazePose"]
        [::std::mem::offset_of!(XrEyeGazeFB, gazePose) - 4usize];
    ["Offset of field: XrEyeGazeFB::gazeConfidence"]
        [::std::mem::offset_of!(XrEyeGazeFB, gazeConfidence) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEyeTrackerCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEyeTrackerCreateInfoFB"]
        [::std::mem::size_of::<XrEyeTrackerCreateInfoFB>() - 16usize];
    ["Alignment of XrEyeTrackerCreateInfoFB"]
        [::std::mem::align_of::<XrEyeTrackerCreateInfoFB>() - 8usize];
    ["Offset of field: XrEyeTrackerCreateInfoFB::type_"]
        [::std::mem::offset_of!(XrEyeTrackerCreateInfoFB, type_) - 0usize];
    ["Offset of field: XrEyeTrackerCreateInfoFB::next"]
        [::std::mem::offset_of!(XrEyeTrackerCreateInfoFB, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEyeGazesInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub baseSpace: XrSpace,
    pub time: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEyeGazesInfoFB"][::std::mem::size_of::<XrEyeGazesInfoFB>() - 32usize];
    ["Alignment of XrEyeGazesInfoFB"][::std::mem::align_of::<XrEyeGazesInfoFB>() - 8usize];
    ["Offset of field: XrEyeGazesInfoFB::type_"]
        [::std::mem::offset_of!(XrEyeGazesInfoFB, type_) - 0usize];
    ["Offset of field: XrEyeGazesInfoFB::next"]
        [::std::mem::offset_of!(XrEyeGazesInfoFB, next) - 8usize];
    ["Offset of field: XrEyeGazesInfoFB::baseSpace"]
        [::std::mem::offset_of!(XrEyeGazesInfoFB, baseSpace) - 16usize];
    ["Offset of field: XrEyeGazesInfoFB::time"]
        [::std::mem::offset_of!(XrEyeGazesInfoFB, time) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemEyeTrackingPropertiesFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsEyeTracking: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemEyeTrackingPropertiesFB"]
        [::std::mem::size_of::<XrSystemEyeTrackingPropertiesFB>() - 24usize];
    ["Alignment of XrSystemEyeTrackingPropertiesFB"]
        [::std::mem::align_of::<XrSystemEyeTrackingPropertiesFB>() - 8usize];
    ["Offset of field: XrSystemEyeTrackingPropertiesFB::type_"]
        [::std::mem::offset_of!(XrSystemEyeTrackingPropertiesFB, type_) - 0usize];
    ["Offset of field: XrSystemEyeTrackingPropertiesFB::next"]
        [::std::mem::offset_of!(XrSystemEyeTrackingPropertiesFB, next) - 8usize];
    ["Offset of field: XrSystemEyeTrackingPropertiesFB::supportsEyeTracking"]
        [::std::mem::offset_of!(XrSystemEyeTrackingPropertiesFB, supportsEyeTracking) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEyeGazesFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub gaze: [XrEyeGazeFB; 2usize],
    pub time: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEyeGazesFB"][::std::mem::size_of::<XrEyeGazesFB>() - 96usize];
    ["Alignment of XrEyeGazesFB"][::std::mem::align_of::<XrEyeGazesFB>() - 8usize];
    ["Offset of field: XrEyeGazesFB::type_"][::std::mem::offset_of!(XrEyeGazesFB, type_) - 0usize];
    ["Offset of field: XrEyeGazesFB::next"][::std::mem::offset_of!(XrEyeGazesFB, next) - 8usize];
    ["Offset of field: XrEyeGazesFB::gaze"][::std::mem::offset_of!(XrEyeGazesFB, gaze) - 16usize];
    ["Offset of field: XrEyeGazesFB::time"][::std::mem::offset_of!(XrEyeGazesFB, time) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughKeyboardHandsIntensityFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub leftHandIntensity: f32,
    pub rightHandIntensity: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPassthroughKeyboardHandsIntensityFB"]
        [::std::mem::size_of::<XrPassthroughKeyboardHandsIntensityFB>() - 24usize];
    ["Alignment of XrPassthroughKeyboardHandsIntensityFB"]
        [::std::mem::align_of::<XrPassthroughKeyboardHandsIntensityFB>() - 8usize];
    ["Offset of field: XrPassthroughKeyboardHandsIntensityFB::type_"]
        [::std::mem::offset_of!(XrPassthroughKeyboardHandsIntensityFB, type_) - 0usize];
    ["Offset of field: XrPassthroughKeyboardHandsIntensityFB::next"]
        [::std::mem::offset_of!(XrPassthroughKeyboardHandsIntensityFB, next) - 8usize];
    ["Offset of field: XrPassthroughKeyboardHandsIntensityFB::leftHandIntensity"][::std::mem::offset_of!(
        XrPassthroughKeyboardHandsIntensityFB,
        leftHandIntensity
    ) - 16usize];
    ["Offset of field: XrPassthroughKeyboardHandsIntensityFB::rightHandIntensity"][::std::mem::offset_of!(
        XrPassthroughKeyboardHandsIntensityFB,
        rightHandIntensity
    ) - 20usize];
};
pub type XrCompositionLayerSettingsFlagsFB = XrFlags64;
pub const XR_COMPOSITION_LAYER_SETTINGS_NORMAL_SUPER_SAMPLING_BIT_FB:
    XrCompositionLayerSettingsFlagsFB = 1;
pub const XR_COMPOSITION_LAYER_SETTINGS_QUALITY_SUPER_SAMPLING_BIT_FB:
    XrCompositionLayerSettingsFlagsFB = 2;
pub const XR_COMPOSITION_LAYER_SETTINGS_NORMAL_SHARPENING_BIT_FB:
    XrCompositionLayerSettingsFlagsFB = 4;
pub const XR_COMPOSITION_LAYER_SETTINGS_QUALITY_SHARPENING_BIT_FB:
    XrCompositionLayerSettingsFlagsFB = 8;
pub const XR_COMPOSITION_LAYER_SETTINGS_AUTO_LAYER_FILTER_BIT_META:
    XrCompositionLayerSettingsFlagsFB = 32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerSettingsFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerSettingsFlagsFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCompositionLayerSettingsFB"]
        [::std::mem::size_of::<XrCompositionLayerSettingsFB>() - 24usize];
    ["Alignment of XrCompositionLayerSettingsFB"]
        [::std::mem::align_of::<XrCompositionLayerSettingsFB>() - 8usize];
    ["Offset of field: XrCompositionLayerSettingsFB::type_"]
        [::std::mem::offset_of!(XrCompositionLayerSettingsFB, type_) - 0usize];
    ["Offset of field: XrCompositionLayerSettingsFB::next"]
        [::std::mem::offset_of!(XrCompositionLayerSettingsFB, next) - 8usize];
    ["Offset of field: XrCompositionLayerSettingsFB::layerFlags"]
        [::std::mem::offset_of!(XrCompositionLayerSettingsFB, layerFlags) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHapticPcmVibrationFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub bufferSize: u32,
    pub buffer: *const f32,
    pub sampleRate: f32,
    pub append: XrBool32,
    pub samplesConsumed: *mut u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHapticPcmVibrationFB"][::std::mem::size_of::<XrHapticPcmVibrationFB>() - 48usize];
    ["Alignment of XrHapticPcmVibrationFB"]
        [::std::mem::align_of::<XrHapticPcmVibrationFB>() - 8usize];
    ["Offset of field: XrHapticPcmVibrationFB::type_"]
        [::std::mem::offset_of!(XrHapticPcmVibrationFB, type_) - 0usize];
    ["Offset of field: XrHapticPcmVibrationFB::next"]
        [::std::mem::offset_of!(XrHapticPcmVibrationFB, next) - 8usize];
    ["Offset of field: XrHapticPcmVibrationFB::bufferSize"]
        [::std::mem::offset_of!(XrHapticPcmVibrationFB, bufferSize) - 16usize];
    ["Offset of field: XrHapticPcmVibrationFB::buffer"]
        [::std::mem::offset_of!(XrHapticPcmVibrationFB, buffer) - 24usize];
    ["Offset of field: XrHapticPcmVibrationFB::sampleRate"]
        [::std::mem::offset_of!(XrHapticPcmVibrationFB, sampleRate) - 32usize];
    ["Offset of field: XrHapticPcmVibrationFB::append"]
        [::std::mem::offset_of!(XrHapticPcmVibrationFB, append) - 36usize];
    ["Offset of field: XrHapticPcmVibrationFB::samplesConsumed"]
        [::std::mem::offset_of!(XrHapticPcmVibrationFB, samplesConsumed) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrDevicePcmSampleRateStateFB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub sampleRate: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrDevicePcmSampleRateStateFB"]
        [::std::mem::size_of::<XrDevicePcmSampleRateStateFB>() - 24usize];
    ["Alignment of XrDevicePcmSampleRateStateFB"]
        [::std::mem::align_of::<XrDevicePcmSampleRateStateFB>() - 8usize];
    ["Offset of field: XrDevicePcmSampleRateStateFB::type_"]
        [::std::mem::offset_of!(XrDevicePcmSampleRateStateFB, type_) - 0usize];
    ["Offset of field: XrDevicePcmSampleRateStateFB::next"]
        [::std::mem::offset_of!(XrDevicePcmSampleRateStateFB, next) - 8usize];
    ["Offset of field: XrDevicePcmSampleRateStateFB::sampleRate"]
        [::std::mem::offset_of!(XrDevicePcmSampleRateStateFB, sampleRate) - 16usize];
};
pub type XrDevicePcmSampleRateGetInfoFB = XrDevicePcmSampleRateStateFB;
pub const XrCompareOpFB_XR_COMPARE_OP_NEVER_FB: XrCompareOpFB = 0;
pub const XrCompareOpFB_XR_COMPARE_OP_LESS_FB: XrCompareOpFB = 1;
pub const XrCompareOpFB_XR_COMPARE_OP_EQUAL_FB: XrCompareOpFB = 2;
pub const XrCompareOpFB_XR_COMPARE_OP_LESS_OR_EQUAL_FB: XrCompareOpFB = 3;
pub const XrCompareOpFB_XR_COMPARE_OP_GREATER_FB: XrCompareOpFB = 4;
pub const XrCompareOpFB_XR_COMPARE_OP_NOT_EQUAL_FB: XrCompareOpFB = 5;
pub const XrCompareOpFB_XR_COMPARE_OP_GREATER_OR_EQUAL_FB: XrCompareOpFB = 6;
pub const XrCompareOpFB_XR_COMPARE_OP_ALWAYS_FB: XrCompareOpFB = 7;
pub const XrCompareOpFB_XR_COMPARE_OP_MAX_ENUM_FB: XrCompareOpFB = 2147483647;
pub type XrCompareOpFB = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerDepthTestFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub depthMask: XrBool32,
    pub compareOp: XrCompareOpFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCompositionLayerDepthTestFB"]
        [::std::mem::size_of::<XrCompositionLayerDepthTestFB>() - 24usize];
    ["Alignment of XrCompositionLayerDepthTestFB"]
        [::std::mem::align_of::<XrCompositionLayerDepthTestFB>() - 8usize];
    ["Offset of field: XrCompositionLayerDepthTestFB::type_"]
        [::std::mem::offset_of!(XrCompositionLayerDepthTestFB, type_) - 0usize];
    ["Offset of field: XrCompositionLayerDepthTestFB::next"]
        [::std::mem::offset_of!(XrCompositionLayerDepthTestFB, next) - 8usize];
    ["Offset of field: XrCompositionLayerDepthTestFB::depthMask"]
        [::std::mem::offset_of!(XrCompositionLayerDepthTestFB, depthMask) - 16usize];
    ["Offset of field: XrCompositionLayerDepthTestFB::compareOp"]
        [::std::mem::offset_of!(XrCompositionLayerDepthTestFB, compareOp) - 20usize];
};
pub const XrLocalDimmingModeMETA_XR_LOCAL_DIMMING_MODE_OFF_META: XrLocalDimmingModeMETA = 0;
pub const XrLocalDimmingModeMETA_XR_LOCAL_DIMMING_MODE_ON_META: XrLocalDimmingModeMETA = 1;
pub const XrLocalDimmingModeMETA_XR_LOCAL_DIMMING_MODE_MAX_ENUM_META: XrLocalDimmingModeMETA =
    2147483647;
pub type XrLocalDimmingModeMETA = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrLocalDimmingFrameEndInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub localDimmingMode: XrLocalDimmingModeMETA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrLocalDimmingFrameEndInfoMETA"]
        [::std::mem::size_of::<XrLocalDimmingFrameEndInfoMETA>() - 24usize];
    ["Alignment of XrLocalDimmingFrameEndInfoMETA"]
        [::std::mem::align_of::<XrLocalDimmingFrameEndInfoMETA>() - 8usize];
    ["Offset of field: XrLocalDimmingFrameEndInfoMETA::type_"]
        [::std::mem::offset_of!(XrLocalDimmingFrameEndInfoMETA, type_) - 0usize];
    ["Offset of field: XrLocalDimmingFrameEndInfoMETA::next"]
        [::std::mem::offset_of!(XrLocalDimmingFrameEndInfoMETA, next) - 8usize];
    ["Offset of field: XrLocalDimmingFrameEndInfoMETA::localDimmingMode"]
        [::std::mem::offset_of!(XrLocalDimmingFrameEndInfoMETA, localDimmingMode) - 16usize];
};
pub type XrPassthroughPreferenceFlagsMETA = XrFlags64;
pub const XR_PASSTHROUGH_PREFERENCE_DEFAULT_TO_ACTIVE_BIT_META: XrPassthroughPreferenceFlagsMETA =
    1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughPreferencesMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub flags: XrPassthroughPreferenceFlagsMETA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPassthroughPreferencesMETA"]
        [::std::mem::size_of::<XrPassthroughPreferencesMETA>() - 24usize];
    ["Alignment of XrPassthroughPreferencesMETA"]
        [::std::mem::align_of::<XrPassthroughPreferencesMETA>() - 8usize];
    ["Offset of field: XrPassthroughPreferencesMETA::type_"]
        [::std::mem::offset_of!(XrPassthroughPreferencesMETA, type_) - 0usize];
    ["Offset of field: XrPassthroughPreferencesMETA::next"]
        [::std::mem::offset_of!(XrPassthroughPreferencesMETA, next) - 8usize];
    ["Offset of field: XrPassthroughPreferencesMETA::flags"]
        [::std::mem::offset_of!(XrPassthroughPreferencesMETA, flags) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVirtualKeyboardMETA_T {
    _unused: [u8; 0],
}
pub type XrVirtualKeyboardMETA = *mut XrVirtualKeyboardMETA_T;
pub const XrVirtualKeyboardLocationTypeMETA_XR_VIRTUAL_KEYBOARD_LOCATION_TYPE_CUSTOM_META:
    XrVirtualKeyboardLocationTypeMETA = 0;
pub const XrVirtualKeyboardLocationTypeMETA_XR_VIRTUAL_KEYBOARD_LOCATION_TYPE_FAR_META:
    XrVirtualKeyboardLocationTypeMETA = 1;
pub const XrVirtualKeyboardLocationTypeMETA_XR_VIRTUAL_KEYBOARD_LOCATION_TYPE_DIRECT_META:
    XrVirtualKeyboardLocationTypeMETA = 2;
pub const XrVirtualKeyboardLocationTypeMETA_XR_VIRTUAL_KEYBOARD_LOCATION_TYPE_MAX_ENUM_META:
    XrVirtualKeyboardLocationTypeMETA = 2147483647;
pub type XrVirtualKeyboardLocationTypeMETA = ::std::os::raw::c_uint;
pub const XrVirtualKeyboardInputSourceMETA_XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_CONTROLLER_RAY_LEFT_META : XrVirtualKeyboardInputSourceMETA = 1 ;
pub const XrVirtualKeyboardInputSourceMETA_XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_CONTROLLER_RAY_RIGHT_META : XrVirtualKeyboardInputSourceMETA = 2 ;
pub const XrVirtualKeyboardInputSourceMETA_XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_HAND_RAY_LEFT_META:
    XrVirtualKeyboardInputSourceMETA = 3;
pub const XrVirtualKeyboardInputSourceMETA_XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_HAND_RAY_RIGHT_META:
    XrVirtualKeyboardInputSourceMETA = 4;
pub const XrVirtualKeyboardInputSourceMETA_XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_CONTROLLER_DIRECT_LEFT_META : XrVirtualKeyboardInputSourceMETA = 5 ;
pub const XrVirtualKeyboardInputSourceMETA_XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_CONTROLLER_DIRECT_RIGHT_META : XrVirtualKeyboardInputSourceMETA = 6 ;
pub const XrVirtualKeyboardInputSourceMETA_XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_HAND_DIRECT_INDEX_TIP_LEFT_META : XrVirtualKeyboardInputSourceMETA = 7 ;
pub const XrVirtualKeyboardInputSourceMETA_XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_HAND_DIRECT_INDEX_TIP_RIGHT_META : XrVirtualKeyboardInputSourceMETA = 8 ;
pub const XrVirtualKeyboardInputSourceMETA_XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_MAX_ENUM_META:
    XrVirtualKeyboardInputSourceMETA = 2147483647;
pub type XrVirtualKeyboardInputSourceMETA = ::std::os::raw::c_uint;
pub type XrVirtualKeyboardInputStateFlagsMETA = XrFlags64;
pub const XR_VIRTUAL_KEYBOARD_INPUT_STATE_PRESSED_BIT_META: XrVirtualKeyboardInputStateFlagsMETA =
    1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemVirtualKeyboardPropertiesMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsVirtualKeyboard: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemVirtualKeyboardPropertiesMETA"]
        [::std::mem::size_of::<XrSystemVirtualKeyboardPropertiesMETA>() - 24usize];
    ["Alignment of XrSystemVirtualKeyboardPropertiesMETA"]
        [::std::mem::align_of::<XrSystemVirtualKeyboardPropertiesMETA>() - 8usize];
    ["Offset of field: XrSystemVirtualKeyboardPropertiesMETA::type_"]
        [::std::mem::offset_of!(XrSystemVirtualKeyboardPropertiesMETA, type_) - 0usize];
    ["Offset of field: XrSystemVirtualKeyboardPropertiesMETA::next"]
        [::std::mem::offset_of!(XrSystemVirtualKeyboardPropertiesMETA, next) - 8usize];
    ["Offset of field: XrSystemVirtualKeyboardPropertiesMETA::supportsVirtualKeyboard"][::std::mem::offset_of!(
        XrSystemVirtualKeyboardPropertiesMETA,
        supportsVirtualKeyboard
    )
        - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVirtualKeyboardCreateInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrVirtualKeyboardCreateInfoMETA"]
        [::std::mem::size_of::<XrVirtualKeyboardCreateInfoMETA>() - 16usize];
    ["Alignment of XrVirtualKeyboardCreateInfoMETA"]
        [::std::mem::align_of::<XrVirtualKeyboardCreateInfoMETA>() - 8usize];
    ["Offset of field: XrVirtualKeyboardCreateInfoMETA::type_"]
        [::std::mem::offset_of!(XrVirtualKeyboardCreateInfoMETA, type_) - 0usize];
    ["Offset of field: XrVirtualKeyboardCreateInfoMETA::next"]
        [::std::mem::offset_of!(XrVirtualKeyboardCreateInfoMETA, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVirtualKeyboardSpaceCreateInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub locationType: XrVirtualKeyboardLocationTypeMETA,
    pub space: XrSpace,
    pub poseInSpace: XrPosef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrVirtualKeyboardSpaceCreateInfoMETA"]
        [::std::mem::size_of::<XrVirtualKeyboardSpaceCreateInfoMETA>() - 64usize];
    ["Alignment of XrVirtualKeyboardSpaceCreateInfoMETA"]
        [::std::mem::align_of::<XrVirtualKeyboardSpaceCreateInfoMETA>() - 8usize];
    ["Offset of field: XrVirtualKeyboardSpaceCreateInfoMETA::type_"]
        [::std::mem::offset_of!(XrVirtualKeyboardSpaceCreateInfoMETA, type_) - 0usize];
    ["Offset of field: XrVirtualKeyboardSpaceCreateInfoMETA::next"]
        [::std::mem::offset_of!(XrVirtualKeyboardSpaceCreateInfoMETA, next) - 8usize];
    ["Offset of field: XrVirtualKeyboardSpaceCreateInfoMETA::locationType"]
        [::std::mem::offset_of!(XrVirtualKeyboardSpaceCreateInfoMETA, locationType) - 16usize];
    ["Offset of field: XrVirtualKeyboardSpaceCreateInfoMETA::space"]
        [::std::mem::offset_of!(XrVirtualKeyboardSpaceCreateInfoMETA, space) - 24usize];
    ["Offset of field: XrVirtualKeyboardSpaceCreateInfoMETA::poseInSpace"]
        [::std::mem::offset_of!(XrVirtualKeyboardSpaceCreateInfoMETA, poseInSpace) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVirtualKeyboardLocationInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub locationType: XrVirtualKeyboardLocationTypeMETA,
    pub space: XrSpace,
    pub poseInSpace: XrPosef,
    pub scale: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrVirtualKeyboardLocationInfoMETA"]
        [::std::mem::size_of::<XrVirtualKeyboardLocationInfoMETA>() - 64usize];
    ["Alignment of XrVirtualKeyboardLocationInfoMETA"]
        [::std::mem::align_of::<XrVirtualKeyboardLocationInfoMETA>() - 8usize];
    ["Offset of field: XrVirtualKeyboardLocationInfoMETA::type_"]
        [::std::mem::offset_of!(XrVirtualKeyboardLocationInfoMETA, type_) - 0usize];
    ["Offset of field: XrVirtualKeyboardLocationInfoMETA::next"]
        [::std::mem::offset_of!(XrVirtualKeyboardLocationInfoMETA, next) - 8usize];
    ["Offset of field: XrVirtualKeyboardLocationInfoMETA::locationType"]
        [::std::mem::offset_of!(XrVirtualKeyboardLocationInfoMETA, locationType) - 16usize];
    ["Offset of field: XrVirtualKeyboardLocationInfoMETA::space"]
        [::std::mem::offset_of!(XrVirtualKeyboardLocationInfoMETA, space) - 24usize];
    ["Offset of field: XrVirtualKeyboardLocationInfoMETA::poseInSpace"]
        [::std::mem::offset_of!(XrVirtualKeyboardLocationInfoMETA, poseInSpace) - 32usize];
    ["Offset of field: XrVirtualKeyboardLocationInfoMETA::scale"]
        [::std::mem::offset_of!(XrVirtualKeyboardLocationInfoMETA, scale) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVirtualKeyboardModelVisibilitySetInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub visible: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrVirtualKeyboardModelVisibilitySetInfoMETA"]
        [::std::mem::size_of::<XrVirtualKeyboardModelVisibilitySetInfoMETA>() - 24usize];
    ["Alignment of XrVirtualKeyboardModelVisibilitySetInfoMETA"]
        [::std::mem::align_of::<XrVirtualKeyboardModelVisibilitySetInfoMETA>() - 8usize];
    ["Offset of field: XrVirtualKeyboardModelVisibilitySetInfoMETA::type_"]
        [::std::mem::offset_of!(XrVirtualKeyboardModelVisibilitySetInfoMETA, type_) - 0usize];
    ["Offset of field: XrVirtualKeyboardModelVisibilitySetInfoMETA::next"]
        [::std::mem::offset_of!(XrVirtualKeyboardModelVisibilitySetInfoMETA, next) - 8usize];
    ["Offset of field: XrVirtualKeyboardModelVisibilitySetInfoMETA::visible"]
        [::std::mem::offset_of!(XrVirtualKeyboardModelVisibilitySetInfoMETA, visible) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVirtualKeyboardAnimationStateMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub animationIndex: i32,
    pub fraction: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrVirtualKeyboardAnimationStateMETA"]
        [::std::mem::size_of::<XrVirtualKeyboardAnimationStateMETA>() - 24usize];
    ["Alignment of XrVirtualKeyboardAnimationStateMETA"]
        [::std::mem::align_of::<XrVirtualKeyboardAnimationStateMETA>() - 8usize];
    ["Offset of field: XrVirtualKeyboardAnimationStateMETA::type_"]
        [::std::mem::offset_of!(XrVirtualKeyboardAnimationStateMETA, type_) - 0usize];
    ["Offset of field: XrVirtualKeyboardAnimationStateMETA::next"]
        [::std::mem::offset_of!(XrVirtualKeyboardAnimationStateMETA, next) - 8usize];
    ["Offset of field: XrVirtualKeyboardAnimationStateMETA::animationIndex"]
        [::std::mem::offset_of!(XrVirtualKeyboardAnimationStateMETA, animationIndex) - 16usize];
    ["Offset of field: XrVirtualKeyboardAnimationStateMETA::fraction"]
        [::std::mem::offset_of!(XrVirtualKeyboardAnimationStateMETA, fraction) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVirtualKeyboardModelAnimationStatesMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub stateCapacityInput: u32,
    pub stateCountOutput: u32,
    pub states: *mut XrVirtualKeyboardAnimationStateMETA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrVirtualKeyboardModelAnimationStatesMETA"]
        [::std::mem::size_of::<XrVirtualKeyboardModelAnimationStatesMETA>() - 32usize];
    ["Alignment of XrVirtualKeyboardModelAnimationStatesMETA"]
        [::std::mem::align_of::<XrVirtualKeyboardModelAnimationStatesMETA>() - 8usize];
    ["Offset of field: XrVirtualKeyboardModelAnimationStatesMETA::type_"]
        [::std::mem::offset_of!(XrVirtualKeyboardModelAnimationStatesMETA, type_) - 0usize];
    ["Offset of field: XrVirtualKeyboardModelAnimationStatesMETA::next"]
        [::std::mem::offset_of!(XrVirtualKeyboardModelAnimationStatesMETA, next) - 8usize];
    ["Offset of field: XrVirtualKeyboardModelAnimationStatesMETA::stateCapacityInput"][::std::mem::offset_of!(
        XrVirtualKeyboardModelAnimationStatesMETA,
        stateCapacityInput
    ) - 16usize];
    ["Offset of field: XrVirtualKeyboardModelAnimationStatesMETA::stateCountOutput"][::std::mem::offset_of!(
        XrVirtualKeyboardModelAnimationStatesMETA,
        stateCountOutput
    ) - 20usize];
    ["Offset of field: XrVirtualKeyboardModelAnimationStatesMETA::states"]
        [::std::mem::offset_of!(XrVirtualKeyboardModelAnimationStatesMETA, states) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVirtualKeyboardTextureDataMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub textureWidth: u32,
    pub textureHeight: u32,
    pub bufferCapacityInput: u32,
    pub bufferCountOutput: u32,
    pub buffer: *mut u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrVirtualKeyboardTextureDataMETA"]
        [::std::mem::size_of::<XrVirtualKeyboardTextureDataMETA>() - 40usize];
    ["Alignment of XrVirtualKeyboardTextureDataMETA"]
        [::std::mem::align_of::<XrVirtualKeyboardTextureDataMETA>() - 8usize];
    ["Offset of field: XrVirtualKeyboardTextureDataMETA::type_"]
        [::std::mem::offset_of!(XrVirtualKeyboardTextureDataMETA, type_) - 0usize];
    ["Offset of field: XrVirtualKeyboardTextureDataMETA::next"]
        [::std::mem::offset_of!(XrVirtualKeyboardTextureDataMETA, next) - 8usize];
    ["Offset of field: XrVirtualKeyboardTextureDataMETA::textureWidth"]
        [::std::mem::offset_of!(XrVirtualKeyboardTextureDataMETA, textureWidth) - 16usize];
    ["Offset of field: XrVirtualKeyboardTextureDataMETA::textureHeight"]
        [::std::mem::offset_of!(XrVirtualKeyboardTextureDataMETA, textureHeight) - 20usize];
    ["Offset of field: XrVirtualKeyboardTextureDataMETA::bufferCapacityInput"]
        [::std::mem::offset_of!(XrVirtualKeyboardTextureDataMETA, bufferCapacityInput) - 24usize];
    ["Offset of field: XrVirtualKeyboardTextureDataMETA::bufferCountOutput"]
        [::std::mem::offset_of!(XrVirtualKeyboardTextureDataMETA, bufferCountOutput) - 28usize];
    ["Offset of field: XrVirtualKeyboardTextureDataMETA::buffer"]
        [::std::mem::offset_of!(XrVirtualKeyboardTextureDataMETA, buffer) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVirtualKeyboardInputInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub inputSource: XrVirtualKeyboardInputSourceMETA,
    pub inputSpace: XrSpace,
    pub inputPoseInSpace: XrPosef,
    pub inputState: XrVirtualKeyboardInputStateFlagsMETA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrVirtualKeyboardInputInfoMETA"]
        [::std::mem::size_of::<XrVirtualKeyboardInputInfoMETA>() - 72usize];
    ["Alignment of XrVirtualKeyboardInputInfoMETA"]
        [::std::mem::align_of::<XrVirtualKeyboardInputInfoMETA>() - 8usize];
    ["Offset of field: XrVirtualKeyboardInputInfoMETA::type_"]
        [::std::mem::offset_of!(XrVirtualKeyboardInputInfoMETA, type_) - 0usize];
    ["Offset of field: XrVirtualKeyboardInputInfoMETA::next"]
        [::std::mem::offset_of!(XrVirtualKeyboardInputInfoMETA, next) - 8usize];
    ["Offset of field: XrVirtualKeyboardInputInfoMETA::inputSource"]
        [::std::mem::offset_of!(XrVirtualKeyboardInputInfoMETA, inputSource) - 16usize];
    ["Offset of field: XrVirtualKeyboardInputInfoMETA::inputSpace"]
        [::std::mem::offset_of!(XrVirtualKeyboardInputInfoMETA, inputSpace) - 24usize];
    ["Offset of field: XrVirtualKeyboardInputInfoMETA::inputPoseInSpace"]
        [::std::mem::offset_of!(XrVirtualKeyboardInputInfoMETA, inputPoseInSpace) - 32usize];
    ["Offset of field: XrVirtualKeyboardInputInfoMETA::inputState"]
        [::std::mem::offset_of!(XrVirtualKeyboardInputInfoMETA, inputState) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrVirtualKeyboardTextContextChangeInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub textContext: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrVirtualKeyboardTextContextChangeInfoMETA"]
        [::std::mem::size_of::<XrVirtualKeyboardTextContextChangeInfoMETA>() - 24usize];
    ["Alignment of XrVirtualKeyboardTextContextChangeInfoMETA"]
        [::std::mem::align_of::<XrVirtualKeyboardTextContextChangeInfoMETA>() - 8usize];
    ["Offset of field: XrVirtualKeyboardTextContextChangeInfoMETA::type_"]
        [::std::mem::offset_of!(XrVirtualKeyboardTextContextChangeInfoMETA, type_) - 0usize];
    ["Offset of field: XrVirtualKeyboardTextContextChangeInfoMETA::next"]
        [::std::mem::offset_of!(XrVirtualKeyboardTextContextChangeInfoMETA, next) - 8usize];
    ["Offset of field: XrVirtualKeyboardTextContextChangeInfoMETA::textContext"]
        [::std::mem::offset_of!(XrVirtualKeyboardTextContextChangeInfoMETA, textContext) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataVirtualKeyboardCommitTextMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub keyboard: XrVirtualKeyboardMETA,
    pub text: [::std::os::raw::c_char; 3992usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataVirtualKeyboardCommitTextMETA"]
        [::std::mem::size_of::<XrEventDataVirtualKeyboardCommitTextMETA>() - 4016usize];
    ["Alignment of XrEventDataVirtualKeyboardCommitTextMETA"]
        [::std::mem::align_of::<XrEventDataVirtualKeyboardCommitTextMETA>() - 8usize];
    ["Offset of field: XrEventDataVirtualKeyboardCommitTextMETA::type_"]
        [::std::mem::offset_of!(XrEventDataVirtualKeyboardCommitTextMETA, type_) - 0usize];
    ["Offset of field: XrEventDataVirtualKeyboardCommitTextMETA::next"]
        [::std::mem::offset_of!(XrEventDataVirtualKeyboardCommitTextMETA, next) - 8usize];
    ["Offset of field: XrEventDataVirtualKeyboardCommitTextMETA::keyboard"]
        [::std::mem::offset_of!(XrEventDataVirtualKeyboardCommitTextMETA, keyboard) - 16usize];
    ["Offset of field: XrEventDataVirtualKeyboardCommitTextMETA::text"]
        [::std::mem::offset_of!(XrEventDataVirtualKeyboardCommitTextMETA, text) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataVirtualKeyboardBackspaceMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub keyboard: XrVirtualKeyboardMETA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataVirtualKeyboardBackspaceMETA"]
        [::std::mem::size_of::<XrEventDataVirtualKeyboardBackspaceMETA>() - 24usize];
    ["Alignment of XrEventDataVirtualKeyboardBackspaceMETA"]
        [::std::mem::align_of::<XrEventDataVirtualKeyboardBackspaceMETA>() - 8usize];
    ["Offset of field: XrEventDataVirtualKeyboardBackspaceMETA::type_"]
        [::std::mem::offset_of!(XrEventDataVirtualKeyboardBackspaceMETA, type_) - 0usize];
    ["Offset of field: XrEventDataVirtualKeyboardBackspaceMETA::next"]
        [::std::mem::offset_of!(XrEventDataVirtualKeyboardBackspaceMETA, next) - 8usize];
    ["Offset of field: XrEventDataVirtualKeyboardBackspaceMETA::keyboard"]
        [::std::mem::offset_of!(XrEventDataVirtualKeyboardBackspaceMETA, keyboard) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataVirtualKeyboardEnterMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub keyboard: XrVirtualKeyboardMETA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataVirtualKeyboardEnterMETA"]
        [::std::mem::size_of::<XrEventDataVirtualKeyboardEnterMETA>() - 24usize];
    ["Alignment of XrEventDataVirtualKeyboardEnterMETA"]
        [::std::mem::align_of::<XrEventDataVirtualKeyboardEnterMETA>() - 8usize];
    ["Offset of field: XrEventDataVirtualKeyboardEnterMETA::type_"]
        [::std::mem::offset_of!(XrEventDataVirtualKeyboardEnterMETA, type_) - 0usize];
    ["Offset of field: XrEventDataVirtualKeyboardEnterMETA::next"]
        [::std::mem::offset_of!(XrEventDataVirtualKeyboardEnterMETA, next) - 8usize];
    ["Offset of field: XrEventDataVirtualKeyboardEnterMETA::keyboard"]
        [::std::mem::offset_of!(XrEventDataVirtualKeyboardEnterMETA, keyboard) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataVirtualKeyboardShownMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub keyboard: XrVirtualKeyboardMETA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataVirtualKeyboardShownMETA"]
        [::std::mem::size_of::<XrEventDataVirtualKeyboardShownMETA>() - 24usize];
    ["Alignment of XrEventDataVirtualKeyboardShownMETA"]
        [::std::mem::align_of::<XrEventDataVirtualKeyboardShownMETA>() - 8usize];
    ["Offset of field: XrEventDataVirtualKeyboardShownMETA::type_"]
        [::std::mem::offset_of!(XrEventDataVirtualKeyboardShownMETA, type_) - 0usize];
    ["Offset of field: XrEventDataVirtualKeyboardShownMETA::next"]
        [::std::mem::offset_of!(XrEventDataVirtualKeyboardShownMETA, next) - 8usize];
    ["Offset of field: XrEventDataVirtualKeyboardShownMETA::keyboard"]
        [::std::mem::offset_of!(XrEventDataVirtualKeyboardShownMETA, keyboard) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataVirtualKeyboardHiddenMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub keyboard: XrVirtualKeyboardMETA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataVirtualKeyboardHiddenMETA"]
        [::std::mem::size_of::<XrEventDataVirtualKeyboardHiddenMETA>() - 24usize];
    ["Alignment of XrEventDataVirtualKeyboardHiddenMETA"]
        [::std::mem::align_of::<XrEventDataVirtualKeyboardHiddenMETA>() - 8usize];
    ["Offset of field: XrEventDataVirtualKeyboardHiddenMETA::type_"]
        [::std::mem::offset_of!(XrEventDataVirtualKeyboardHiddenMETA, type_) - 0usize];
    ["Offset of field: XrEventDataVirtualKeyboardHiddenMETA::next"]
        [::std::mem::offset_of!(XrEventDataVirtualKeyboardHiddenMETA, next) - 8usize];
    ["Offset of field: XrEventDataVirtualKeyboardHiddenMETA::keyboard"]
        [::std::mem::offset_of!(XrEventDataVirtualKeyboardHiddenMETA, keyboard) - 16usize];
};
pub const XrExternalCameraAttachedToDeviceOCULUS_XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_NONE_OCULUS : XrExternalCameraAttachedToDeviceOCULUS = 0 ;
pub const XrExternalCameraAttachedToDeviceOCULUS_XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_HMD_OCULUS : XrExternalCameraAttachedToDeviceOCULUS = 1 ;
pub const XrExternalCameraAttachedToDeviceOCULUS_XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_LTOUCH_OCULUS : XrExternalCameraAttachedToDeviceOCULUS = 2 ;
pub const XrExternalCameraAttachedToDeviceOCULUS_XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_RTOUCH_OCULUS : XrExternalCameraAttachedToDeviceOCULUS = 3 ;
pub const XrExternalCameraAttachedToDeviceOCULUS_XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_MAX_ENUM_OCULUS : XrExternalCameraAttachedToDeviceOCULUS = 2147483647 ;
pub type XrExternalCameraAttachedToDeviceOCULUS = ::std::os::raw::c_uint;
pub type XrExternalCameraStatusFlagsOCULUS = XrFlags64;
pub const XR_EXTERNAL_CAMERA_STATUS_CONNECTED_BIT_OCULUS: XrExternalCameraStatusFlagsOCULUS = 1;
pub const XR_EXTERNAL_CAMERA_STATUS_CALIBRATING_BIT_OCULUS: XrExternalCameraStatusFlagsOCULUS = 2;
pub const XR_EXTERNAL_CAMERA_STATUS_CALIBRATION_FAILED_BIT_OCULUS:
    XrExternalCameraStatusFlagsOCULUS = 4;
pub const XR_EXTERNAL_CAMERA_STATUS_CALIBRATED_BIT_OCULUS: XrExternalCameraStatusFlagsOCULUS = 8;
pub const XR_EXTERNAL_CAMERA_STATUS_CAPTURING_BIT_OCULUS: XrExternalCameraStatusFlagsOCULUS = 16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrExternalCameraIntrinsicsOCULUS {
    pub lastChangeTime: XrTime,
    pub fov: XrFovf,
    pub virtualNearPlaneDistance: f32,
    pub virtualFarPlaneDistance: f32,
    pub imageSensorPixelResolution: XrExtent2Di,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrExternalCameraIntrinsicsOCULUS"]
        [::std::mem::size_of::<XrExternalCameraIntrinsicsOCULUS>() - 40usize];
    ["Alignment of XrExternalCameraIntrinsicsOCULUS"]
        [::std::mem::align_of::<XrExternalCameraIntrinsicsOCULUS>() - 8usize];
    ["Offset of field: XrExternalCameraIntrinsicsOCULUS::lastChangeTime"]
        [::std::mem::offset_of!(XrExternalCameraIntrinsicsOCULUS, lastChangeTime) - 0usize];
    ["Offset of field: XrExternalCameraIntrinsicsOCULUS::fov"]
        [::std::mem::offset_of!(XrExternalCameraIntrinsicsOCULUS, fov) - 8usize];
    ["Offset of field: XrExternalCameraIntrinsicsOCULUS::virtualNearPlaneDistance"][::std::mem::offset_of!(
        XrExternalCameraIntrinsicsOCULUS,
        virtualNearPlaneDistance
    ) - 24usize];
    ["Offset of field: XrExternalCameraIntrinsicsOCULUS::virtualFarPlaneDistance"][::std::mem::offset_of!(
        XrExternalCameraIntrinsicsOCULUS,
        virtualFarPlaneDistance
    ) - 28usize];
    ["Offset of field: XrExternalCameraIntrinsicsOCULUS::imageSensorPixelResolution"][::std::mem::offset_of!(
        XrExternalCameraIntrinsicsOCULUS,
        imageSensorPixelResolution
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrExternalCameraExtrinsicsOCULUS {
    pub lastChangeTime: XrTime,
    pub cameraStatusFlags: XrExternalCameraStatusFlagsOCULUS,
    pub attachedToDevice: XrExternalCameraAttachedToDeviceOCULUS,
    pub relativePose: XrPosef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrExternalCameraExtrinsicsOCULUS"]
        [::std::mem::size_of::<XrExternalCameraExtrinsicsOCULUS>() - 48usize];
    ["Alignment of XrExternalCameraExtrinsicsOCULUS"]
        [::std::mem::align_of::<XrExternalCameraExtrinsicsOCULUS>() - 8usize];
    ["Offset of field: XrExternalCameraExtrinsicsOCULUS::lastChangeTime"]
        [::std::mem::offset_of!(XrExternalCameraExtrinsicsOCULUS, lastChangeTime) - 0usize];
    ["Offset of field: XrExternalCameraExtrinsicsOCULUS::cameraStatusFlags"]
        [::std::mem::offset_of!(XrExternalCameraExtrinsicsOCULUS, cameraStatusFlags) - 8usize];
    ["Offset of field: XrExternalCameraExtrinsicsOCULUS::attachedToDevice"]
        [::std::mem::offset_of!(XrExternalCameraExtrinsicsOCULUS, attachedToDevice) - 16usize];
    ["Offset of field: XrExternalCameraExtrinsicsOCULUS::relativePose"]
        [::std::mem::offset_of!(XrExternalCameraExtrinsicsOCULUS, relativePose) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrExternalCameraOCULUS {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub name: [::std::os::raw::c_char; 32usize],
    pub intrinsics: XrExternalCameraIntrinsicsOCULUS,
    pub extrinsics: XrExternalCameraExtrinsicsOCULUS,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrExternalCameraOCULUS"][::std::mem::size_of::<XrExternalCameraOCULUS>() - 136usize];
    ["Alignment of XrExternalCameraOCULUS"]
        [::std::mem::align_of::<XrExternalCameraOCULUS>() - 8usize];
    ["Offset of field: XrExternalCameraOCULUS::type_"]
        [::std::mem::offset_of!(XrExternalCameraOCULUS, type_) - 0usize];
    ["Offset of field: XrExternalCameraOCULUS::next"]
        [::std::mem::offset_of!(XrExternalCameraOCULUS, next) - 8usize];
    ["Offset of field: XrExternalCameraOCULUS::name"]
        [::std::mem::offset_of!(XrExternalCameraOCULUS, name) - 16usize];
    ["Offset of field: XrExternalCameraOCULUS::intrinsics"]
        [::std::mem::offset_of!(XrExternalCameraOCULUS, intrinsics) - 48usize];
    ["Offset of field: XrExternalCameraOCULUS::extrinsics"]
        [::std::mem::offset_of!(XrExternalCameraOCULUS, extrinsics) - 88usize];
};
pub const XrPerformanceMetricsCounterUnitMETA_XR_PERFORMANCE_METRICS_COUNTER_UNIT_GENERIC_META:
    XrPerformanceMetricsCounterUnitMETA = 0;
pub const XrPerformanceMetricsCounterUnitMETA_XR_PERFORMANCE_METRICS_COUNTER_UNIT_PERCENTAGE_META : XrPerformanceMetricsCounterUnitMETA = 1 ;
pub const XrPerformanceMetricsCounterUnitMETA_XR_PERFORMANCE_METRICS_COUNTER_UNIT_MILLISECONDS_META : XrPerformanceMetricsCounterUnitMETA = 2 ;
pub const XrPerformanceMetricsCounterUnitMETA_XR_PERFORMANCE_METRICS_COUNTER_UNIT_BYTES_META:
    XrPerformanceMetricsCounterUnitMETA = 3;
pub const XrPerformanceMetricsCounterUnitMETA_XR_PERFORMANCE_METRICS_COUNTER_UNIT_HERTZ_META:
    XrPerformanceMetricsCounterUnitMETA = 4;
pub const XrPerformanceMetricsCounterUnitMETA_XR_PERFORMANCE_METRICS_COUNTER_UNIT_MAX_ENUM_META:
    XrPerformanceMetricsCounterUnitMETA = 2147483647;
pub type XrPerformanceMetricsCounterUnitMETA = ::std::os::raw::c_uint;
pub type XrPerformanceMetricsCounterFlagsMETA = XrFlags64;
pub const XR_PERFORMANCE_METRICS_COUNTER_ANY_VALUE_VALID_BIT_META:
    XrPerformanceMetricsCounterFlagsMETA = 1;
pub const XR_PERFORMANCE_METRICS_COUNTER_UINT_VALUE_VALID_BIT_META:
    XrPerformanceMetricsCounterFlagsMETA = 2;
pub const XR_PERFORMANCE_METRICS_COUNTER_FLOAT_VALUE_VALID_BIT_META:
    XrPerformanceMetricsCounterFlagsMETA = 4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPerformanceMetricsStateMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub enabled: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPerformanceMetricsStateMETA"]
        [::std::mem::size_of::<XrPerformanceMetricsStateMETA>() - 24usize];
    ["Alignment of XrPerformanceMetricsStateMETA"]
        [::std::mem::align_of::<XrPerformanceMetricsStateMETA>() - 8usize];
    ["Offset of field: XrPerformanceMetricsStateMETA::type_"]
        [::std::mem::offset_of!(XrPerformanceMetricsStateMETA, type_) - 0usize];
    ["Offset of field: XrPerformanceMetricsStateMETA::next"]
        [::std::mem::offset_of!(XrPerformanceMetricsStateMETA, next) - 8usize];
    ["Offset of field: XrPerformanceMetricsStateMETA::enabled"]
        [::std::mem::offset_of!(XrPerformanceMetricsStateMETA, enabled) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPerformanceMetricsCounterMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub counterFlags: XrPerformanceMetricsCounterFlagsMETA,
    pub counterUnit: XrPerformanceMetricsCounterUnitMETA,
    pub uintValue: u32,
    pub floatValue: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPerformanceMetricsCounterMETA"]
        [::std::mem::size_of::<XrPerformanceMetricsCounterMETA>() - 40usize];
    ["Alignment of XrPerformanceMetricsCounterMETA"]
        [::std::mem::align_of::<XrPerformanceMetricsCounterMETA>() - 8usize];
    ["Offset of field: XrPerformanceMetricsCounterMETA::type_"]
        [::std::mem::offset_of!(XrPerformanceMetricsCounterMETA, type_) - 0usize];
    ["Offset of field: XrPerformanceMetricsCounterMETA::next"]
        [::std::mem::offset_of!(XrPerformanceMetricsCounterMETA, next) - 8usize];
    ["Offset of field: XrPerformanceMetricsCounterMETA::counterFlags"]
        [::std::mem::offset_of!(XrPerformanceMetricsCounterMETA, counterFlags) - 16usize];
    ["Offset of field: XrPerformanceMetricsCounterMETA::counterUnit"]
        [::std::mem::offset_of!(XrPerformanceMetricsCounterMETA, counterUnit) - 24usize];
    ["Offset of field: XrPerformanceMetricsCounterMETA::uintValue"]
        [::std::mem::offset_of!(XrPerformanceMetricsCounterMETA, uintValue) - 28usize];
    ["Offset of field: XrPerformanceMetricsCounterMETA::floatValue"]
        [::std::mem::offset_of!(XrPerformanceMetricsCounterMETA, floatValue) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceListSaveInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub spaceCount: u32,
    pub spaces: *mut XrSpace,
    pub location: XrSpaceStorageLocationFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceListSaveInfoFB"][::std::mem::size_of::<XrSpaceListSaveInfoFB>() - 40usize];
    ["Alignment of XrSpaceListSaveInfoFB"]
        [::std::mem::align_of::<XrSpaceListSaveInfoFB>() - 8usize];
    ["Offset of field: XrSpaceListSaveInfoFB::type_"]
        [::std::mem::offset_of!(XrSpaceListSaveInfoFB, type_) - 0usize];
    ["Offset of field: XrSpaceListSaveInfoFB::next"]
        [::std::mem::offset_of!(XrSpaceListSaveInfoFB, next) - 8usize];
    ["Offset of field: XrSpaceListSaveInfoFB::spaceCount"]
        [::std::mem::offset_of!(XrSpaceListSaveInfoFB, spaceCount) - 16usize];
    ["Offset of field: XrSpaceListSaveInfoFB::spaces"]
        [::std::mem::offset_of!(XrSpaceListSaveInfoFB, spaces) - 24usize];
    ["Offset of field: XrSpaceListSaveInfoFB::location"]
        [::std::mem::offset_of!(XrSpaceListSaveInfoFB, location) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataSpaceListSaveCompleteFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestId: XrAsyncRequestIdFB,
    pub result: XrResult,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataSpaceListSaveCompleteFB"]
        [::std::mem::size_of::<XrEventDataSpaceListSaveCompleteFB>() - 32usize];
    ["Alignment of XrEventDataSpaceListSaveCompleteFB"]
        [::std::mem::align_of::<XrEventDataSpaceListSaveCompleteFB>() - 8usize];
    ["Offset of field: XrEventDataSpaceListSaveCompleteFB::type_"]
        [::std::mem::offset_of!(XrEventDataSpaceListSaveCompleteFB, type_) - 0usize];
    ["Offset of field: XrEventDataSpaceListSaveCompleteFB::next"]
        [::std::mem::offset_of!(XrEventDataSpaceListSaveCompleteFB, next) - 8usize];
    ["Offset of field: XrEventDataSpaceListSaveCompleteFB::requestId"]
        [::std::mem::offset_of!(XrEventDataSpaceListSaveCompleteFB, requestId) - 16usize];
    ["Offset of field: XrEventDataSpaceListSaveCompleteFB::result"]
        [::std::mem::offset_of!(XrEventDataSpaceListSaveCompleteFB, result) - 24usize];
};
pub type XrSpaceUserIdFB = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceUserCreateInfoFB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub userId: XrSpaceUserIdFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceUserCreateInfoFB"][::std::mem::size_of::<XrSpaceUserCreateInfoFB>() - 24usize];
    ["Alignment of XrSpaceUserCreateInfoFB"]
        [::std::mem::align_of::<XrSpaceUserCreateInfoFB>() - 8usize];
    ["Offset of field: XrSpaceUserCreateInfoFB::type_"]
        [::std::mem::offset_of!(XrSpaceUserCreateInfoFB, type_) - 0usize];
    ["Offset of field: XrSpaceUserCreateInfoFB::next"]
        [::std::mem::offset_of!(XrSpaceUserCreateInfoFB, next) - 8usize];
    ["Offset of field: XrSpaceUserCreateInfoFB::userId"]
        [::std::mem::offset_of!(XrSpaceUserCreateInfoFB, userId) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemHeadsetIdPropertiesMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub id: XrUuidEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemHeadsetIdPropertiesMETA"]
        [::std::mem::size_of::<XrSystemHeadsetIdPropertiesMETA>() - 32usize];
    ["Alignment of XrSystemHeadsetIdPropertiesMETA"]
        [::std::mem::align_of::<XrSystemHeadsetIdPropertiesMETA>() - 8usize];
    ["Offset of field: XrSystemHeadsetIdPropertiesMETA::type_"]
        [::std::mem::offset_of!(XrSystemHeadsetIdPropertiesMETA, type_) - 0usize];
    ["Offset of field: XrSystemHeadsetIdPropertiesMETA::next"]
        [::std::mem::offset_of!(XrSystemHeadsetIdPropertiesMETA, next) - 8usize];
    ["Offset of field: XrSystemHeadsetIdPropertiesMETA::id"]
        [::std::mem::offset_of!(XrSystemHeadsetIdPropertiesMETA, id) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRecommendedLayerResolutionMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub recommendedImageDimensions: XrExtent2Di,
    pub isValid: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrRecommendedLayerResolutionMETA"]
        [::std::mem::size_of::<XrRecommendedLayerResolutionMETA>() - 32usize];
    ["Alignment of XrRecommendedLayerResolutionMETA"]
        [::std::mem::align_of::<XrRecommendedLayerResolutionMETA>() - 8usize];
    ["Offset of field: XrRecommendedLayerResolutionMETA::type_"]
        [::std::mem::offset_of!(XrRecommendedLayerResolutionMETA, type_) - 0usize];
    ["Offset of field: XrRecommendedLayerResolutionMETA::next"]
        [::std::mem::offset_of!(XrRecommendedLayerResolutionMETA, next) - 8usize];
    ["Offset of field: XrRecommendedLayerResolutionMETA::recommendedImageDimensions"][::std::mem::offset_of!(
        XrRecommendedLayerResolutionMETA,
        recommendedImageDimensions
    ) - 16usize];
    ["Offset of field: XrRecommendedLayerResolutionMETA::isValid"]
        [::std::mem::offset_of!(XrRecommendedLayerResolutionMETA, isValid) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrRecommendedLayerResolutionGetInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layer: *const XrCompositionLayerBaseHeader,
    pub predictedDisplayTime: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrRecommendedLayerResolutionGetInfoMETA"]
        [::std::mem::size_of::<XrRecommendedLayerResolutionGetInfoMETA>() - 32usize];
    ["Alignment of XrRecommendedLayerResolutionGetInfoMETA"]
        [::std::mem::align_of::<XrRecommendedLayerResolutionGetInfoMETA>() - 8usize];
    ["Offset of field: XrRecommendedLayerResolutionGetInfoMETA::type_"]
        [::std::mem::offset_of!(XrRecommendedLayerResolutionGetInfoMETA, type_) - 0usize];
    ["Offset of field: XrRecommendedLayerResolutionGetInfoMETA::next"]
        [::std::mem::offset_of!(XrRecommendedLayerResolutionGetInfoMETA, next) - 8usize];
    ["Offset of field: XrRecommendedLayerResolutionGetInfoMETA::layer"]
        [::std::mem::offset_of!(XrRecommendedLayerResolutionGetInfoMETA, layer) - 16usize];
    ["Offset of field: XrRecommendedLayerResolutionGetInfoMETA::predictedDisplayTime"][::std::mem::offset_of!(
        XrRecommendedLayerResolutionGetInfoMETA,
        predictedDisplayTime
    ) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughColorLutMETA_T {
    _unused: [u8; 0],
}
pub type XrPassthroughColorLutMETA = *mut XrPassthroughColorLutMETA_T;
pub const XrPassthroughColorLutChannelsMETA_XR_PASSTHROUGH_COLOR_LUT_CHANNELS_RGB_META:
    XrPassthroughColorLutChannelsMETA = 1;
pub const XrPassthroughColorLutChannelsMETA_XR_PASSTHROUGH_COLOR_LUT_CHANNELS_RGBA_META:
    XrPassthroughColorLutChannelsMETA = 2;
pub const XrPassthroughColorLutChannelsMETA_XR_PASSTHROUGH_COLOR_LUT_CHANNELS_MAX_ENUM_META:
    XrPassthroughColorLutChannelsMETA = 2147483647;
pub type XrPassthroughColorLutChannelsMETA = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughColorLutDataMETA {
    pub bufferSize: u32,
    pub buffer: *const u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPassthroughColorLutDataMETA"]
        [::std::mem::size_of::<XrPassthroughColorLutDataMETA>() - 16usize];
    ["Alignment of XrPassthroughColorLutDataMETA"]
        [::std::mem::align_of::<XrPassthroughColorLutDataMETA>() - 8usize];
    ["Offset of field: XrPassthroughColorLutDataMETA::bufferSize"]
        [::std::mem::offset_of!(XrPassthroughColorLutDataMETA, bufferSize) - 0usize];
    ["Offset of field: XrPassthroughColorLutDataMETA::buffer"]
        [::std::mem::offset_of!(XrPassthroughColorLutDataMETA, buffer) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughColorLutCreateInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub channels: XrPassthroughColorLutChannelsMETA,
    pub resolution: u32,
    pub data: XrPassthroughColorLutDataMETA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPassthroughColorLutCreateInfoMETA"]
        [::std::mem::size_of::<XrPassthroughColorLutCreateInfoMETA>() - 40usize];
    ["Alignment of XrPassthroughColorLutCreateInfoMETA"]
        [::std::mem::align_of::<XrPassthroughColorLutCreateInfoMETA>() - 8usize];
    ["Offset of field: XrPassthroughColorLutCreateInfoMETA::type_"]
        [::std::mem::offset_of!(XrPassthroughColorLutCreateInfoMETA, type_) - 0usize];
    ["Offset of field: XrPassthroughColorLutCreateInfoMETA::next"]
        [::std::mem::offset_of!(XrPassthroughColorLutCreateInfoMETA, next) - 8usize];
    ["Offset of field: XrPassthroughColorLutCreateInfoMETA::channels"]
        [::std::mem::offset_of!(XrPassthroughColorLutCreateInfoMETA, channels) - 16usize];
    ["Offset of field: XrPassthroughColorLutCreateInfoMETA::resolution"]
        [::std::mem::offset_of!(XrPassthroughColorLutCreateInfoMETA, resolution) - 20usize];
    ["Offset of field: XrPassthroughColorLutCreateInfoMETA::data"]
        [::std::mem::offset_of!(XrPassthroughColorLutCreateInfoMETA, data) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughColorLutUpdateInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub data: XrPassthroughColorLutDataMETA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPassthroughColorLutUpdateInfoMETA"]
        [::std::mem::size_of::<XrPassthroughColorLutUpdateInfoMETA>() - 32usize];
    ["Alignment of XrPassthroughColorLutUpdateInfoMETA"]
        [::std::mem::align_of::<XrPassthroughColorLutUpdateInfoMETA>() - 8usize];
    ["Offset of field: XrPassthroughColorLutUpdateInfoMETA::type_"]
        [::std::mem::offset_of!(XrPassthroughColorLutUpdateInfoMETA, type_) - 0usize];
    ["Offset of field: XrPassthroughColorLutUpdateInfoMETA::next"]
        [::std::mem::offset_of!(XrPassthroughColorLutUpdateInfoMETA, next) - 8usize];
    ["Offset of field: XrPassthroughColorLutUpdateInfoMETA::data"]
        [::std::mem::offset_of!(XrPassthroughColorLutUpdateInfoMETA, data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughColorMapLutMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub colorLut: XrPassthroughColorLutMETA,
    pub weight: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPassthroughColorMapLutMETA"]
        [::std::mem::size_of::<XrPassthroughColorMapLutMETA>() - 32usize];
    ["Alignment of XrPassthroughColorMapLutMETA"]
        [::std::mem::align_of::<XrPassthroughColorMapLutMETA>() - 8usize];
    ["Offset of field: XrPassthroughColorMapLutMETA::type_"]
        [::std::mem::offset_of!(XrPassthroughColorMapLutMETA, type_) - 0usize];
    ["Offset of field: XrPassthroughColorMapLutMETA::next"]
        [::std::mem::offset_of!(XrPassthroughColorMapLutMETA, next) - 8usize];
    ["Offset of field: XrPassthroughColorMapLutMETA::colorLut"]
        [::std::mem::offset_of!(XrPassthroughColorMapLutMETA, colorLut) - 16usize];
    ["Offset of field: XrPassthroughColorMapLutMETA::weight"]
        [::std::mem::offset_of!(XrPassthroughColorMapLutMETA, weight) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughColorMapInterpolatedLutMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub sourceColorLut: XrPassthroughColorLutMETA,
    pub targetColorLut: XrPassthroughColorLutMETA,
    pub weight: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPassthroughColorMapInterpolatedLutMETA"]
        [::std::mem::size_of::<XrPassthroughColorMapInterpolatedLutMETA>() - 40usize];
    ["Alignment of XrPassthroughColorMapInterpolatedLutMETA"]
        [::std::mem::align_of::<XrPassthroughColorMapInterpolatedLutMETA>() - 8usize];
    ["Offset of field: XrPassthroughColorMapInterpolatedLutMETA::type_"]
        [::std::mem::offset_of!(XrPassthroughColorMapInterpolatedLutMETA, type_) - 0usize];
    ["Offset of field: XrPassthroughColorMapInterpolatedLutMETA::next"]
        [::std::mem::offset_of!(XrPassthroughColorMapInterpolatedLutMETA, next) - 8usize];
    ["Offset of field: XrPassthroughColorMapInterpolatedLutMETA::sourceColorLut"][::std::mem::offset_of!(
        XrPassthroughColorMapInterpolatedLutMETA,
        sourceColorLut
    ) - 16usize];
    ["Offset of field: XrPassthroughColorMapInterpolatedLutMETA::targetColorLut"][::std::mem::offset_of!(
        XrPassthroughColorMapInterpolatedLutMETA,
        targetColorLut
    ) - 24usize];
    ["Offset of field: XrPassthroughColorMapInterpolatedLutMETA::weight"]
        [::std::mem::offset_of!(XrPassthroughColorMapInterpolatedLutMETA, weight) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemPassthroughColorLutPropertiesMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub maxColorLutResolution: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemPassthroughColorLutPropertiesMETA"]
        [::std::mem::size_of::<XrSystemPassthroughColorLutPropertiesMETA>() - 24usize];
    ["Alignment of XrSystemPassthroughColorLutPropertiesMETA"]
        [::std::mem::align_of::<XrSystemPassthroughColorLutPropertiesMETA>() - 8usize];
    ["Offset of field: XrSystemPassthroughColorLutPropertiesMETA::type_"]
        [::std::mem::offset_of!(XrSystemPassthroughColorLutPropertiesMETA, type_) - 0usize];
    ["Offset of field: XrSystemPassthroughColorLutPropertiesMETA::next"]
        [::std::mem::offset_of!(XrSystemPassthroughColorLutPropertiesMETA, next) - 8usize];
    ["Offset of field: XrSystemPassthroughColorLutPropertiesMETA::maxColorLutResolution"][::std::mem::offset_of!(
        XrSystemPassthroughColorLutPropertiesMETA,
        maxColorLutResolution
    )
        - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceTriangleMeshGetInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceTriangleMeshGetInfoMETA"]
        [::std::mem::size_of::<XrSpaceTriangleMeshGetInfoMETA>() - 16usize];
    ["Alignment of XrSpaceTriangleMeshGetInfoMETA"]
        [::std::mem::align_of::<XrSpaceTriangleMeshGetInfoMETA>() - 8usize];
    ["Offset of field: XrSpaceTriangleMeshGetInfoMETA::type_"]
        [::std::mem::offset_of!(XrSpaceTriangleMeshGetInfoMETA, type_) - 0usize];
    ["Offset of field: XrSpaceTriangleMeshGetInfoMETA::next"]
        [::std::mem::offset_of!(XrSpaceTriangleMeshGetInfoMETA, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceTriangleMeshMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub vertexCapacityInput: u32,
    pub vertexCountOutput: u32,
    pub vertices: *mut XrVector3f,
    pub indexCapacityInput: u32,
    pub indexCountOutput: u32,
    pub indices: *mut u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceTriangleMeshMETA"][::std::mem::size_of::<XrSpaceTriangleMeshMETA>() - 48usize];
    ["Alignment of XrSpaceTriangleMeshMETA"]
        [::std::mem::align_of::<XrSpaceTriangleMeshMETA>() - 8usize];
    ["Offset of field: XrSpaceTriangleMeshMETA::type_"]
        [::std::mem::offset_of!(XrSpaceTriangleMeshMETA, type_) - 0usize];
    ["Offset of field: XrSpaceTriangleMeshMETA::next"]
        [::std::mem::offset_of!(XrSpaceTriangleMeshMETA, next) - 8usize];
    ["Offset of field: XrSpaceTriangleMeshMETA::vertexCapacityInput"]
        [::std::mem::offset_of!(XrSpaceTriangleMeshMETA, vertexCapacityInput) - 16usize];
    ["Offset of field: XrSpaceTriangleMeshMETA::vertexCountOutput"]
        [::std::mem::offset_of!(XrSpaceTriangleMeshMETA, vertexCountOutput) - 20usize];
    ["Offset of field: XrSpaceTriangleMeshMETA::vertices"]
        [::std::mem::offset_of!(XrSpaceTriangleMeshMETA, vertices) - 24usize];
    ["Offset of field: XrSpaceTriangleMeshMETA::indexCapacityInput"]
        [::std::mem::offset_of!(XrSpaceTriangleMeshMETA, indexCapacityInput) - 32usize];
    ["Offset of field: XrSpaceTriangleMeshMETA::indexCountOutput"]
        [::std::mem::offset_of!(XrSpaceTriangleMeshMETA, indexCountOutput) - 36usize];
    ["Offset of field: XrSpaceTriangleMeshMETA::indices"]
        [::std::mem::offset_of!(XrSpaceTriangleMeshMETA, indices) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataPassthroughLayerResumedMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layer: XrPassthroughLayerFB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataPassthroughLayerResumedMETA"]
        [::std::mem::size_of::<XrEventDataPassthroughLayerResumedMETA>() - 24usize];
    ["Alignment of XrEventDataPassthroughLayerResumedMETA"]
        [::std::mem::align_of::<XrEventDataPassthroughLayerResumedMETA>() - 8usize];
    ["Offset of field: XrEventDataPassthroughLayerResumedMETA::type_"]
        [::std::mem::offset_of!(XrEventDataPassthroughLayerResumedMETA, type_) - 0usize];
    ["Offset of field: XrEventDataPassthroughLayerResumedMETA::next"]
        [::std::mem::offset_of!(XrEventDataPassthroughLayerResumedMETA, next) - 8usize];
    ["Offset of field: XrEventDataPassthroughLayerResumedMETA::layer"]
        [::std::mem::offset_of!(XrEventDataPassthroughLayerResumedMETA, layer) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFaceTracker2FB_T {
    _unused: [u8; 0],
}
pub type XrFaceTracker2FB = *mut XrFaceTracker2FB_T;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_BROW_LOWERER_L_FB: XrFaceExpression2FB = 0;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_BROW_LOWERER_R_FB: XrFaceExpression2FB = 1;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_CHEEK_PUFF_L_FB: XrFaceExpression2FB = 2;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_CHEEK_PUFF_R_FB: XrFaceExpression2FB = 3;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_CHEEK_RAISER_L_FB: XrFaceExpression2FB = 4;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_CHEEK_RAISER_R_FB: XrFaceExpression2FB = 5;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_CHEEK_SUCK_L_FB: XrFaceExpression2FB = 6;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_CHEEK_SUCK_R_FB: XrFaceExpression2FB = 7;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_CHIN_RAISER_B_FB: XrFaceExpression2FB = 8;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_CHIN_RAISER_T_FB: XrFaceExpression2FB = 9;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_DIMPLER_L_FB: XrFaceExpression2FB = 10;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_DIMPLER_R_FB: XrFaceExpression2FB = 11;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_EYES_CLOSED_L_FB: XrFaceExpression2FB = 12;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_EYES_CLOSED_R_FB: XrFaceExpression2FB = 13;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_EYES_LOOK_DOWN_L_FB: XrFaceExpression2FB = 14;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_EYES_LOOK_DOWN_R_FB: XrFaceExpression2FB = 15;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_EYES_LOOK_LEFT_L_FB: XrFaceExpression2FB = 16;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_EYES_LOOK_LEFT_R_FB: XrFaceExpression2FB = 17;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_EYES_LOOK_RIGHT_L_FB: XrFaceExpression2FB = 18;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_EYES_LOOK_RIGHT_R_FB: XrFaceExpression2FB = 19;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_EYES_LOOK_UP_L_FB: XrFaceExpression2FB = 20;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_EYES_LOOK_UP_R_FB: XrFaceExpression2FB = 21;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_INNER_BROW_RAISER_L_FB: XrFaceExpression2FB = 22;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_INNER_BROW_RAISER_R_FB: XrFaceExpression2FB = 23;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_JAW_DROP_FB: XrFaceExpression2FB = 24;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_JAW_SIDEWAYS_LEFT_FB: XrFaceExpression2FB = 25;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_JAW_SIDEWAYS_RIGHT_FB: XrFaceExpression2FB = 26;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_JAW_THRUST_FB: XrFaceExpression2FB = 27;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LID_TIGHTENER_L_FB: XrFaceExpression2FB = 28;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LID_TIGHTENER_R_FB: XrFaceExpression2FB = 29;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_CORNER_DEPRESSOR_L_FB: XrFaceExpression2FB =
    30;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_CORNER_DEPRESSOR_R_FB: XrFaceExpression2FB =
    31;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_CORNER_PULLER_L_FB: XrFaceExpression2FB = 32;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_CORNER_PULLER_R_FB: XrFaceExpression2FB = 33;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_FUNNELER_LB_FB: XrFaceExpression2FB = 34;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_FUNNELER_LT_FB: XrFaceExpression2FB = 35;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_FUNNELER_RB_FB: XrFaceExpression2FB = 36;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_FUNNELER_RT_FB: XrFaceExpression2FB = 37;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_PRESSOR_L_FB: XrFaceExpression2FB = 38;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_PRESSOR_R_FB: XrFaceExpression2FB = 39;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_PUCKER_L_FB: XrFaceExpression2FB = 40;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_PUCKER_R_FB: XrFaceExpression2FB = 41;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_STRETCHER_L_FB: XrFaceExpression2FB = 42;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_STRETCHER_R_FB: XrFaceExpression2FB = 43;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_SUCK_LB_FB: XrFaceExpression2FB = 44;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_SUCK_LT_FB: XrFaceExpression2FB = 45;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_SUCK_RB_FB: XrFaceExpression2FB = 46;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_SUCK_RT_FB: XrFaceExpression2FB = 47;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_TIGHTENER_L_FB: XrFaceExpression2FB = 48;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIP_TIGHTENER_R_FB: XrFaceExpression2FB = 49;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LIPS_TOWARD_FB: XrFaceExpression2FB = 50;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LOWER_LIP_DEPRESSOR_L_FB: XrFaceExpression2FB =
    51;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_LOWER_LIP_DEPRESSOR_R_FB: XrFaceExpression2FB =
    52;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_MOUTH_LEFT_FB: XrFaceExpression2FB = 53;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_MOUTH_RIGHT_FB: XrFaceExpression2FB = 54;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_NOSE_WRINKLER_L_FB: XrFaceExpression2FB = 55;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_NOSE_WRINKLER_R_FB: XrFaceExpression2FB = 56;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_OUTER_BROW_RAISER_L_FB: XrFaceExpression2FB = 57;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_OUTER_BROW_RAISER_R_FB: XrFaceExpression2FB = 58;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_UPPER_LID_RAISER_L_FB: XrFaceExpression2FB = 59;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_UPPER_LID_RAISER_R_FB: XrFaceExpression2FB = 60;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_UPPER_LIP_RAISER_L_FB: XrFaceExpression2FB = 61;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_UPPER_LIP_RAISER_R_FB: XrFaceExpression2FB = 62;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_TONGUE_TIP_INTERDENTAL_FB: XrFaceExpression2FB =
    63;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_TONGUE_TIP_ALVEOLAR_FB: XrFaceExpression2FB = 64;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_TONGUE_FRONT_DORSAL_PALATE_FB:
    XrFaceExpression2FB = 65;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_TONGUE_MID_DORSAL_PALATE_FB: XrFaceExpression2FB =
    66;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_TONGUE_BACK_DORSAL_VELAR_FB: XrFaceExpression2FB =
    67;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_TONGUE_OUT_FB: XrFaceExpression2FB = 68;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_TONGUE_RETREAT_FB: XrFaceExpression2FB = 69;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION2_COUNT_FB: XrFaceExpression2FB = 70;
pub const XrFaceExpression2FB_XR_FACE_EXPRESSION_2FB_MAX_ENUM_FB: XrFaceExpression2FB = 2147483647;
pub type XrFaceExpression2FB = ::std::os::raw::c_uint;
pub const XrFaceExpressionSet2FB_XR_FACE_EXPRESSION_SET2_DEFAULT_FB: XrFaceExpressionSet2FB = 0;
pub const XrFaceExpressionSet2FB_XR_FACE_EXPRESSION_SET_2FB_MAX_ENUM_FB: XrFaceExpressionSet2FB =
    2147483647;
pub type XrFaceExpressionSet2FB = ::std::os::raw::c_uint;
pub const XrFaceTrackingDataSource2FB_XR_FACE_TRACKING_DATA_SOURCE2_VISUAL_FB:
    XrFaceTrackingDataSource2FB = 0;
pub const XrFaceTrackingDataSource2FB_XR_FACE_TRACKING_DATA_SOURCE2_AUDIO_FB:
    XrFaceTrackingDataSource2FB = 1;
pub const XrFaceTrackingDataSource2FB_XR_FACE_TRACKING_DATA_SOURCE_2FB_MAX_ENUM_FB:
    XrFaceTrackingDataSource2FB = 2147483647;
pub type XrFaceTrackingDataSource2FB = ::std::os::raw::c_uint;
pub const XrFaceConfidence2FB_XR_FACE_CONFIDENCE2_LOWER_FACE_FB: XrFaceConfidence2FB = 0;
pub const XrFaceConfidence2FB_XR_FACE_CONFIDENCE2_UPPER_FACE_FB: XrFaceConfidence2FB = 1;
pub const XrFaceConfidence2FB_XR_FACE_CONFIDENCE2_COUNT_FB: XrFaceConfidence2FB = 2;
pub const XrFaceConfidence2FB_XR_FACE_CONFIDENCE_2FB_MAX_ENUM_FB: XrFaceConfidence2FB = 2147483647;
pub type XrFaceConfidence2FB = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemFaceTrackingProperties2FB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsVisualFaceTracking: XrBool32,
    pub supportsAudioFaceTracking: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemFaceTrackingProperties2FB"]
        [::std::mem::size_of::<XrSystemFaceTrackingProperties2FB>() - 24usize];
    ["Alignment of XrSystemFaceTrackingProperties2FB"]
        [::std::mem::align_of::<XrSystemFaceTrackingProperties2FB>() - 8usize];
    ["Offset of field: XrSystemFaceTrackingProperties2FB::type_"]
        [::std::mem::offset_of!(XrSystemFaceTrackingProperties2FB, type_) - 0usize];
    ["Offset of field: XrSystemFaceTrackingProperties2FB::next"]
        [::std::mem::offset_of!(XrSystemFaceTrackingProperties2FB, next) - 8usize];
    ["Offset of field: XrSystemFaceTrackingProperties2FB::supportsVisualFaceTracking"][::std::mem::offset_of!(
        XrSystemFaceTrackingProperties2FB,
        supportsVisualFaceTracking
    ) - 16usize];
    ["Offset of field: XrSystemFaceTrackingProperties2FB::supportsAudioFaceTracking"][::std::mem::offset_of!(
        XrSystemFaceTrackingProperties2FB,
        supportsAudioFaceTracking
    ) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFaceTrackerCreateInfo2FB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub faceExpressionSet: XrFaceExpressionSet2FB,
    pub requestedDataSourceCount: u32,
    pub requestedDataSources: *mut XrFaceTrackingDataSource2FB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFaceTrackerCreateInfo2FB"]
        [::std::mem::size_of::<XrFaceTrackerCreateInfo2FB>() - 32usize];
    ["Alignment of XrFaceTrackerCreateInfo2FB"]
        [::std::mem::align_of::<XrFaceTrackerCreateInfo2FB>() - 8usize];
    ["Offset of field: XrFaceTrackerCreateInfo2FB::type_"]
        [::std::mem::offset_of!(XrFaceTrackerCreateInfo2FB, type_) - 0usize];
    ["Offset of field: XrFaceTrackerCreateInfo2FB::next"]
        [::std::mem::offset_of!(XrFaceTrackerCreateInfo2FB, next) - 8usize];
    ["Offset of field: XrFaceTrackerCreateInfo2FB::faceExpressionSet"]
        [::std::mem::offset_of!(XrFaceTrackerCreateInfo2FB, faceExpressionSet) - 16usize];
    ["Offset of field: XrFaceTrackerCreateInfo2FB::requestedDataSourceCount"]
        [::std::mem::offset_of!(XrFaceTrackerCreateInfo2FB, requestedDataSourceCount) - 20usize];
    ["Offset of field: XrFaceTrackerCreateInfo2FB::requestedDataSources"]
        [::std::mem::offset_of!(XrFaceTrackerCreateInfo2FB, requestedDataSources) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFaceExpressionInfo2FB {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub time: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFaceExpressionInfo2FB"][::std::mem::size_of::<XrFaceExpressionInfo2FB>() - 24usize];
    ["Alignment of XrFaceExpressionInfo2FB"]
        [::std::mem::align_of::<XrFaceExpressionInfo2FB>() - 8usize];
    ["Offset of field: XrFaceExpressionInfo2FB::type_"]
        [::std::mem::offset_of!(XrFaceExpressionInfo2FB, type_) - 0usize];
    ["Offset of field: XrFaceExpressionInfo2FB::next"]
        [::std::mem::offset_of!(XrFaceExpressionInfo2FB, next) - 8usize];
    ["Offset of field: XrFaceExpressionInfo2FB::time"]
        [::std::mem::offset_of!(XrFaceExpressionInfo2FB, time) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFaceExpressionWeights2FB {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub weightCount: u32,
    pub weights: *mut f32,
    pub confidenceCount: u32,
    pub confidences: *mut f32,
    pub isValid: XrBool32,
    pub isEyeFollowingBlendshapesValid: XrBool32,
    pub dataSource: XrFaceTrackingDataSource2FB,
    pub time: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFaceExpressionWeights2FB"]
        [::std::mem::size_of::<XrFaceExpressionWeights2FB>() - 72usize];
    ["Alignment of XrFaceExpressionWeights2FB"]
        [::std::mem::align_of::<XrFaceExpressionWeights2FB>() - 8usize];
    ["Offset of field: XrFaceExpressionWeights2FB::type_"]
        [::std::mem::offset_of!(XrFaceExpressionWeights2FB, type_) - 0usize];
    ["Offset of field: XrFaceExpressionWeights2FB::next"]
        [::std::mem::offset_of!(XrFaceExpressionWeights2FB, next) - 8usize];
    ["Offset of field: XrFaceExpressionWeights2FB::weightCount"]
        [::std::mem::offset_of!(XrFaceExpressionWeights2FB, weightCount) - 16usize];
    ["Offset of field: XrFaceExpressionWeights2FB::weights"]
        [::std::mem::offset_of!(XrFaceExpressionWeights2FB, weights) - 24usize];
    ["Offset of field: XrFaceExpressionWeights2FB::confidenceCount"]
        [::std::mem::offset_of!(XrFaceExpressionWeights2FB, confidenceCount) - 32usize];
    ["Offset of field: XrFaceExpressionWeights2FB::confidences"]
        [::std::mem::offset_of!(XrFaceExpressionWeights2FB, confidences) - 40usize];
    ["Offset of field: XrFaceExpressionWeights2FB::isValid"]
        [::std::mem::offset_of!(XrFaceExpressionWeights2FB, isValid) - 48usize];
    ["Offset of field: XrFaceExpressionWeights2FB::isEyeFollowingBlendshapesValid"][::std::mem::offset_of!(
        XrFaceExpressionWeights2FB,
        isEyeFollowingBlendshapesValid
    ) - 52usize];
    ["Offset of field: XrFaceExpressionWeights2FB::dataSource"]
        [::std::mem::offset_of!(XrFaceExpressionWeights2FB, dataSource) - 56usize];
    ["Offset of field: XrFaceExpressionWeights2FB::time"]
        [::std::mem::offset_of!(XrFaceExpressionWeights2FB, time) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemSpatialEntitySharingPropertiesMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsSpatialEntitySharing: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemSpatialEntitySharingPropertiesMETA"]
        [::std::mem::size_of::<XrSystemSpatialEntitySharingPropertiesMETA>() - 24usize];
    ["Alignment of XrSystemSpatialEntitySharingPropertiesMETA"]
        [::std::mem::align_of::<XrSystemSpatialEntitySharingPropertiesMETA>() - 8usize];
    ["Offset of field: XrSystemSpatialEntitySharingPropertiesMETA::type_"]
        [::std::mem::offset_of!(XrSystemSpatialEntitySharingPropertiesMETA, type_) - 0usize];
    ["Offset of field: XrSystemSpatialEntitySharingPropertiesMETA::next"]
        [::std::mem::offset_of!(XrSystemSpatialEntitySharingPropertiesMETA, next) - 8usize];
    ["Offset of field: XrSystemSpatialEntitySharingPropertiesMETA::supportsSpatialEntitySharing"][::std::mem::offset_of!(
        XrSystemSpatialEntitySharingPropertiesMETA,
        supportsSpatialEntitySharing
    )
        - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrShareSpacesRecipientBaseHeaderMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrShareSpacesRecipientBaseHeaderMETA"]
        [::std::mem::size_of::<XrShareSpacesRecipientBaseHeaderMETA>() - 16usize];
    ["Alignment of XrShareSpacesRecipientBaseHeaderMETA"]
        [::std::mem::align_of::<XrShareSpacesRecipientBaseHeaderMETA>() - 8usize];
    ["Offset of field: XrShareSpacesRecipientBaseHeaderMETA::type_"]
        [::std::mem::offset_of!(XrShareSpacesRecipientBaseHeaderMETA, type_) - 0usize];
    ["Offset of field: XrShareSpacesRecipientBaseHeaderMETA::next"]
        [::std::mem::offset_of!(XrShareSpacesRecipientBaseHeaderMETA, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrShareSpacesInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub spaceCount: u32,
    pub spaces: *mut XrSpace,
    pub recipientInfo: *const XrShareSpacesRecipientBaseHeaderMETA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrShareSpacesInfoMETA"][::std::mem::size_of::<XrShareSpacesInfoMETA>() - 40usize];
    ["Alignment of XrShareSpacesInfoMETA"]
        [::std::mem::align_of::<XrShareSpacesInfoMETA>() - 8usize];
    ["Offset of field: XrShareSpacesInfoMETA::type_"]
        [::std::mem::offset_of!(XrShareSpacesInfoMETA, type_) - 0usize];
    ["Offset of field: XrShareSpacesInfoMETA::next"]
        [::std::mem::offset_of!(XrShareSpacesInfoMETA, next) - 8usize];
    ["Offset of field: XrShareSpacesInfoMETA::spaceCount"]
        [::std::mem::offset_of!(XrShareSpacesInfoMETA, spaceCount) - 16usize];
    ["Offset of field: XrShareSpacesInfoMETA::spaces"]
        [::std::mem::offset_of!(XrShareSpacesInfoMETA, spaces) - 24usize];
    ["Offset of field: XrShareSpacesInfoMETA::recipientInfo"]
        [::std::mem::offset_of!(XrShareSpacesInfoMETA, recipientInfo) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataShareSpacesCompleteMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestId: XrAsyncRequestIdFB,
    pub result: XrResult,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataShareSpacesCompleteMETA"]
        [::std::mem::size_of::<XrEventDataShareSpacesCompleteMETA>() - 32usize];
    ["Alignment of XrEventDataShareSpacesCompleteMETA"]
        [::std::mem::align_of::<XrEventDataShareSpacesCompleteMETA>() - 8usize];
    ["Offset of field: XrEventDataShareSpacesCompleteMETA::type_"]
        [::std::mem::offset_of!(XrEventDataShareSpacesCompleteMETA, type_) - 0usize];
    ["Offset of field: XrEventDataShareSpacesCompleteMETA::next"]
        [::std::mem::offset_of!(XrEventDataShareSpacesCompleteMETA, next) - 8usize];
    ["Offset of field: XrEventDataShareSpacesCompleteMETA::requestId"]
        [::std::mem::offset_of!(XrEventDataShareSpacesCompleteMETA, requestId) - 16usize];
    ["Offset of field: XrEventDataShareSpacesCompleteMETA::result"]
        [::std::mem::offset_of!(XrEventDataShareSpacesCompleteMETA, result) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEnvironmentDepthProviderMETA_T {
    _unused: [u8; 0],
}
pub type XrEnvironmentDepthProviderMETA = *mut XrEnvironmentDepthProviderMETA_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEnvironmentDepthSwapchainMETA_T {
    _unused: [u8; 0],
}
pub type XrEnvironmentDepthSwapchainMETA = *mut XrEnvironmentDepthSwapchainMETA_T;
pub type XrEnvironmentDepthProviderCreateFlagsMETA = XrFlags64;
pub type XrEnvironmentDepthSwapchainCreateFlagsMETA = XrFlags64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEnvironmentDepthProviderCreateInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub createFlags: XrEnvironmentDepthProviderCreateFlagsMETA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEnvironmentDepthProviderCreateInfoMETA"]
        [::std::mem::size_of::<XrEnvironmentDepthProviderCreateInfoMETA>() - 24usize];
    ["Alignment of XrEnvironmentDepthProviderCreateInfoMETA"]
        [::std::mem::align_of::<XrEnvironmentDepthProviderCreateInfoMETA>() - 8usize];
    ["Offset of field: XrEnvironmentDepthProviderCreateInfoMETA::type_"]
        [::std::mem::offset_of!(XrEnvironmentDepthProviderCreateInfoMETA, type_) - 0usize];
    ["Offset of field: XrEnvironmentDepthProviderCreateInfoMETA::next"]
        [::std::mem::offset_of!(XrEnvironmentDepthProviderCreateInfoMETA, next) - 8usize];
    ["Offset of field: XrEnvironmentDepthProviderCreateInfoMETA::createFlags"]
        [::std::mem::offset_of!(XrEnvironmentDepthProviderCreateInfoMETA, createFlags) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEnvironmentDepthSwapchainCreateInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub createFlags: XrEnvironmentDepthSwapchainCreateFlagsMETA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEnvironmentDepthSwapchainCreateInfoMETA"]
        [::std::mem::size_of::<XrEnvironmentDepthSwapchainCreateInfoMETA>() - 24usize];
    ["Alignment of XrEnvironmentDepthSwapchainCreateInfoMETA"]
        [::std::mem::align_of::<XrEnvironmentDepthSwapchainCreateInfoMETA>() - 8usize];
    ["Offset of field: XrEnvironmentDepthSwapchainCreateInfoMETA::type_"]
        [::std::mem::offset_of!(XrEnvironmentDepthSwapchainCreateInfoMETA, type_) - 0usize];
    ["Offset of field: XrEnvironmentDepthSwapchainCreateInfoMETA::next"]
        [::std::mem::offset_of!(XrEnvironmentDepthSwapchainCreateInfoMETA, next) - 8usize];
    ["Offset of field: XrEnvironmentDepthSwapchainCreateInfoMETA::createFlags"]
        [::std::mem::offset_of!(XrEnvironmentDepthSwapchainCreateInfoMETA, createFlags) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEnvironmentDepthSwapchainStateMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub width: u32,
    pub height: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEnvironmentDepthSwapchainStateMETA"]
        [::std::mem::size_of::<XrEnvironmentDepthSwapchainStateMETA>() - 24usize];
    ["Alignment of XrEnvironmentDepthSwapchainStateMETA"]
        [::std::mem::align_of::<XrEnvironmentDepthSwapchainStateMETA>() - 8usize];
    ["Offset of field: XrEnvironmentDepthSwapchainStateMETA::type_"]
        [::std::mem::offset_of!(XrEnvironmentDepthSwapchainStateMETA, type_) - 0usize];
    ["Offset of field: XrEnvironmentDepthSwapchainStateMETA::next"]
        [::std::mem::offset_of!(XrEnvironmentDepthSwapchainStateMETA, next) - 8usize];
    ["Offset of field: XrEnvironmentDepthSwapchainStateMETA::width"]
        [::std::mem::offset_of!(XrEnvironmentDepthSwapchainStateMETA, width) - 16usize];
    ["Offset of field: XrEnvironmentDepthSwapchainStateMETA::height"]
        [::std::mem::offset_of!(XrEnvironmentDepthSwapchainStateMETA, height) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEnvironmentDepthImageAcquireInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub space: XrSpace,
    pub displayTime: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEnvironmentDepthImageAcquireInfoMETA"]
        [::std::mem::size_of::<XrEnvironmentDepthImageAcquireInfoMETA>() - 32usize];
    ["Alignment of XrEnvironmentDepthImageAcquireInfoMETA"]
        [::std::mem::align_of::<XrEnvironmentDepthImageAcquireInfoMETA>() - 8usize];
    ["Offset of field: XrEnvironmentDepthImageAcquireInfoMETA::type_"]
        [::std::mem::offset_of!(XrEnvironmentDepthImageAcquireInfoMETA, type_) - 0usize];
    ["Offset of field: XrEnvironmentDepthImageAcquireInfoMETA::next"]
        [::std::mem::offset_of!(XrEnvironmentDepthImageAcquireInfoMETA, next) - 8usize];
    ["Offset of field: XrEnvironmentDepthImageAcquireInfoMETA::space"]
        [::std::mem::offset_of!(XrEnvironmentDepthImageAcquireInfoMETA, space) - 16usize];
    ["Offset of field: XrEnvironmentDepthImageAcquireInfoMETA::displayTime"]
        [::std::mem::offset_of!(XrEnvironmentDepthImageAcquireInfoMETA, displayTime) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEnvironmentDepthImageViewMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub fov: XrFovf,
    pub pose: XrPosef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEnvironmentDepthImageViewMETA"]
        [::std::mem::size_of::<XrEnvironmentDepthImageViewMETA>() - 64usize];
    ["Alignment of XrEnvironmentDepthImageViewMETA"]
        [::std::mem::align_of::<XrEnvironmentDepthImageViewMETA>() - 8usize];
    ["Offset of field: XrEnvironmentDepthImageViewMETA::type_"]
        [::std::mem::offset_of!(XrEnvironmentDepthImageViewMETA, type_) - 0usize];
    ["Offset of field: XrEnvironmentDepthImageViewMETA::next"]
        [::std::mem::offset_of!(XrEnvironmentDepthImageViewMETA, next) - 8usize];
    ["Offset of field: XrEnvironmentDepthImageViewMETA::fov"]
        [::std::mem::offset_of!(XrEnvironmentDepthImageViewMETA, fov) - 16usize];
    ["Offset of field: XrEnvironmentDepthImageViewMETA::pose"]
        [::std::mem::offset_of!(XrEnvironmentDepthImageViewMETA, pose) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEnvironmentDepthImageMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub swapchainIndex: u32,
    pub nearZ: f32,
    pub farZ: f32,
    pub views: [XrEnvironmentDepthImageViewMETA; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEnvironmentDepthImageMETA"]
        [::std::mem::size_of::<XrEnvironmentDepthImageMETA>() - 160usize];
    ["Alignment of XrEnvironmentDepthImageMETA"]
        [::std::mem::align_of::<XrEnvironmentDepthImageMETA>() - 8usize];
    ["Offset of field: XrEnvironmentDepthImageMETA::type_"]
        [::std::mem::offset_of!(XrEnvironmentDepthImageMETA, type_) - 0usize];
    ["Offset of field: XrEnvironmentDepthImageMETA::next"]
        [::std::mem::offset_of!(XrEnvironmentDepthImageMETA, next) - 8usize];
    ["Offset of field: XrEnvironmentDepthImageMETA::swapchainIndex"]
        [::std::mem::offset_of!(XrEnvironmentDepthImageMETA, swapchainIndex) - 16usize];
    ["Offset of field: XrEnvironmentDepthImageMETA::nearZ"]
        [::std::mem::offset_of!(XrEnvironmentDepthImageMETA, nearZ) - 20usize];
    ["Offset of field: XrEnvironmentDepthImageMETA::farZ"]
        [::std::mem::offset_of!(XrEnvironmentDepthImageMETA, farZ) - 24usize];
    ["Offset of field: XrEnvironmentDepthImageMETA::views"]
        [::std::mem::offset_of!(XrEnvironmentDepthImageMETA, views) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEnvironmentDepthHandRemovalSetInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub enabled: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEnvironmentDepthHandRemovalSetInfoMETA"]
        [::std::mem::size_of::<XrEnvironmentDepthHandRemovalSetInfoMETA>() - 24usize];
    ["Alignment of XrEnvironmentDepthHandRemovalSetInfoMETA"]
        [::std::mem::align_of::<XrEnvironmentDepthHandRemovalSetInfoMETA>() - 8usize];
    ["Offset of field: XrEnvironmentDepthHandRemovalSetInfoMETA::type_"]
        [::std::mem::offset_of!(XrEnvironmentDepthHandRemovalSetInfoMETA, type_) - 0usize];
    ["Offset of field: XrEnvironmentDepthHandRemovalSetInfoMETA::next"]
        [::std::mem::offset_of!(XrEnvironmentDepthHandRemovalSetInfoMETA, next) - 8usize];
    ["Offset of field: XrEnvironmentDepthHandRemovalSetInfoMETA::enabled"]
        [::std::mem::offset_of!(XrEnvironmentDepthHandRemovalSetInfoMETA, enabled) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemEnvironmentDepthPropertiesMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsEnvironmentDepth: XrBool32,
    pub supportsHandRemoval: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemEnvironmentDepthPropertiesMETA"]
        [::std::mem::size_of::<XrSystemEnvironmentDepthPropertiesMETA>() - 24usize];
    ["Alignment of XrSystemEnvironmentDepthPropertiesMETA"]
        [::std::mem::align_of::<XrSystemEnvironmentDepthPropertiesMETA>() - 8usize];
    ["Offset of field: XrSystemEnvironmentDepthPropertiesMETA::type_"]
        [::std::mem::offset_of!(XrSystemEnvironmentDepthPropertiesMETA, type_) - 0usize];
    ["Offset of field: XrSystemEnvironmentDepthPropertiesMETA::next"]
        [::std::mem::offset_of!(XrSystemEnvironmentDepthPropertiesMETA, next) - 8usize];
    ["Offset of field: XrSystemEnvironmentDepthPropertiesMETA::supportsEnvironmentDepth"][::std::mem::offset_of!(
        XrSystemEnvironmentDepthPropertiesMETA,
        supportsEnvironmentDepth
    )
        - 16usize];
    ["Offset of field: XrSystemEnvironmentDepthPropertiesMETA::supportsHandRemoval"][::std::mem::offset_of!(
        XrSystemEnvironmentDepthPropertiesMETA,
        supportsHandRemoval
    ) - 20usize];
};
pub const XrTrackingOptimizationSettingsDomainQCOM_XR_TRACKING_OPTIMIZATION_SETTINGS_DOMAIN_ALL_QCOM : XrTrackingOptimizationSettingsDomainQCOM = 1 ;
pub const XrTrackingOptimizationSettingsDomainQCOM_XR_TRACKING_OPTIMIZATION_SETTINGS_DOMAIN_MAX_ENUM_QCOM : XrTrackingOptimizationSettingsDomainQCOM = 2147483647 ;
pub type XrTrackingOptimizationSettingsDomainQCOM = ::std::os::raw::c_uint;
pub const XrTrackingOptimizationSettingsHintQCOM_XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_NONE_QCOM : XrTrackingOptimizationSettingsHintQCOM = 0 ;
pub const XrTrackingOptimizationSettingsHintQCOM_XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_LONG_RANGE_PRIORIZATION_QCOM : XrTrackingOptimizationSettingsHintQCOM = 1 ;
pub const XrTrackingOptimizationSettingsHintQCOM_XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_CLOSE_RANGE_PRIORIZATION_QCOM : XrTrackingOptimizationSettingsHintQCOM = 2 ;
pub const XrTrackingOptimizationSettingsHintQCOM_XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_LOW_POWER_PRIORIZATION_QCOM : XrTrackingOptimizationSettingsHintQCOM = 3 ;
pub const XrTrackingOptimizationSettingsHintQCOM_XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_HIGH_POWER_PRIORIZATION_QCOM : XrTrackingOptimizationSettingsHintQCOM = 4 ;
pub const XrTrackingOptimizationSettingsHintQCOM_XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_MAX_ENUM_QCOM : XrTrackingOptimizationSettingsHintQCOM = 2147483647 ;
pub type XrTrackingOptimizationSettingsHintQCOM = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughHTC_T {
    _unused: [u8; 0],
}
pub type XrPassthroughHTC = *mut XrPassthroughHTC_T;
pub const XrPassthroughFormHTC_XR_PASSTHROUGH_FORM_PLANAR_HTC: XrPassthroughFormHTC = 0;
pub const XrPassthroughFormHTC_XR_PASSTHROUGH_FORM_PROJECTED_HTC: XrPassthroughFormHTC = 1;
pub const XrPassthroughFormHTC_XR_PASSTHROUGH_FORM_MAX_ENUM_HTC: XrPassthroughFormHTC = 2147483647;
pub type XrPassthroughFormHTC = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughCreateInfoHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub form: XrPassthroughFormHTC,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPassthroughCreateInfoHTC"]
        [::std::mem::size_of::<XrPassthroughCreateInfoHTC>() - 24usize];
    ["Alignment of XrPassthroughCreateInfoHTC"]
        [::std::mem::align_of::<XrPassthroughCreateInfoHTC>() - 8usize];
    ["Offset of field: XrPassthroughCreateInfoHTC::type_"]
        [::std::mem::offset_of!(XrPassthroughCreateInfoHTC, type_) - 0usize];
    ["Offset of field: XrPassthroughCreateInfoHTC::next"]
        [::std::mem::offset_of!(XrPassthroughCreateInfoHTC, next) - 8usize];
    ["Offset of field: XrPassthroughCreateInfoHTC::form"]
        [::std::mem::offset_of!(XrPassthroughCreateInfoHTC, form) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughColorHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub alpha: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPassthroughColorHTC"][::std::mem::size_of::<XrPassthroughColorHTC>() - 24usize];
    ["Alignment of XrPassthroughColorHTC"]
        [::std::mem::align_of::<XrPassthroughColorHTC>() - 8usize];
    ["Offset of field: XrPassthroughColorHTC::type_"]
        [::std::mem::offset_of!(XrPassthroughColorHTC, type_) - 0usize];
    ["Offset of field: XrPassthroughColorHTC::next"]
        [::std::mem::offset_of!(XrPassthroughColorHTC, next) - 8usize];
    ["Offset of field: XrPassthroughColorHTC::alpha"]
        [::std::mem::offset_of!(XrPassthroughColorHTC, alpha) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPassthroughMeshTransformInfoHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub vertexCount: u32,
    pub vertices: *const XrVector3f,
    pub indexCount: u32,
    pub indices: *const u32,
    pub baseSpace: XrSpace,
    pub time: XrTime,
    pub pose: XrPosef,
    pub scale: XrVector3f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPassthroughMeshTransformInfoHTC"]
        [::std::mem::size_of::<XrPassthroughMeshTransformInfoHTC>() - 104usize];
    ["Alignment of XrPassthroughMeshTransformInfoHTC"]
        [::std::mem::align_of::<XrPassthroughMeshTransformInfoHTC>() - 8usize];
    ["Offset of field: XrPassthroughMeshTransformInfoHTC::type_"]
        [::std::mem::offset_of!(XrPassthroughMeshTransformInfoHTC, type_) - 0usize];
    ["Offset of field: XrPassthroughMeshTransformInfoHTC::next"]
        [::std::mem::offset_of!(XrPassthroughMeshTransformInfoHTC, next) - 8usize];
    ["Offset of field: XrPassthroughMeshTransformInfoHTC::vertexCount"]
        [::std::mem::offset_of!(XrPassthroughMeshTransformInfoHTC, vertexCount) - 16usize];
    ["Offset of field: XrPassthroughMeshTransformInfoHTC::vertices"]
        [::std::mem::offset_of!(XrPassthroughMeshTransformInfoHTC, vertices) - 24usize];
    ["Offset of field: XrPassthroughMeshTransformInfoHTC::indexCount"]
        [::std::mem::offset_of!(XrPassthroughMeshTransformInfoHTC, indexCount) - 32usize];
    ["Offset of field: XrPassthroughMeshTransformInfoHTC::indices"]
        [::std::mem::offset_of!(XrPassthroughMeshTransformInfoHTC, indices) - 40usize];
    ["Offset of field: XrPassthroughMeshTransformInfoHTC::baseSpace"]
        [::std::mem::offset_of!(XrPassthroughMeshTransformInfoHTC, baseSpace) - 48usize];
    ["Offset of field: XrPassthroughMeshTransformInfoHTC::time"]
        [::std::mem::offset_of!(XrPassthroughMeshTransformInfoHTC, time) - 56usize];
    ["Offset of field: XrPassthroughMeshTransformInfoHTC::pose"]
        [::std::mem::offset_of!(XrPassthroughMeshTransformInfoHTC, pose) - 64usize];
    ["Offset of field: XrPassthroughMeshTransformInfoHTC::scale"]
        [::std::mem::offset_of!(XrPassthroughMeshTransformInfoHTC, scale) - 92usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrCompositionLayerPassthroughHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub layerFlags: XrCompositionLayerFlags,
    pub space: XrSpace,
    pub passthrough: XrPassthroughHTC,
    pub color: XrPassthroughColorHTC,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrCompositionLayerPassthroughHTC"]
        [::std::mem::size_of::<XrCompositionLayerPassthroughHTC>() - 64usize];
    ["Alignment of XrCompositionLayerPassthroughHTC"]
        [::std::mem::align_of::<XrCompositionLayerPassthroughHTC>() - 8usize];
    ["Offset of field: XrCompositionLayerPassthroughHTC::type_"]
        [::std::mem::offset_of!(XrCompositionLayerPassthroughHTC, type_) - 0usize];
    ["Offset of field: XrCompositionLayerPassthroughHTC::next"]
        [::std::mem::offset_of!(XrCompositionLayerPassthroughHTC, next) - 8usize];
    ["Offset of field: XrCompositionLayerPassthroughHTC::layerFlags"]
        [::std::mem::offset_of!(XrCompositionLayerPassthroughHTC, layerFlags) - 16usize];
    ["Offset of field: XrCompositionLayerPassthroughHTC::space"]
        [::std::mem::offset_of!(XrCompositionLayerPassthroughHTC, space) - 24usize];
    ["Offset of field: XrCompositionLayerPassthroughHTC::passthrough"]
        [::std::mem::offset_of!(XrCompositionLayerPassthroughHTC, passthrough) - 32usize];
    ["Offset of field: XrCompositionLayerPassthroughHTC::color"]
        [::std::mem::offset_of!(XrCompositionLayerPassthroughHTC, color) - 40usize];
};
pub const XrFoveationModeHTC_XR_FOVEATION_MODE_DISABLE_HTC: XrFoveationModeHTC = 0;
pub const XrFoveationModeHTC_XR_FOVEATION_MODE_FIXED_HTC: XrFoveationModeHTC = 1;
pub const XrFoveationModeHTC_XR_FOVEATION_MODE_DYNAMIC_HTC: XrFoveationModeHTC = 2;
pub const XrFoveationModeHTC_XR_FOVEATION_MODE_CUSTOM_HTC: XrFoveationModeHTC = 3;
pub const XrFoveationModeHTC_XR_FOVEATION_MODE_MAX_ENUM_HTC: XrFoveationModeHTC = 2147483647;
pub type XrFoveationModeHTC = ::std::os::raw::c_uint;
pub const XrFoveationLevelHTC_XR_FOVEATION_LEVEL_NONE_HTC: XrFoveationLevelHTC = 0;
pub const XrFoveationLevelHTC_XR_FOVEATION_LEVEL_LOW_HTC: XrFoveationLevelHTC = 1;
pub const XrFoveationLevelHTC_XR_FOVEATION_LEVEL_MEDIUM_HTC: XrFoveationLevelHTC = 2;
pub const XrFoveationLevelHTC_XR_FOVEATION_LEVEL_HIGH_HTC: XrFoveationLevelHTC = 3;
pub const XrFoveationLevelHTC_XR_FOVEATION_LEVEL_MAX_ENUM_HTC: XrFoveationLevelHTC = 2147483647;
pub type XrFoveationLevelHTC = ::std::os::raw::c_uint;
pub type XrFoveationDynamicFlagsHTC = XrFlags64;
pub const XR_FOVEATION_DYNAMIC_LEVEL_ENABLED_BIT_HTC: XrFoveationDynamicFlagsHTC = 1;
pub const XR_FOVEATION_DYNAMIC_CLEAR_FOV_ENABLED_BIT_HTC: XrFoveationDynamicFlagsHTC = 2;
pub const XR_FOVEATION_DYNAMIC_FOCAL_CENTER_OFFSET_ENABLED_BIT_HTC: XrFoveationDynamicFlagsHTC = 4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFoveationApplyInfoHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub mode: XrFoveationModeHTC,
    pub subImageCount: u32,
    pub subImages: *mut XrSwapchainSubImage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFoveationApplyInfoHTC"][::std::mem::size_of::<XrFoveationApplyInfoHTC>() - 32usize];
    ["Alignment of XrFoveationApplyInfoHTC"]
        [::std::mem::align_of::<XrFoveationApplyInfoHTC>() - 8usize];
    ["Offset of field: XrFoveationApplyInfoHTC::type_"]
        [::std::mem::offset_of!(XrFoveationApplyInfoHTC, type_) - 0usize];
    ["Offset of field: XrFoveationApplyInfoHTC::next"]
        [::std::mem::offset_of!(XrFoveationApplyInfoHTC, next) - 8usize];
    ["Offset of field: XrFoveationApplyInfoHTC::mode"]
        [::std::mem::offset_of!(XrFoveationApplyInfoHTC, mode) - 16usize];
    ["Offset of field: XrFoveationApplyInfoHTC::subImageCount"]
        [::std::mem::offset_of!(XrFoveationApplyInfoHTC, subImageCount) - 20usize];
    ["Offset of field: XrFoveationApplyInfoHTC::subImages"]
        [::std::mem::offset_of!(XrFoveationApplyInfoHTC, subImages) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFoveationConfigurationHTC {
    pub level: XrFoveationLevelHTC,
    pub clearFovDegree: f32,
    pub focalCenterOffset: XrVector2f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFoveationConfigurationHTC"]
        [::std::mem::size_of::<XrFoveationConfigurationHTC>() - 16usize];
    ["Alignment of XrFoveationConfigurationHTC"]
        [::std::mem::align_of::<XrFoveationConfigurationHTC>() - 4usize];
    ["Offset of field: XrFoveationConfigurationHTC::level"]
        [::std::mem::offset_of!(XrFoveationConfigurationHTC, level) - 0usize];
    ["Offset of field: XrFoveationConfigurationHTC::clearFovDegree"]
        [::std::mem::offset_of!(XrFoveationConfigurationHTC, clearFovDegree) - 4usize];
    ["Offset of field: XrFoveationConfigurationHTC::focalCenterOffset"]
        [::std::mem::offset_of!(XrFoveationConfigurationHTC, focalCenterOffset) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFoveationDynamicModeInfoHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub dynamicFlags: XrFoveationDynamicFlagsHTC,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFoveationDynamicModeInfoHTC"]
        [::std::mem::size_of::<XrFoveationDynamicModeInfoHTC>() - 24usize];
    ["Alignment of XrFoveationDynamicModeInfoHTC"]
        [::std::mem::align_of::<XrFoveationDynamicModeInfoHTC>() - 8usize];
    ["Offset of field: XrFoveationDynamicModeInfoHTC::type_"]
        [::std::mem::offset_of!(XrFoveationDynamicModeInfoHTC, type_) - 0usize];
    ["Offset of field: XrFoveationDynamicModeInfoHTC::next"]
        [::std::mem::offset_of!(XrFoveationDynamicModeInfoHTC, next) - 8usize];
    ["Offset of field: XrFoveationDynamicModeInfoHTC::dynamicFlags"]
        [::std::mem::offset_of!(XrFoveationDynamicModeInfoHTC, dynamicFlags) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFoveationCustomModeInfoHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub configCount: u32,
    pub configs: *const XrFoveationConfigurationHTC,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFoveationCustomModeInfoHTC"]
        [::std::mem::size_of::<XrFoveationCustomModeInfoHTC>() - 32usize];
    ["Alignment of XrFoveationCustomModeInfoHTC"]
        [::std::mem::align_of::<XrFoveationCustomModeInfoHTC>() - 8usize];
    ["Offset of field: XrFoveationCustomModeInfoHTC::type_"]
        [::std::mem::offset_of!(XrFoveationCustomModeInfoHTC, type_) - 0usize];
    ["Offset of field: XrFoveationCustomModeInfoHTC::next"]
        [::std::mem::offset_of!(XrFoveationCustomModeInfoHTC, next) - 8usize];
    ["Offset of field: XrFoveationCustomModeInfoHTC::configCount"]
        [::std::mem::offset_of!(XrFoveationCustomModeInfoHTC, configCount) - 16usize];
    ["Offset of field: XrFoveationCustomModeInfoHTC::configs"]
        [::std::mem::offset_of!(XrFoveationCustomModeInfoHTC, configs) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemAnchorPropertiesHTC {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsAnchor: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemAnchorPropertiesHTC"]
        [::std::mem::size_of::<XrSystemAnchorPropertiesHTC>() - 24usize];
    ["Alignment of XrSystemAnchorPropertiesHTC"]
        [::std::mem::align_of::<XrSystemAnchorPropertiesHTC>() - 8usize];
    ["Offset of field: XrSystemAnchorPropertiesHTC::type_"]
        [::std::mem::offset_of!(XrSystemAnchorPropertiesHTC, type_) - 0usize];
    ["Offset of field: XrSystemAnchorPropertiesHTC::next"]
        [::std::mem::offset_of!(XrSystemAnchorPropertiesHTC, next) - 8usize];
    ["Offset of field: XrSystemAnchorPropertiesHTC::supportsAnchor"]
        [::std::mem::offset_of!(XrSystemAnchorPropertiesHTC, supportsAnchor) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorNameHTC {
    pub name: [::std::os::raw::c_char; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorNameHTC"][::std::mem::size_of::<XrSpatialAnchorNameHTC>() - 256usize];
    ["Alignment of XrSpatialAnchorNameHTC"]
        [::std::mem::align_of::<XrSpatialAnchorNameHTC>() - 1usize];
    ["Offset of field: XrSpatialAnchorNameHTC::name"]
        [::std::mem::offset_of!(XrSpatialAnchorNameHTC, name) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpatialAnchorCreateInfoHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub space: XrSpace,
    pub poseInSpace: XrPosef,
    pub name: XrSpatialAnchorNameHTC,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpatialAnchorCreateInfoHTC"]
        [::std::mem::size_of::<XrSpatialAnchorCreateInfoHTC>() - 312usize];
    ["Alignment of XrSpatialAnchorCreateInfoHTC"]
        [::std::mem::align_of::<XrSpatialAnchorCreateInfoHTC>() - 8usize];
    ["Offset of field: XrSpatialAnchorCreateInfoHTC::type_"]
        [::std::mem::offset_of!(XrSpatialAnchorCreateInfoHTC, type_) - 0usize];
    ["Offset of field: XrSpatialAnchorCreateInfoHTC::next"]
        [::std::mem::offset_of!(XrSpatialAnchorCreateInfoHTC, next) - 8usize];
    ["Offset of field: XrSpatialAnchorCreateInfoHTC::space"]
        [::std::mem::offset_of!(XrSpatialAnchorCreateInfoHTC, space) - 16usize];
    ["Offset of field: XrSpatialAnchorCreateInfoHTC::poseInSpace"]
        [::std::mem::offset_of!(XrSpatialAnchorCreateInfoHTC, poseInSpace) - 24usize];
    ["Offset of field: XrSpatialAnchorCreateInfoHTC::name"]
        [::std::mem::offset_of!(XrSpatialAnchorCreateInfoHTC, name) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBodyTrackerHTC_T {
    _unused: [u8; 0],
}
pub type XrBodyTrackerHTC = *mut XrBodyTrackerHTC_T;
pub const XrBodyJointHTC_XR_BODY_JOINT_PELVIS_HTC: XrBodyJointHTC = 0;
pub const XrBodyJointHTC_XR_BODY_JOINT_LEFT_HIP_HTC: XrBodyJointHTC = 1;
pub const XrBodyJointHTC_XR_BODY_JOINT_LEFT_KNEE_HTC: XrBodyJointHTC = 2;
pub const XrBodyJointHTC_XR_BODY_JOINT_LEFT_ANKLE_HTC: XrBodyJointHTC = 3;
pub const XrBodyJointHTC_XR_BODY_JOINT_LEFT_FEET_HTC: XrBodyJointHTC = 4;
pub const XrBodyJointHTC_XR_BODY_JOINT_RIGHT_HIP_HTC: XrBodyJointHTC = 5;
pub const XrBodyJointHTC_XR_BODY_JOINT_RIGHT_KNEE_HTC: XrBodyJointHTC = 6;
pub const XrBodyJointHTC_XR_BODY_JOINT_RIGHT_ANKLE_HTC: XrBodyJointHTC = 7;
pub const XrBodyJointHTC_XR_BODY_JOINT_RIGHT_FEET_HTC: XrBodyJointHTC = 8;
pub const XrBodyJointHTC_XR_BODY_JOINT_WAIST_HTC: XrBodyJointHTC = 9;
pub const XrBodyJointHTC_XR_BODY_JOINT_SPINE_LOWER_HTC: XrBodyJointHTC = 10;
pub const XrBodyJointHTC_XR_BODY_JOINT_SPINE_MIDDLE_HTC: XrBodyJointHTC = 11;
pub const XrBodyJointHTC_XR_BODY_JOINT_SPINE_HIGH_HTC: XrBodyJointHTC = 12;
pub const XrBodyJointHTC_XR_BODY_JOINT_CHEST_HTC: XrBodyJointHTC = 13;
pub const XrBodyJointHTC_XR_BODY_JOINT_NECK_HTC: XrBodyJointHTC = 14;
pub const XrBodyJointHTC_XR_BODY_JOINT_HEAD_HTC: XrBodyJointHTC = 15;
pub const XrBodyJointHTC_XR_BODY_JOINT_LEFT_CLAVICLE_HTC: XrBodyJointHTC = 16;
pub const XrBodyJointHTC_XR_BODY_JOINT_LEFT_SCAPULA_HTC: XrBodyJointHTC = 17;
pub const XrBodyJointHTC_XR_BODY_JOINT_LEFT_ARM_HTC: XrBodyJointHTC = 18;
pub const XrBodyJointHTC_XR_BODY_JOINT_LEFT_ELBOW_HTC: XrBodyJointHTC = 19;
pub const XrBodyJointHTC_XR_BODY_JOINT_LEFT_WRIST_HTC: XrBodyJointHTC = 20;
pub const XrBodyJointHTC_XR_BODY_JOINT_RIGHT_CLAVICLE_HTC: XrBodyJointHTC = 21;
pub const XrBodyJointHTC_XR_BODY_JOINT_RIGHT_SCAPULA_HTC: XrBodyJointHTC = 22;
pub const XrBodyJointHTC_XR_BODY_JOINT_RIGHT_ARM_HTC: XrBodyJointHTC = 23;
pub const XrBodyJointHTC_XR_BODY_JOINT_RIGHT_ELBOW_HTC: XrBodyJointHTC = 24;
pub const XrBodyJointHTC_XR_BODY_JOINT_RIGHT_WRIST_HTC: XrBodyJointHTC = 25;
pub const XrBodyJointHTC_XR_BODY_JOINT_MAX_ENUM_HTC: XrBodyJointHTC = 2147483647;
pub type XrBodyJointHTC = ::std::os::raw::c_uint;
pub const XrBodyJointSetHTC_XR_BODY_JOINT_SET_FULL_HTC: XrBodyJointSetHTC = 0;
pub const XrBodyJointSetHTC_XR_BODY_JOINT_SET_MAX_ENUM_HTC: XrBodyJointSetHTC = 2147483647;
pub type XrBodyJointSetHTC = ::std::os::raw::c_uint;
pub const XrBodyJointConfidenceHTC_XR_BODY_JOINT_CONFIDENCE_NONE_HTC: XrBodyJointConfidenceHTC = 0;
pub const XrBodyJointConfidenceHTC_XR_BODY_JOINT_CONFIDENCE_LOW_HTC: XrBodyJointConfidenceHTC = 1;
pub const XrBodyJointConfidenceHTC_XR_BODY_JOINT_CONFIDENCE_HIGH_HTC: XrBodyJointConfidenceHTC = 2;
pub const XrBodyJointConfidenceHTC_XR_BODY_JOINT_CONFIDENCE_MAX_ENUM_HTC: XrBodyJointConfidenceHTC =
    2147483647;
pub type XrBodyJointConfidenceHTC = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemBodyTrackingPropertiesHTC {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsBodyTracking: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemBodyTrackingPropertiesHTC"]
        [::std::mem::size_of::<XrSystemBodyTrackingPropertiesHTC>() - 24usize];
    ["Alignment of XrSystemBodyTrackingPropertiesHTC"]
        [::std::mem::align_of::<XrSystemBodyTrackingPropertiesHTC>() - 8usize];
    ["Offset of field: XrSystemBodyTrackingPropertiesHTC::type_"]
        [::std::mem::offset_of!(XrSystemBodyTrackingPropertiesHTC, type_) - 0usize];
    ["Offset of field: XrSystemBodyTrackingPropertiesHTC::next"]
        [::std::mem::offset_of!(XrSystemBodyTrackingPropertiesHTC, next) - 8usize];
    ["Offset of field: XrSystemBodyTrackingPropertiesHTC::supportsBodyTracking"]
        [::std::mem::offset_of!(XrSystemBodyTrackingPropertiesHTC, supportsBodyTracking) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBodyTrackerCreateInfoHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub bodyJointSet: XrBodyJointSetHTC,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrBodyTrackerCreateInfoHTC"]
        [::std::mem::size_of::<XrBodyTrackerCreateInfoHTC>() - 24usize];
    ["Alignment of XrBodyTrackerCreateInfoHTC"]
        [::std::mem::align_of::<XrBodyTrackerCreateInfoHTC>() - 8usize];
    ["Offset of field: XrBodyTrackerCreateInfoHTC::type_"]
        [::std::mem::offset_of!(XrBodyTrackerCreateInfoHTC, type_) - 0usize];
    ["Offset of field: XrBodyTrackerCreateInfoHTC::next"]
        [::std::mem::offset_of!(XrBodyTrackerCreateInfoHTC, next) - 8usize];
    ["Offset of field: XrBodyTrackerCreateInfoHTC::bodyJointSet"]
        [::std::mem::offset_of!(XrBodyTrackerCreateInfoHTC, bodyJointSet) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBodyJointsLocateInfoHTC {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub baseSpace: XrSpace,
    pub time: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrBodyJointsLocateInfoHTC"]
        [::std::mem::size_of::<XrBodyJointsLocateInfoHTC>() - 32usize];
    ["Alignment of XrBodyJointsLocateInfoHTC"]
        [::std::mem::align_of::<XrBodyJointsLocateInfoHTC>() - 8usize];
    ["Offset of field: XrBodyJointsLocateInfoHTC::type_"]
        [::std::mem::offset_of!(XrBodyJointsLocateInfoHTC, type_) - 0usize];
    ["Offset of field: XrBodyJointsLocateInfoHTC::next"]
        [::std::mem::offset_of!(XrBodyJointsLocateInfoHTC, next) - 8usize];
    ["Offset of field: XrBodyJointsLocateInfoHTC::baseSpace"]
        [::std::mem::offset_of!(XrBodyJointsLocateInfoHTC, baseSpace) - 16usize];
    ["Offset of field: XrBodyJointsLocateInfoHTC::time"]
        [::std::mem::offset_of!(XrBodyJointsLocateInfoHTC, time) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBodyJointLocationHTC {
    pub locationFlags: XrSpaceLocationFlags,
    pub pose: XrPosef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrBodyJointLocationHTC"][::std::mem::size_of::<XrBodyJointLocationHTC>() - 40usize];
    ["Alignment of XrBodyJointLocationHTC"]
        [::std::mem::align_of::<XrBodyJointLocationHTC>() - 8usize];
    ["Offset of field: XrBodyJointLocationHTC::locationFlags"]
        [::std::mem::offset_of!(XrBodyJointLocationHTC, locationFlags) - 0usize];
    ["Offset of field: XrBodyJointLocationHTC::pose"]
        [::std::mem::offset_of!(XrBodyJointLocationHTC, pose) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBodyJointLocationsHTC {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub combinedLocationFlags: XrSpaceLocationFlags,
    pub confidenceLevel: XrBodyJointConfidenceHTC,
    pub jointLocationCount: u32,
    pub jointLocations: *mut XrBodyJointLocationHTC,
    pub skeletonGenerationId: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrBodyJointLocationsHTC"][::std::mem::size_of::<XrBodyJointLocationsHTC>() - 48usize];
    ["Alignment of XrBodyJointLocationsHTC"]
        [::std::mem::align_of::<XrBodyJointLocationsHTC>() - 8usize];
    ["Offset of field: XrBodyJointLocationsHTC::type_"]
        [::std::mem::offset_of!(XrBodyJointLocationsHTC, type_) - 0usize];
    ["Offset of field: XrBodyJointLocationsHTC::next"]
        [::std::mem::offset_of!(XrBodyJointLocationsHTC, next) - 8usize];
    ["Offset of field: XrBodyJointLocationsHTC::combinedLocationFlags"]
        [::std::mem::offset_of!(XrBodyJointLocationsHTC, combinedLocationFlags) - 16usize];
    ["Offset of field: XrBodyJointLocationsHTC::confidenceLevel"]
        [::std::mem::offset_of!(XrBodyJointLocationsHTC, confidenceLevel) - 24usize];
    ["Offset of field: XrBodyJointLocationsHTC::jointLocationCount"]
        [::std::mem::offset_of!(XrBodyJointLocationsHTC, jointLocationCount) - 28usize];
    ["Offset of field: XrBodyJointLocationsHTC::jointLocations"]
        [::std::mem::offset_of!(XrBodyJointLocationsHTC, jointLocations) - 32usize];
    ["Offset of field: XrBodyJointLocationsHTC::skeletonGenerationId"]
        [::std::mem::offset_of!(XrBodyJointLocationsHTC, skeletonGenerationId) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBodySkeletonJointHTC {
    pub pose: XrPosef,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrBodySkeletonJointHTC"][::std::mem::size_of::<XrBodySkeletonJointHTC>() - 28usize];
    ["Alignment of XrBodySkeletonJointHTC"]
        [::std::mem::align_of::<XrBodySkeletonJointHTC>() - 4usize];
    ["Offset of field: XrBodySkeletonJointHTC::pose"]
        [::std::mem::offset_of!(XrBodySkeletonJointHTC, pose) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrBodySkeletonHTC {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub jointCount: u32,
    pub joints: *mut XrBodySkeletonJointHTC,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrBodySkeletonHTC"][::std::mem::size_of::<XrBodySkeletonHTC>() - 32usize];
    ["Alignment of XrBodySkeletonHTC"][::std::mem::align_of::<XrBodySkeletonHTC>() - 8usize];
    ["Offset of field: XrBodySkeletonHTC::type_"]
        [::std::mem::offset_of!(XrBodySkeletonHTC, type_) - 0usize];
    ["Offset of field: XrBodySkeletonHTC::next"]
        [::std::mem::offset_of!(XrBodySkeletonHTC, next) - 8usize];
    ["Offset of field: XrBodySkeletonHTC::jointCount"]
        [::std::mem::offset_of!(XrBodySkeletonHTC, jointCount) - 16usize];
    ["Offset of field: XrBodySkeletonHTC::joints"]
        [::std::mem::offset_of!(XrBodySkeletonHTC, joints) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActiveActionSetPriorityEXT {
    pub actionSet: XrActionSet,
    pub priorityOverride: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrActiveActionSetPriorityEXT"]
        [::std::mem::size_of::<XrActiveActionSetPriorityEXT>() - 16usize];
    ["Alignment of XrActiveActionSetPriorityEXT"]
        [::std::mem::align_of::<XrActiveActionSetPriorityEXT>() - 8usize];
    ["Offset of field: XrActiveActionSetPriorityEXT::actionSet"]
        [::std::mem::offset_of!(XrActiveActionSetPriorityEXT, actionSet) - 0usize];
    ["Offset of field: XrActiveActionSetPriorityEXT::priorityOverride"]
        [::std::mem::offset_of!(XrActiveActionSetPriorityEXT, priorityOverride) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrActiveActionSetPrioritiesEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub actionSetPriorityCount: u32,
    pub actionSetPriorities: *const XrActiveActionSetPriorityEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrActiveActionSetPrioritiesEXT"]
        [::std::mem::size_of::<XrActiveActionSetPrioritiesEXT>() - 32usize];
    ["Alignment of XrActiveActionSetPrioritiesEXT"]
        [::std::mem::align_of::<XrActiveActionSetPrioritiesEXT>() - 8usize];
    ["Offset of field: XrActiveActionSetPrioritiesEXT::type_"]
        [::std::mem::offset_of!(XrActiveActionSetPrioritiesEXT, type_) - 0usize];
    ["Offset of field: XrActiveActionSetPrioritiesEXT::next"]
        [::std::mem::offset_of!(XrActiveActionSetPrioritiesEXT, next) - 8usize];
    ["Offset of field: XrActiveActionSetPrioritiesEXT::actionSetPriorityCount"]
        [::std::mem::offset_of!(XrActiveActionSetPrioritiesEXT, actionSetPriorityCount) - 16usize];
    ["Offset of field: XrActiveActionSetPrioritiesEXT::actionSetPriorities"]
        [::std::mem::offset_of!(XrActiveActionSetPrioritiesEXT, actionSetPriorities) - 24usize];
};
pub const XrForceFeedbackCurlLocationMNDX_XR_FORCE_FEEDBACK_CURL_LOCATION_THUMB_CURL_MNDX:
    XrForceFeedbackCurlLocationMNDX = 0;
pub const XrForceFeedbackCurlLocationMNDX_XR_FORCE_FEEDBACK_CURL_LOCATION_INDEX_CURL_MNDX:
    XrForceFeedbackCurlLocationMNDX = 1;
pub const XrForceFeedbackCurlLocationMNDX_XR_FORCE_FEEDBACK_CURL_LOCATION_MIDDLE_CURL_MNDX:
    XrForceFeedbackCurlLocationMNDX = 2;
pub const XrForceFeedbackCurlLocationMNDX_XR_FORCE_FEEDBACK_CURL_LOCATION_RING_CURL_MNDX:
    XrForceFeedbackCurlLocationMNDX = 3;
pub const XrForceFeedbackCurlLocationMNDX_XR_FORCE_FEEDBACK_CURL_LOCATION_LITTLE_CURL_MNDX:
    XrForceFeedbackCurlLocationMNDX = 4;
pub const XrForceFeedbackCurlLocationMNDX_XR_FORCE_FEEDBACK_CURL_LOCATION_MAX_ENUM_MNDX:
    XrForceFeedbackCurlLocationMNDX = 2147483647;
pub type XrForceFeedbackCurlLocationMNDX = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemForceFeedbackCurlPropertiesMNDX {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsForceFeedbackCurl: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemForceFeedbackCurlPropertiesMNDX"]
        [::std::mem::size_of::<XrSystemForceFeedbackCurlPropertiesMNDX>() - 24usize];
    ["Alignment of XrSystemForceFeedbackCurlPropertiesMNDX"]
        [::std::mem::align_of::<XrSystemForceFeedbackCurlPropertiesMNDX>() - 8usize];
    ["Offset of field: XrSystemForceFeedbackCurlPropertiesMNDX::type_"]
        [::std::mem::offset_of!(XrSystemForceFeedbackCurlPropertiesMNDX, type_) - 0usize];
    ["Offset of field: XrSystemForceFeedbackCurlPropertiesMNDX::next"]
        [::std::mem::offset_of!(XrSystemForceFeedbackCurlPropertiesMNDX, next) - 8usize];
    ["Offset of field: XrSystemForceFeedbackCurlPropertiesMNDX::supportsForceFeedbackCurl"][::std::mem::offset_of!(
        XrSystemForceFeedbackCurlPropertiesMNDX,
        supportsForceFeedbackCurl
    )
        - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrForceFeedbackCurlApplyLocationMNDX {
    pub location: XrForceFeedbackCurlLocationMNDX,
    pub value: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrForceFeedbackCurlApplyLocationMNDX"]
        [::std::mem::size_of::<XrForceFeedbackCurlApplyLocationMNDX>() - 8usize];
    ["Alignment of XrForceFeedbackCurlApplyLocationMNDX"]
        [::std::mem::align_of::<XrForceFeedbackCurlApplyLocationMNDX>() - 4usize];
    ["Offset of field: XrForceFeedbackCurlApplyLocationMNDX::location"]
        [::std::mem::offset_of!(XrForceFeedbackCurlApplyLocationMNDX, location) - 0usize];
    ["Offset of field: XrForceFeedbackCurlApplyLocationMNDX::value"]
        [::std::mem::offset_of!(XrForceFeedbackCurlApplyLocationMNDX, value) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrForceFeedbackCurlApplyLocationsMNDX {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub locationCount: u32,
    pub locations: *mut XrForceFeedbackCurlApplyLocationMNDX,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrForceFeedbackCurlApplyLocationsMNDX"]
        [::std::mem::size_of::<XrForceFeedbackCurlApplyLocationsMNDX>() - 32usize];
    ["Alignment of XrForceFeedbackCurlApplyLocationsMNDX"]
        [::std::mem::align_of::<XrForceFeedbackCurlApplyLocationsMNDX>() - 8usize];
    ["Offset of field: XrForceFeedbackCurlApplyLocationsMNDX::type_"]
        [::std::mem::offset_of!(XrForceFeedbackCurlApplyLocationsMNDX, type_) - 0usize];
    ["Offset of field: XrForceFeedbackCurlApplyLocationsMNDX::next"]
        [::std::mem::offset_of!(XrForceFeedbackCurlApplyLocationsMNDX, next) - 8usize];
    ["Offset of field: XrForceFeedbackCurlApplyLocationsMNDX::locationCount"]
        [::std::mem::offset_of!(XrForceFeedbackCurlApplyLocationsMNDX, locationCount) - 16usize];
    ["Offset of field: XrForceFeedbackCurlApplyLocationsMNDX::locations"]
        [::std::mem::offset_of!(XrForceFeedbackCurlApplyLocationsMNDX, locations) - 24usize];
};
pub const XrHandTrackingDataSourceEXT_XR_HAND_TRACKING_DATA_SOURCE_UNOBSTRUCTED_EXT:
    XrHandTrackingDataSourceEXT = 1;
pub const XrHandTrackingDataSourceEXT_XR_HAND_TRACKING_DATA_SOURCE_CONTROLLER_EXT:
    XrHandTrackingDataSourceEXT = 2;
pub const XrHandTrackingDataSourceEXT_XR_HAND_TRACKING_DATA_SOURCE_MAX_ENUM_EXT:
    XrHandTrackingDataSourceEXT = 2147483647;
pub type XrHandTrackingDataSourceEXT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandTrackingDataSourceInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestedDataSourceCount: u32,
    pub requestedDataSources: *mut XrHandTrackingDataSourceEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHandTrackingDataSourceInfoEXT"]
        [::std::mem::size_of::<XrHandTrackingDataSourceInfoEXT>() - 32usize];
    ["Alignment of XrHandTrackingDataSourceInfoEXT"]
        [::std::mem::align_of::<XrHandTrackingDataSourceInfoEXT>() - 8usize];
    ["Offset of field: XrHandTrackingDataSourceInfoEXT::type_"]
        [::std::mem::offset_of!(XrHandTrackingDataSourceInfoEXT, type_) - 0usize];
    ["Offset of field: XrHandTrackingDataSourceInfoEXT::next"]
        [::std::mem::offset_of!(XrHandTrackingDataSourceInfoEXT, next) - 8usize];
    ["Offset of field: XrHandTrackingDataSourceInfoEXT::requestedDataSourceCount"][::std::mem::offset_of!(
        XrHandTrackingDataSourceInfoEXT,
        requestedDataSourceCount
    ) - 16usize];
    ["Offset of field: XrHandTrackingDataSourceInfoEXT::requestedDataSources"]
        [::std::mem::offset_of!(XrHandTrackingDataSourceInfoEXT, requestedDataSources) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrHandTrackingDataSourceStateEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub isActive: XrBool32,
    pub dataSource: XrHandTrackingDataSourceEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrHandTrackingDataSourceStateEXT"]
        [::std::mem::size_of::<XrHandTrackingDataSourceStateEXT>() - 24usize];
    ["Alignment of XrHandTrackingDataSourceStateEXT"]
        [::std::mem::align_of::<XrHandTrackingDataSourceStateEXT>() - 8usize];
    ["Offset of field: XrHandTrackingDataSourceStateEXT::type_"]
        [::std::mem::offset_of!(XrHandTrackingDataSourceStateEXT, type_) - 0usize];
    ["Offset of field: XrHandTrackingDataSourceStateEXT::next"]
        [::std::mem::offset_of!(XrHandTrackingDataSourceStateEXT, next) - 8usize];
    ["Offset of field: XrHandTrackingDataSourceStateEXT::isActive"]
        [::std::mem::offset_of!(XrHandTrackingDataSourceStateEXT, isActive) - 16usize];
    ["Offset of field: XrHandTrackingDataSourceStateEXT::dataSource"]
        [::std::mem::offset_of!(XrHandTrackingDataSourceStateEXT, dataSource) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPlaneDetectorEXT_T {
    _unused: [u8; 0],
}
pub type XrPlaneDetectorEXT = *mut XrPlaneDetectorEXT_T;
pub const XrPlaneDetectorOrientationEXT_XR_PLANE_DETECTOR_ORIENTATION_HORIZONTAL_UPWARD_EXT:
    XrPlaneDetectorOrientationEXT = 0;
pub const XrPlaneDetectorOrientationEXT_XR_PLANE_DETECTOR_ORIENTATION_HORIZONTAL_DOWNWARD_EXT:
    XrPlaneDetectorOrientationEXT = 1;
pub const XrPlaneDetectorOrientationEXT_XR_PLANE_DETECTOR_ORIENTATION_VERTICAL_EXT:
    XrPlaneDetectorOrientationEXT = 2;
pub const XrPlaneDetectorOrientationEXT_XR_PLANE_DETECTOR_ORIENTATION_ARBITRARY_EXT:
    XrPlaneDetectorOrientationEXT = 3;
pub const XrPlaneDetectorOrientationEXT_XR_PLANE_DETECTOR_ORIENTATION_MAX_ENUM_EXT:
    XrPlaneDetectorOrientationEXT = 2147483647;
pub type XrPlaneDetectorOrientationEXT = ::std::os::raw::c_uint;
pub const XrPlaneDetectorSemanticTypeEXT_XR_PLANE_DETECTOR_SEMANTIC_TYPE_UNDEFINED_EXT:
    XrPlaneDetectorSemanticTypeEXT = 0;
pub const XrPlaneDetectorSemanticTypeEXT_XR_PLANE_DETECTOR_SEMANTIC_TYPE_CEILING_EXT:
    XrPlaneDetectorSemanticTypeEXT = 1;
pub const XrPlaneDetectorSemanticTypeEXT_XR_PLANE_DETECTOR_SEMANTIC_TYPE_FLOOR_EXT:
    XrPlaneDetectorSemanticTypeEXT = 2;
pub const XrPlaneDetectorSemanticTypeEXT_XR_PLANE_DETECTOR_SEMANTIC_TYPE_WALL_EXT:
    XrPlaneDetectorSemanticTypeEXT = 3;
pub const XrPlaneDetectorSemanticTypeEXT_XR_PLANE_DETECTOR_SEMANTIC_TYPE_PLATFORM_EXT:
    XrPlaneDetectorSemanticTypeEXT = 4;
pub const XrPlaneDetectorSemanticTypeEXT_XR_PLANE_DETECTOR_SEMANTIC_TYPE_MAX_ENUM_EXT:
    XrPlaneDetectorSemanticTypeEXT = 2147483647;
pub type XrPlaneDetectorSemanticTypeEXT = ::std::os::raw::c_uint;
pub const XrPlaneDetectionStateEXT_XR_PLANE_DETECTION_STATE_NONE_EXT: XrPlaneDetectionStateEXT = 0;
pub const XrPlaneDetectionStateEXT_XR_PLANE_DETECTION_STATE_PENDING_EXT: XrPlaneDetectionStateEXT =
    1;
pub const XrPlaneDetectionStateEXT_XR_PLANE_DETECTION_STATE_DONE_EXT: XrPlaneDetectionStateEXT = 2;
pub const XrPlaneDetectionStateEXT_XR_PLANE_DETECTION_STATE_ERROR_EXT: XrPlaneDetectionStateEXT = 3;
pub const XrPlaneDetectionStateEXT_XR_PLANE_DETECTION_STATE_FATAL_EXT: XrPlaneDetectionStateEXT = 4;
pub const XrPlaneDetectionStateEXT_XR_PLANE_DETECTION_STATE_MAX_ENUM_EXT: XrPlaneDetectionStateEXT =
    2147483647;
pub type XrPlaneDetectionStateEXT = ::std::os::raw::c_uint;
pub type XrPlaneDetectionCapabilityFlagsEXT = XrFlags64;
pub const XR_PLANE_DETECTION_CAPABILITY_PLANE_DETECTION_BIT_EXT:
    XrPlaneDetectionCapabilityFlagsEXT = 1;
pub const XR_PLANE_DETECTION_CAPABILITY_PLANE_HOLES_BIT_EXT: XrPlaneDetectionCapabilityFlagsEXT = 2;
pub const XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_CEILING_BIT_EXT:
    XrPlaneDetectionCapabilityFlagsEXT = 4;
pub const XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_FLOOR_BIT_EXT: XrPlaneDetectionCapabilityFlagsEXT =
    8;
pub const XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_WALL_BIT_EXT: XrPlaneDetectionCapabilityFlagsEXT =
    16;
pub const XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_PLATFORM_BIT_EXT:
    XrPlaneDetectionCapabilityFlagsEXT = 32;
pub const XR_PLANE_DETECTION_CAPABILITY_ORIENTATION_BIT_EXT: XrPlaneDetectionCapabilityFlagsEXT =
    64;
pub type XrPlaneDetectorFlagsEXT = XrFlags64;
pub const XR_PLANE_DETECTOR_ENABLE_CONTOUR_BIT_EXT: XrPlaneDetectorFlagsEXT = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemPlaneDetectionPropertiesEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportedFeatures: XrPlaneDetectionCapabilityFlagsEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemPlaneDetectionPropertiesEXT"]
        [::std::mem::size_of::<XrSystemPlaneDetectionPropertiesEXT>() - 24usize];
    ["Alignment of XrSystemPlaneDetectionPropertiesEXT"]
        [::std::mem::align_of::<XrSystemPlaneDetectionPropertiesEXT>() - 8usize];
    ["Offset of field: XrSystemPlaneDetectionPropertiesEXT::type_"]
        [::std::mem::offset_of!(XrSystemPlaneDetectionPropertiesEXT, type_) - 0usize];
    ["Offset of field: XrSystemPlaneDetectionPropertiesEXT::next"]
        [::std::mem::offset_of!(XrSystemPlaneDetectionPropertiesEXT, next) - 8usize];
    ["Offset of field: XrSystemPlaneDetectionPropertiesEXT::supportedFeatures"]
        [::std::mem::offset_of!(XrSystemPlaneDetectionPropertiesEXT, supportedFeatures) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPlaneDetectorCreateInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub flags: XrPlaneDetectorFlagsEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPlaneDetectorCreateInfoEXT"]
        [::std::mem::size_of::<XrPlaneDetectorCreateInfoEXT>() - 24usize];
    ["Alignment of XrPlaneDetectorCreateInfoEXT"]
        [::std::mem::align_of::<XrPlaneDetectorCreateInfoEXT>() - 8usize];
    ["Offset of field: XrPlaneDetectorCreateInfoEXT::type_"]
        [::std::mem::offset_of!(XrPlaneDetectorCreateInfoEXT, type_) - 0usize];
    ["Offset of field: XrPlaneDetectorCreateInfoEXT::next"]
        [::std::mem::offset_of!(XrPlaneDetectorCreateInfoEXT, next) - 8usize];
    ["Offset of field: XrPlaneDetectorCreateInfoEXT::flags"]
        [::std::mem::offset_of!(XrPlaneDetectorCreateInfoEXT, flags) - 16usize];
};
pub type XrExtent3DfEXT = XrExtent3Df;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPlaneDetectorBeginInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub baseSpace: XrSpace,
    pub time: XrTime,
    pub orientationCount: u32,
    pub orientations: *const XrPlaneDetectorOrientationEXT,
    pub semanticTypeCount: u32,
    pub semanticTypes: *const XrPlaneDetectorSemanticTypeEXT,
    pub maxPlanes: u32,
    pub minArea: f32,
    pub boundingBoxPose: XrPosef,
    pub boundingBoxExtent: XrExtent3DfEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPlaneDetectorBeginInfoEXT"]
        [::std::mem::size_of::<XrPlaneDetectorBeginInfoEXT>() - 112usize];
    ["Alignment of XrPlaneDetectorBeginInfoEXT"]
        [::std::mem::align_of::<XrPlaneDetectorBeginInfoEXT>() - 8usize];
    ["Offset of field: XrPlaneDetectorBeginInfoEXT::type_"]
        [::std::mem::offset_of!(XrPlaneDetectorBeginInfoEXT, type_) - 0usize];
    ["Offset of field: XrPlaneDetectorBeginInfoEXT::next"]
        [::std::mem::offset_of!(XrPlaneDetectorBeginInfoEXT, next) - 8usize];
    ["Offset of field: XrPlaneDetectorBeginInfoEXT::baseSpace"]
        [::std::mem::offset_of!(XrPlaneDetectorBeginInfoEXT, baseSpace) - 16usize];
    ["Offset of field: XrPlaneDetectorBeginInfoEXT::time"]
        [::std::mem::offset_of!(XrPlaneDetectorBeginInfoEXT, time) - 24usize];
    ["Offset of field: XrPlaneDetectorBeginInfoEXT::orientationCount"]
        [::std::mem::offset_of!(XrPlaneDetectorBeginInfoEXT, orientationCount) - 32usize];
    ["Offset of field: XrPlaneDetectorBeginInfoEXT::orientations"]
        [::std::mem::offset_of!(XrPlaneDetectorBeginInfoEXT, orientations) - 40usize];
    ["Offset of field: XrPlaneDetectorBeginInfoEXT::semanticTypeCount"]
        [::std::mem::offset_of!(XrPlaneDetectorBeginInfoEXT, semanticTypeCount) - 48usize];
    ["Offset of field: XrPlaneDetectorBeginInfoEXT::semanticTypes"]
        [::std::mem::offset_of!(XrPlaneDetectorBeginInfoEXT, semanticTypes) - 56usize];
    ["Offset of field: XrPlaneDetectorBeginInfoEXT::maxPlanes"]
        [::std::mem::offset_of!(XrPlaneDetectorBeginInfoEXT, maxPlanes) - 64usize];
    ["Offset of field: XrPlaneDetectorBeginInfoEXT::minArea"]
        [::std::mem::offset_of!(XrPlaneDetectorBeginInfoEXT, minArea) - 68usize];
    ["Offset of field: XrPlaneDetectorBeginInfoEXT::boundingBoxPose"]
        [::std::mem::offset_of!(XrPlaneDetectorBeginInfoEXT, boundingBoxPose) - 72usize];
    ["Offset of field: XrPlaneDetectorBeginInfoEXT::boundingBoxExtent"]
        [::std::mem::offset_of!(XrPlaneDetectorBeginInfoEXT, boundingBoxExtent) - 100usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPlaneDetectorGetInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub baseSpace: XrSpace,
    pub time: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPlaneDetectorGetInfoEXT"]
        [::std::mem::size_of::<XrPlaneDetectorGetInfoEXT>() - 32usize];
    ["Alignment of XrPlaneDetectorGetInfoEXT"]
        [::std::mem::align_of::<XrPlaneDetectorGetInfoEXT>() - 8usize];
    ["Offset of field: XrPlaneDetectorGetInfoEXT::type_"]
        [::std::mem::offset_of!(XrPlaneDetectorGetInfoEXT, type_) - 0usize];
    ["Offset of field: XrPlaneDetectorGetInfoEXT::next"]
        [::std::mem::offset_of!(XrPlaneDetectorGetInfoEXT, next) - 8usize];
    ["Offset of field: XrPlaneDetectorGetInfoEXT::baseSpace"]
        [::std::mem::offset_of!(XrPlaneDetectorGetInfoEXT, baseSpace) - 16usize];
    ["Offset of field: XrPlaneDetectorGetInfoEXT::time"]
        [::std::mem::offset_of!(XrPlaneDetectorGetInfoEXT, time) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPlaneDetectorLocationEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub planeId: u64,
    pub locationFlags: XrSpaceLocationFlags,
    pub pose: XrPosef,
    pub extents: XrExtent2Df,
    pub orientation: XrPlaneDetectorOrientationEXT,
    pub semanticType: XrPlaneDetectorSemanticTypeEXT,
    pub polygonBufferCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPlaneDetectorLocationEXT"]
        [::std::mem::size_of::<XrPlaneDetectorLocationEXT>() - 80usize];
    ["Alignment of XrPlaneDetectorLocationEXT"]
        [::std::mem::align_of::<XrPlaneDetectorLocationEXT>() - 8usize];
    ["Offset of field: XrPlaneDetectorLocationEXT::type_"]
        [::std::mem::offset_of!(XrPlaneDetectorLocationEXT, type_) - 0usize];
    ["Offset of field: XrPlaneDetectorLocationEXT::next"]
        [::std::mem::offset_of!(XrPlaneDetectorLocationEXT, next) - 8usize];
    ["Offset of field: XrPlaneDetectorLocationEXT::planeId"]
        [::std::mem::offset_of!(XrPlaneDetectorLocationEXT, planeId) - 16usize];
    ["Offset of field: XrPlaneDetectorLocationEXT::locationFlags"]
        [::std::mem::offset_of!(XrPlaneDetectorLocationEXT, locationFlags) - 24usize];
    ["Offset of field: XrPlaneDetectorLocationEXT::pose"]
        [::std::mem::offset_of!(XrPlaneDetectorLocationEXT, pose) - 32usize];
    ["Offset of field: XrPlaneDetectorLocationEXT::extents"]
        [::std::mem::offset_of!(XrPlaneDetectorLocationEXT, extents) - 60usize];
    ["Offset of field: XrPlaneDetectorLocationEXT::orientation"]
        [::std::mem::offset_of!(XrPlaneDetectorLocationEXT, orientation) - 68usize];
    ["Offset of field: XrPlaneDetectorLocationEXT::semanticType"]
        [::std::mem::offset_of!(XrPlaneDetectorLocationEXT, semanticType) - 72usize];
    ["Offset of field: XrPlaneDetectorLocationEXT::polygonBufferCount"]
        [::std::mem::offset_of!(XrPlaneDetectorLocationEXT, polygonBufferCount) - 76usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPlaneDetectorLocationsEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub planeLocationCapacityInput: u32,
    pub planeLocationCountOutput: u32,
    pub planeLocations: *mut XrPlaneDetectorLocationEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPlaneDetectorLocationsEXT"]
        [::std::mem::size_of::<XrPlaneDetectorLocationsEXT>() - 32usize];
    ["Alignment of XrPlaneDetectorLocationsEXT"]
        [::std::mem::align_of::<XrPlaneDetectorLocationsEXT>() - 8usize];
    ["Offset of field: XrPlaneDetectorLocationsEXT::type_"]
        [::std::mem::offset_of!(XrPlaneDetectorLocationsEXT, type_) - 0usize];
    ["Offset of field: XrPlaneDetectorLocationsEXT::next"]
        [::std::mem::offset_of!(XrPlaneDetectorLocationsEXT, next) - 8usize];
    ["Offset of field: XrPlaneDetectorLocationsEXT::planeLocationCapacityInput"]
        [::std::mem::offset_of!(XrPlaneDetectorLocationsEXT, planeLocationCapacityInput) - 16usize];
    ["Offset of field: XrPlaneDetectorLocationsEXT::planeLocationCountOutput"]
        [::std::mem::offset_of!(XrPlaneDetectorLocationsEXT, planeLocationCountOutput) - 20usize];
    ["Offset of field: XrPlaneDetectorLocationsEXT::planeLocations"]
        [::std::mem::offset_of!(XrPlaneDetectorLocationsEXT, planeLocations) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrPlaneDetectorPolygonBufferEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub vertexCapacityInput: u32,
    pub vertexCountOutput: u32,
    pub vertices: *mut XrVector2f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrPlaneDetectorPolygonBufferEXT"]
        [::std::mem::size_of::<XrPlaneDetectorPolygonBufferEXT>() - 32usize];
    ["Alignment of XrPlaneDetectorPolygonBufferEXT"]
        [::std::mem::align_of::<XrPlaneDetectorPolygonBufferEXT>() - 8usize];
    ["Offset of field: XrPlaneDetectorPolygonBufferEXT::type_"]
        [::std::mem::offset_of!(XrPlaneDetectorPolygonBufferEXT, type_) - 0usize];
    ["Offset of field: XrPlaneDetectorPolygonBufferEXT::next"]
        [::std::mem::offset_of!(XrPlaneDetectorPolygonBufferEXT, next) - 8usize];
    ["Offset of field: XrPlaneDetectorPolygonBufferEXT::vertexCapacityInput"]
        [::std::mem::offset_of!(XrPlaneDetectorPolygonBufferEXT, vertexCapacityInput) - 16usize];
    ["Offset of field: XrPlaneDetectorPolygonBufferEXT::vertexCountOutput"]
        [::std::mem::offset_of!(XrPlaneDetectorPolygonBufferEXT, vertexCountOutput) - 20usize];
    ["Offset of field: XrPlaneDetectorPolygonBufferEXT::vertices"]
        [::std::mem::offset_of!(XrPlaneDetectorPolygonBufferEXT, vertices) - 24usize];
};
pub const XrFutureStateEXT_XR_FUTURE_STATE_PENDING_EXT: XrFutureStateEXT = 1;
pub const XrFutureStateEXT_XR_FUTURE_STATE_READY_EXT: XrFutureStateEXT = 2;
pub const XrFutureStateEXT_XR_FUTURE_STATE_MAX_ENUM_EXT: XrFutureStateEXT = 2147483647;
pub type XrFutureStateEXT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFutureCancelInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub future: XrFutureEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFutureCancelInfoEXT"][::std::mem::size_of::<XrFutureCancelInfoEXT>() - 24usize];
    ["Alignment of XrFutureCancelInfoEXT"]
        [::std::mem::align_of::<XrFutureCancelInfoEXT>() - 8usize];
    ["Offset of field: XrFutureCancelInfoEXT::type_"]
        [::std::mem::offset_of!(XrFutureCancelInfoEXT, type_) - 0usize];
    ["Offset of field: XrFutureCancelInfoEXT::next"]
        [::std::mem::offset_of!(XrFutureCancelInfoEXT, next) - 8usize];
    ["Offset of field: XrFutureCancelInfoEXT::future"]
        [::std::mem::offset_of!(XrFutureCancelInfoEXT, future) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFuturePollInfoEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub future: XrFutureEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFuturePollInfoEXT"][::std::mem::size_of::<XrFuturePollInfoEXT>() - 24usize];
    ["Alignment of XrFuturePollInfoEXT"][::std::mem::align_of::<XrFuturePollInfoEXT>() - 8usize];
    ["Offset of field: XrFuturePollInfoEXT::type_"]
        [::std::mem::offset_of!(XrFuturePollInfoEXT, type_) - 0usize];
    ["Offset of field: XrFuturePollInfoEXT::next"]
        [::std::mem::offset_of!(XrFuturePollInfoEXT, next) - 8usize];
    ["Offset of field: XrFuturePollInfoEXT::future"]
        [::std::mem::offset_of!(XrFuturePollInfoEXT, future) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFutureCompletionBaseHeaderEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub futureResult: XrResult,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFutureCompletionBaseHeaderEXT"]
        [::std::mem::size_of::<XrFutureCompletionBaseHeaderEXT>() - 24usize];
    ["Alignment of XrFutureCompletionBaseHeaderEXT"]
        [::std::mem::align_of::<XrFutureCompletionBaseHeaderEXT>() - 8usize];
    ["Offset of field: XrFutureCompletionBaseHeaderEXT::type_"]
        [::std::mem::offset_of!(XrFutureCompletionBaseHeaderEXT, type_) - 0usize];
    ["Offset of field: XrFutureCompletionBaseHeaderEXT::next"]
        [::std::mem::offset_of!(XrFutureCompletionBaseHeaderEXT, next) - 8usize];
    ["Offset of field: XrFutureCompletionBaseHeaderEXT::futureResult"]
        [::std::mem::offset_of!(XrFutureCompletionBaseHeaderEXT, futureResult) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFutureCompletionEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub futureResult: XrResult,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFutureCompletionEXT"][::std::mem::size_of::<XrFutureCompletionEXT>() - 24usize];
    ["Alignment of XrFutureCompletionEXT"]
        [::std::mem::align_of::<XrFutureCompletionEXT>() - 8usize];
    ["Offset of field: XrFutureCompletionEXT::type_"]
        [::std::mem::offset_of!(XrFutureCompletionEXT, type_) - 0usize];
    ["Offset of field: XrFutureCompletionEXT::next"]
        [::std::mem::offset_of!(XrFutureCompletionEXT, next) - 8usize];
    ["Offset of field: XrFutureCompletionEXT::futureResult"]
        [::std::mem::offset_of!(XrFutureCompletionEXT, futureResult) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFuturePollResultEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub state: XrFutureStateEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFuturePollResultEXT"][::std::mem::size_of::<XrFuturePollResultEXT>() - 24usize];
    ["Alignment of XrFuturePollResultEXT"]
        [::std::mem::align_of::<XrFuturePollResultEXT>() - 8usize];
    ["Offset of field: XrFuturePollResultEXT::type_"]
        [::std::mem::offset_of!(XrFuturePollResultEXT, type_) - 0usize];
    ["Offset of field: XrFuturePollResultEXT::next"]
        [::std::mem::offset_of!(XrFuturePollResultEXT, next) - 8usize];
    ["Offset of field: XrFuturePollResultEXT::state"]
        [::std::mem::offset_of!(XrFuturePollResultEXT, state) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataUserPresenceChangedEXT {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub session: XrSession,
    pub isUserPresent: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataUserPresenceChangedEXT"]
        [::std::mem::size_of::<XrEventDataUserPresenceChangedEXT>() - 32usize];
    ["Alignment of XrEventDataUserPresenceChangedEXT"]
        [::std::mem::align_of::<XrEventDataUserPresenceChangedEXT>() - 8usize];
    ["Offset of field: XrEventDataUserPresenceChangedEXT::type_"]
        [::std::mem::offset_of!(XrEventDataUserPresenceChangedEXT, type_) - 0usize];
    ["Offset of field: XrEventDataUserPresenceChangedEXT::next"]
        [::std::mem::offset_of!(XrEventDataUserPresenceChangedEXT, next) - 8usize];
    ["Offset of field: XrEventDataUserPresenceChangedEXT::session"]
        [::std::mem::offset_of!(XrEventDataUserPresenceChangedEXT, session) - 16usize];
    ["Offset of field: XrEventDataUserPresenceChangedEXT::isUserPresent"]
        [::std::mem::offset_of!(XrEventDataUserPresenceChangedEXT, isUserPresent) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemUserPresencePropertiesEXT {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsUserPresence: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemUserPresencePropertiesEXT"]
        [::std::mem::size_of::<XrSystemUserPresencePropertiesEXT>() - 24usize];
    ["Alignment of XrSystemUserPresencePropertiesEXT"]
        [::std::mem::align_of::<XrSystemUserPresencePropertiesEXT>() - 8usize];
    ["Offset of field: XrSystemUserPresencePropertiesEXT::type_"]
        [::std::mem::offset_of!(XrSystemUserPresencePropertiesEXT, type_) - 0usize];
    ["Offset of field: XrSystemUserPresencePropertiesEXT::next"]
        [::std::mem::offset_of!(XrSystemUserPresencePropertiesEXT, next) - 8usize];
    ["Offset of field: XrSystemUserPresencePropertiesEXT::supportsUserPresence"]
        [::std::mem::offset_of!(XrSystemUserPresencePropertiesEXT, supportsUserPresence) - 16usize];
};
pub const XrHeadsetFitStatusML_XR_HEADSET_FIT_STATUS_UNKNOWN_ML: XrHeadsetFitStatusML = 0;
pub const XrHeadsetFitStatusML_XR_HEADSET_FIT_STATUS_NOT_WORN_ML: XrHeadsetFitStatusML = 1;
pub const XrHeadsetFitStatusML_XR_HEADSET_FIT_STATUS_GOOD_FIT_ML: XrHeadsetFitStatusML = 2;
pub const XrHeadsetFitStatusML_XR_HEADSET_FIT_STATUS_BAD_FIT_ML: XrHeadsetFitStatusML = 3;
pub const XrHeadsetFitStatusML_XR_HEADSET_FIT_STATUS_MAX_ENUM_ML: XrHeadsetFitStatusML = 2147483647;
pub type XrHeadsetFitStatusML = ::std::os::raw::c_uint;
pub const XrEyeCalibrationStatusML_XR_EYE_CALIBRATION_STATUS_UNKNOWN_ML: XrEyeCalibrationStatusML =
    0;
pub const XrEyeCalibrationStatusML_XR_EYE_CALIBRATION_STATUS_NONE_ML: XrEyeCalibrationStatusML = 1;
pub const XrEyeCalibrationStatusML_XR_EYE_CALIBRATION_STATUS_COARSE_ML: XrEyeCalibrationStatusML =
    2;
pub const XrEyeCalibrationStatusML_XR_EYE_CALIBRATION_STATUS_FINE_ML: XrEyeCalibrationStatusML = 3;
pub const XrEyeCalibrationStatusML_XR_EYE_CALIBRATION_STATUS_MAX_ENUM_ML: XrEyeCalibrationStatusML =
    2147483647;
pub type XrEyeCalibrationStatusML = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataHeadsetFitChangedML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub status: XrHeadsetFitStatusML,
    pub time: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataHeadsetFitChangedML"]
        [::std::mem::size_of::<XrEventDataHeadsetFitChangedML>() - 32usize];
    ["Alignment of XrEventDataHeadsetFitChangedML"]
        [::std::mem::align_of::<XrEventDataHeadsetFitChangedML>() - 8usize];
    ["Offset of field: XrEventDataHeadsetFitChangedML::type_"]
        [::std::mem::offset_of!(XrEventDataHeadsetFitChangedML, type_) - 0usize];
    ["Offset of field: XrEventDataHeadsetFitChangedML::next"]
        [::std::mem::offset_of!(XrEventDataHeadsetFitChangedML, next) - 8usize];
    ["Offset of field: XrEventDataHeadsetFitChangedML::status"]
        [::std::mem::offset_of!(XrEventDataHeadsetFitChangedML, status) - 16usize];
    ["Offset of field: XrEventDataHeadsetFitChangedML::time"]
        [::std::mem::offset_of!(XrEventDataHeadsetFitChangedML, time) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataEyeCalibrationChangedML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub status: XrEyeCalibrationStatusML,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataEyeCalibrationChangedML"]
        [::std::mem::size_of::<XrEventDataEyeCalibrationChangedML>() - 24usize];
    ["Alignment of XrEventDataEyeCalibrationChangedML"]
        [::std::mem::align_of::<XrEventDataEyeCalibrationChangedML>() - 8usize];
    ["Offset of field: XrEventDataEyeCalibrationChangedML::type_"]
        [::std::mem::offset_of!(XrEventDataEyeCalibrationChangedML, type_) - 0usize];
    ["Offset of field: XrEventDataEyeCalibrationChangedML::next"]
        [::std::mem::offset_of!(XrEventDataEyeCalibrationChangedML, next) - 8usize];
    ["Offset of field: XrEventDataEyeCalibrationChangedML::status"]
        [::std::mem::offset_of!(XrEventDataEyeCalibrationChangedML, status) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrUserCalibrationEnableEventsInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub enabled: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrUserCalibrationEnableEventsInfoML"]
        [::std::mem::size_of::<XrUserCalibrationEnableEventsInfoML>() - 24usize];
    ["Alignment of XrUserCalibrationEnableEventsInfoML"]
        [::std::mem::align_of::<XrUserCalibrationEnableEventsInfoML>() - 8usize];
    ["Offset of field: XrUserCalibrationEnableEventsInfoML::type_"]
        [::std::mem::offset_of!(XrUserCalibrationEnableEventsInfoML, type_) - 0usize];
    ["Offset of field: XrUserCalibrationEnableEventsInfoML::next"]
        [::std::mem::offset_of!(XrUserCalibrationEnableEventsInfoML, next) - 8usize];
    ["Offset of field: XrUserCalibrationEnableEventsInfoML::enabled"]
        [::std::mem::offset_of!(XrUserCalibrationEnableEventsInfoML, enabled) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemNotificationsSetInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub suppressNotifications: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemNotificationsSetInfoML"]
        [::std::mem::size_of::<XrSystemNotificationsSetInfoML>() - 24usize];
    ["Alignment of XrSystemNotificationsSetInfoML"]
        [::std::mem::align_of::<XrSystemNotificationsSetInfoML>() - 8usize];
    ["Offset of field: XrSystemNotificationsSetInfoML::type_"]
        [::std::mem::offset_of!(XrSystemNotificationsSetInfoML, type_) - 0usize];
    ["Offset of field: XrSystemNotificationsSetInfoML::next"]
        [::std::mem::offset_of!(XrSystemNotificationsSetInfoML, next) - 8usize];
    ["Offset of field: XrSystemNotificationsSetInfoML::suppressNotifications"]
        [::std::mem::offset_of!(XrSystemNotificationsSetInfoML, suppressNotifications) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrWorldMeshDetectorML_T {
    _unused: [u8; 0],
}
pub type XrWorldMeshDetectorML = *mut XrWorldMeshDetectorML_T;
pub const XrWorldMeshDetectorLodML_XR_WORLD_MESH_DETECTOR_LOD_MINIMUM_ML: XrWorldMeshDetectorLodML =
    0;
pub const XrWorldMeshDetectorLodML_XR_WORLD_MESH_DETECTOR_LOD_MEDIUM_ML: XrWorldMeshDetectorLodML =
    1;
pub const XrWorldMeshDetectorLodML_XR_WORLD_MESH_DETECTOR_LOD_MAXIMUM_ML: XrWorldMeshDetectorLodML =
    2;
pub const XrWorldMeshDetectorLodML_XR_WORLD_MESH_DETECTOR_LOD_MAX_ENUM_ML:
    XrWorldMeshDetectorLodML = 2147483647;
pub type XrWorldMeshDetectorLodML = ::std::os::raw::c_uint;
pub const XrWorldMeshBlockStatusML_XR_WORLD_MESH_BLOCK_STATUS_NEW_ML: XrWorldMeshBlockStatusML = 0;
pub const XrWorldMeshBlockStatusML_XR_WORLD_MESH_BLOCK_STATUS_UPDATED_ML: XrWorldMeshBlockStatusML =
    1;
pub const XrWorldMeshBlockStatusML_XR_WORLD_MESH_BLOCK_STATUS_DELETED_ML: XrWorldMeshBlockStatusML =
    2;
pub const XrWorldMeshBlockStatusML_XR_WORLD_MESH_BLOCK_STATUS_UNCHANGED_ML:
    XrWorldMeshBlockStatusML = 3;
pub const XrWorldMeshBlockStatusML_XR_WORLD_MESH_BLOCK_STATUS_MAX_ENUM_ML:
    XrWorldMeshBlockStatusML = 2147483647;
pub type XrWorldMeshBlockStatusML = ::std::os::raw::c_uint;
pub const XrWorldMeshBlockResultML_XR_WORLD_MESH_BLOCK_RESULT_SUCCESS_ML: XrWorldMeshBlockResultML =
    0;
pub const XrWorldMeshBlockResultML_XR_WORLD_MESH_BLOCK_RESULT_FAILED_ML: XrWorldMeshBlockResultML =
    1;
pub const XrWorldMeshBlockResultML_XR_WORLD_MESH_BLOCK_RESULT_PENDING_ML: XrWorldMeshBlockResultML =
    2;
pub const XrWorldMeshBlockResultML_XR_WORLD_MESH_BLOCK_RESULT_PARTIAL_UPDATE_ML:
    XrWorldMeshBlockResultML = 3;
pub const XrWorldMeshBlockResultML_XR_WORLD_MESH_BLOCK_RESULT_MAX_ENUM_ML:
    XrWorldMeshBlockResultML = 2147483647;
pub type XrWorldMeshBlockResultML = ::std::os::raw::c_uint;
pub type XrWorldMeshDetectorFlagsML = XrFlags64;
pub const XR_WORLD_MESH_DETECTOR_POINT_CLOUD_BIT_ML: XrWorldMeshDetectorFlagsML = 1;
pub const XR_WORLD_MESH_DETECTOR_COMPUTE_NORMALS_BIT_ML: XrWorldMeshDetectorFlagsML = 2;
pub const XR_WORLD_MESH_DETECTOR_COMPUTE_CONFIDENCE_BIT_ML: XrWorldMeshDetectorFlagsML = 4;
pub const XR_WORLD_MESH_DETECTOR_PLANARIZE_BIT_ML: XrWorldMeshDetectorFlagsML = 8;
pub const XR_WORLD_MESH_DETECTOR_REMOVE_MESH_SKIRT_BIT_ML: XrWorldMeshDetectorFlagsML = 16;
pub const XR_WORLD_MESH_DETECTOR_INDEX_ORDER_CW_BIT_ML: XrWorldMeshDetectorFlagsML = 32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrWorldMeshDetectorCreateInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrWorldMeshDetectorCreateInfoML"]
        [::std::mem::size_of::<XrWorldMeshDetectorCreateInfoML>() - 16usize];
    ["Alignment of XrWorldMeshDetectorCreateInfoML"]
        [::std::mem::align_of::<XrWorldMeshDetectorCreateInfoML>() - 8usize];
    ["Offset of field: XrWorldMeshDetectorCreateInfoML::type_"]
        [::std::mem::offset_of!(XrWorldMeshDetectorCreateInfoML, type_) - 0usize];
    ["Offset of field: XrWorldMeshDetectorCreateInfoML::next"]
        [::std::mem::offset_of!(XrWorldMeshDetectorCreateInfoML, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrWorldMeshBlockStateML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub uuid: XrUuidEXT,
    pub meshBoundingBoxCenter: XrPosef,
    pub meshBoundingBoxExtents: XrExtent3DfEXT,
    pub lastUpdateTime: XrTime,
    pub status: XrWorldMeshBlockStatusML,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrWorldMeshBlockStateML"][::std::mem::size_of::<XrWorldMeshBlockStateML>() - 88usize];
    ["Alignment of XrWorldMeshBlockStateML"]
        [::std::mem::align_of::<XrWorldMeshBlockStateML>() - 8usize];
    ["Offset of field: XrWorldMeshBlockStateML::type_"]
        [::std::mem::offset_of!(XrWorldMeshBlockStateML, type_) - 0usize];
    ["Offset of field: XrWorldMeshBlockStateML::next"]
        [::std::mem::offset_of!(XrWorldMeshBlockStateML, next) - 8usize];
    ["Offset of field: XrWorldMeshBlockStateML::uuid"]
        [::std::mem::offset_of!(XrWorldMeshBlockStateML, uuid) - 16usize];
    ["Offset of field: XrWorldMeshBlockStateML::meshBoundingBoxCenter"]
        [::std::mem::offset_of!(XrWorldMeshBlockStateML, meshBoundingBoxCenter) - 32usize];
    ["Offset of field: XrWorldMeshBlockStateML::meshBoundingBoxExtents"]
        [::std::mem::offset_of!(XrWorldMeshBlockStateML, meshBoundingBoxExtents) - 60usize];
    ["Offset of field: XrWorldMeshBlockStateML::lastUpdateTime"]
        [::std::mem::offset_of!(XrWorldMeshBlockStateML, lastUpdateTime) - 72usize];
    ["Offset of field: XrWorldMeshBlockStateML::status"]
        [::std::mem::offset_of!(XrWorldMeshBlockStateML, status) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrWorldMeshStateRequestInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub baseSpace: XrSpace,
    pub time: XrTime,
    pub boundingBoxCenter: XrPosef,
    pub boundingBoxExtents: XrExtent3DfEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrWorldMeshStateRequestInfoML"]
        [::std::mem::size_of::<XrWorldMeshStateRequestInfoML>() - 72usize];
    ["Alignment of XrWorldMeshStateRequestInfoML"]
        [::std::mem::align_of::<XrWorldMeshStateRequestInfoML>() - 8usize];
    ["Offset of field: XrWorldMeshStateRequestInfoML::type_"]
        [::std::mem::offset_of!(XrWorldMeshStateRequestInfoML, type_) - 0usize];
    ["Offset of field: XrWorldMeshStateRequestInfoML::next"]
        [::std::mem::offset_of!(XrWorldMeshStateRequestInfoML, next) - 8usize];
    ["Offset of field: XrWorldMeshStateRequestInfoML::baseSpace"]
        [::std::mem::offset_of!(XrWorldMeshStateRequestInfoML, baseSpace) - 16usize];
    ["Offset of field: XrWorldMeshStateRequestInfoML::time"]
        [::std::mem::offset_of!(XrWorldMeshStateRequestInfoML, time) - 24usize];
    ["Offset of field: XrWorldMeshStateRequestInfoML::boundingBoxCenter"]
        [::std::mem::offset_of!(XrWorldMeshStateRequestInfoML, boundingBoxCenter) - 32usize];
    ["Offset of field: XrWorldMeshStateRequestInfoML::boundingBoxExtents"]
        [::std::mem::offset_of!(XrWorldMeshStateRequestInfoML, boundingBoxExtents) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrWorldMeshStateRequestCompletionML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub futureResult: XrResult,
    pub timestamp: XrTime,
    pub meshBlockStateCapacityInput: u32,
    pub meshBlockStateCountOutput: u32,
    pub meshBlockStates: *mut XrWorldMeshBlockStateML,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrWorldMeshStateRequestCompletionML"]
        [::std::mem::size_of::<XrWorldMeshStateRequestCompletionML>() - 48usize];
    ["Alignment of XrWorldMeshStateRequestCompletionML"]
        [::std::mem::align_of::<XrWorldMeshStateRequestCompletionML>() - 8usize];
    ["Offset of field: XrWorldMeshStateRequestCompletionML::type_"]
        [::std::mem::offset_of!(XrWorldMeshStateRequestCompletionML, type_) - 0usize];
    ["Offset of field: XrWorldMeshStateRequestCompletionML::next"]
        [::std::mem::offset_of!(XrWorldMeshStateRequestCompletionML, next) - 8usize];
    ["Offset of field: XrWorldMeshStateRequestCompletionML::futureResult"]
        [::std::mem::offset_of!(XrWorldMeshStateRequestCompletionML, futureResult) - 16usize];
    ["Offset of field: XrWorldMeshStateRequestCompletionML::timestamp"]
        [::std::mem::offset_of!(XrWorldMeshStateRequestCompletionML, timestamp) - 24usize];
    ["Offset of field: XrWorldMeshStateRequestCompletionML::meshBlockStateCapacityInput"][::std::mem::offset_of!(
        XrWorldMeshStateRequestCompletionML,
        meshBlockStateCapacityInput
    )
        - 32usize];
    ["Offset of field: XrWorldMeshStateRequestCompletionML::meshBlockStateCountOutput"][::std::mem::offset_of!(
        XrWorldMeshStateRequestCompletionML,
        meshBlockStateCountOutput
    )
        - 36usize];
    ["Offset of field: XrWorldMeshStateRequestCompletionML::meshBlockStates"]
        [::std::mem::offset_of!(XrWorldMeshStateRequestCompletionML, meshBlockStates) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrWorldMeshBufferRecommendedSizeInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub maxBlockCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrWorldMeshBufferRecommendedSizeInfoML"]
        [::std::mem::size_of::<XrWorldMeshBufferRecommendedSizeInfoML>() - 24usize];
    ["Alignment of XrWorldMeshBufferRecommendedSizeInfoML"]
        [::std::mem::align_of::<XrWorldMeshBufferRecommendedSizeInfoML>() - 8usize];
    ["Offset of field: XrWorldMeshBufferRecommendedSizeInfoML::type_"]
        [::std::mem::offset_of!(XrWorldMeshBufferRecommendedSizeInfoML, type_) - 0usize];
    ["Offset of field: XrWorldMeshBufferRecommendedSizeInfoML::next"]
        [::std::mem::offset_of!(XrWorldMeshBufferRecommendedSizeInfoML, next) - 8usize];
    ["Offset of field: XrWorldMeshBufferRecommendedSizeInfoML::maxBlockCount"]
        [::std::mem::offset_of!(XrWorldMeshBufferRecommendedSizeInfoML, maxBlockCount) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrWorldMeshBufferSizeML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub size: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrWorldMeshBufferSizeML"][::std::mem::size_of::<XrWorldMeshBufferSizeML>() - 24usize];
    ["Alignment of XrWorldMeshBufferSizeML"]
        [::std::mem::align_of::<XrWorldMeshBufferSizeML>() - 8usize];
    ["Offset of field: XrWorldMeshBufferSizeML::type_"]
        [::std::mem::offset_of!(XrWorldMeshBufferSizeML, type_) - 0usize];
    ["Offset of field: XrWorldMeshBufferSizeML::next"]
        [::std::mem::offset_of!(XrWorldMeshBufferSizeML, next) - 8usize];
    ["Offset of field: XrWorldMeshBufferSizeML::size"]
        [::std::mem::offset_of!(XrWorldMeshBufferSizeML, size) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrWorldMeshBufferML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub bufferSize: u32,
    pub buffer: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrWorldMeshBufferML"][::std::mem::size_of::<XrWorldMeshBufferML>() - 32usize];
    ["Alignment of XrWorldMeshBufferML"][::std::mem::align_of::<XrWorldMeshBufferML>() - 8usize];
    ["Offset of field: XrWorldMeshBufferML::type_"]
        [::std::mem::offset_of!(XrWorldMeshBufferML, type_) - 0usize];
    ["Offset of field: XrWorldMeshBufferML::next"]
        [::std::mem::offset_of!(XrWorldMeshBufferML, next) - 8usize];
    ["Offset of field: XrWorldMeshBufferML::bufferSize"]
        [::std::mem::offset_of!(XrWorldMeshBufferML, bufferSize) - 16usize];
    ["Offset of field: XrWorldMeshBufferML::buffer"]
        [::std::mem::offset_of!(XrWorldMeshBufferML, buffer) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrWorldMeshBlockRequestML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub uuid: XrUuidEXT,
    pub lod: XrWorldMeshDetectorLodML,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrWorldMeshBlockRequestML"]
        [::std::mem::size_of::<XrWorldMeshBlockRequestML>() - 40usize];
    ["Alignment of XrWorldMeshBlockRequestML"]
        [::std::mem::align_of::<XrWorldMeshBlockRequestML>() - 8usize];
    ["Offset of field: XrWorldMeshBlockRequestML::type_"]
        [::std::mem::offset_of!(XrWorldMeshBlockRequestML, type_) - 0usize];
    ["Offset of field: XrWorldMeshBlockRequestML::next"]
        [::std::mem::offset_of!(XrWorldMeshBlockRequestML, next) - 8usize];
    ["Offset of field: XrWorldMeshBlockRequestML::uuid"]
        [::std::mem::offset_of!(XrWorldMeshBlockRequestML, uuid) - 16usize];
    ["Offset of field: XrWorldMeshBlockRequestML::lod"]
        [::std::mem::offset_of!(XrWorldMeshBlockRequestML, lod) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrWorldMeshGetInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub flags: XrWorldMeshDetectorFlagsML,
    pub fillHoleLength: f32,
    pub disconnectedComponentArea: f32,
    pub blockCount: u32,
    pub blocks: *mut XrWorldMeshBlockRequestML,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrWorldMeshGetInfoML"][::std::mem::size_of::<XrWorldMeshGetInfoML>() - 48usize];
    ["Alignment of XrWorldMeshGetInfoML"][::std::mem::align_of::<XrWorldMeshGetInfoML>() - 8usize];
    ["Offset of field: XrWorldMeshGetInfoML::type_"]
        [::std::mem::offset_of!(XrWorldMeshGetInfoML, type_) - 0usize];
    ["Offset of field: XrWorldMeshGetInfoML::next"]
        [::std::mem::offset_of!(XrWorldMeshGetInfoML, next) - 8usize];
    ["Offset of field: XrWorldMeshGetInfoML::flags"]
        [::std::mem::offset_of!(XrWorldMeshGetInfoML, flags) - 16usize];
    ["Offset of field: XrWorldMeshGetInfoML::fillHoleLength"]
        [::std::mem::offset_of!(XrWorldMeshGetInfoML, fillHoleLength) - 24usize];
    ["Offset of field: XrWorldMeshGetInfoML::disconnectedComponentArea"]
        [::std::mem::offset_of!(XrWorldMeshGetInfoML, disconnectedComponentArea) - 28usize];
    ["Offset of field: XrWorldMeshGetInfoML::blockCount"]
        [::std::mem::offset_of!(XrWorldMeshGetInfoML, blockCount) - 32usize];
    ["Offset of field: XrWorldMeshGetInfoML::blocks"]
        [::std::mem::offset_of!(XrWorldMeshGetInfoML, blocks) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrWorldMeshBlockML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub uuid: XrUuidEXT,
    pub blockResult: XrWorldMeshBlockResultML,
    pub lod: XrWorldMeshDetectorLodML,
    pub flags: XrWorldMeshDetectorFlagsML,
    pub indexCount: u32,
    pub indexBuffer: *mut u16,
    pub vertexCount: u32,
    pub vertexBuffer: *mut XrVector3f,
    pub normalCount: u32,
    pub normalBuffer: *mut XrVector3f,
    pub confidenceCount: u32,
    pub confidenceBuffer: *mut f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrWorldMeshBlockML"][::std::mem::size_of::<XrWorldMeshBlockML>() - 112usize];
    ["Alignment of XrWorldMeshBlockML"][::std::mem::align_of::<XrWorldMeshBlockML>() - 8usize];
    ["Offset of field: XrWorldMeshBlockML::type_"]
        [::std::mem::offset_of!(XrWorldMeshBlockML, type_) - 0usize];
    ["Offset of field: XrWorldMeshBlockML::next"]
        [::std::mem::offset_of!(XrWorldMeshBlockML, next) - 8usize];
    ["Offset of field: XrWorldMeshBlockML::uuid"]
        [::std::mem::offset_of!(XrWorldMeshBlockML, uuid) - 16usize];
    ["Offset of field: XrWorldMeshBlockML::blockResult"]
        [::std::mem::offset_of!(XrWorldMeshBlockML, blockResult) - 32usize];
    ["Offset of field: XrWorldMeshBlockML::lod"]
        [::std::mem::offset_of!(XrWorldMeshBlockML, lod) - 36usize];
    ["Offset of field: XrWorldMeshBlockML::flags"]
        [::std::mem::offset_of!(XrWorldMeshBlockML, flags) - 40usize];
    ["Offset of field: XrWorldMeshBlockML::indexCount"]
        [::std::mem::offset_of!(XrWorldMeshBlockML, indexCount) - 48usize];
    ["Offset of field: XrWorldMeshBlockML::indexBuffer"]
        [::std::mem::offset_of!(XrWorldMeshBlockML, indexBuffer) - 56usize];
    ["Offset of field: XrWorldMeshBlockML::vertexCount"]
        [::std::mem::offset_of!(XrWorldMeshBlockML, vertexCount) - 64usize];
    ["Offset of field: XrWorldMeshBlockML::vertexBuffer"]
        [::std::mem::offset_of!(XrWorldMeshBlockML, vertexBuffer) - 72usize];
    ["Offset of field: XrWorldMeshBlockML::normalCount"]
        [::std::mem::offset_of!(XrWorldMeshBlockML, normalCount) - 80usize];
    ["Offset of field: XrWorldMeshBlockML::normalBuffer"]
        [::std::mem::offset_of!(XrWorldMeshBlockML, normalBuffer) - 88usize];
    ["Offset of field: XrWorldMeshBlockML::confidenceCount"]
        [::std::mem::offset_of!(XrWorldMeshBlockML, confidenceCount) - 96usize];
    ["Offset of field: XrWorldMeshBlockML::confidenceBuffer"]
        [::std::mem::offset_of!(XrWorldMeshBlockML, confidenceBuffer) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrWorldMeshRequestCompletionInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub meshSpace: XrSpace,
    pub meshSpaceLocateTime: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrWorldMeshRequestCompletionInfoML"]
        [::std::mem::size_of::<XrWorldMeshRequestCompletionInfoML>() - 32usize];
    ["Alignment of XrWorldMeshRequestCompletionInfoML"]
        [::std::mem::align_of::<XrWorldMeshRequestCompletionInfoML>() - 8usize];
    ["Offset of field: XrWorldMeshRequestCompletionInfoML::type_"]
        [::std::mem::offset_of!(XrWorldMeshRequestCompletionInfoML, type_) - 0usize];
    ["Offset of field: XrWorldMeshRequestCompletionInfoML::next"]
        [::std::mem::offset_of!(XrWorldMeshRequestCompletionInfoML, next) - 8usize];
    ["Offset of field: XrWorldMeshRequestCompletionInfoML::meshSpace"]
        [::std::mem::offset_of!(XrWorldMeshRequestCompletionInfoML, meshSpace) - 16usize];
    ["Offset of field: XrWorldMeshRequestCompletionInfoML::meshSpaceLocateTime"]
        [::std::mem::offset_of!(XrWorldMeshRequestCompletionInfoML, meshSpaceLocateTime) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrWorldMeshRequestCompletionML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub futureResult: XrResult,
    pub blockCount: u32,
    pub blocks: *mut XrWorldMeshBlockML,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrWorldMeshRequestCompletionML"]
        [::std::mem::size_of::<XrWorldMeshRequestCompletionML>() - 32usize];
    ["Alignment of XrWorldMeshRequestCompletionML"]
        [::std::mem::align_of::<XrWorldMeshRequestCompletionML>() - 8usize];
    ["Offset of field: XrWorldMeshRequestCompletionML::type_"]
        [::std::mem::offset_of!(XrWorldMeshRequestCompletionML, type_) - 0usize];
    ["Offset of field: XrWorldMeshRequestCompletionML::next"]
        [::std::mem::offset_of!(XrWorldMeshRequestCompletionML, next) - 8usize];
    ["Offset of field: XrWorldMeshRequestCompletionML::futureResult"]
        [::std::mem::offset_of!(XrWorldMeshRequestCompletionML, futureResult) - 16usize];
    ["Offset of field: XrWorldMeshRequestCompletionML::blockCount"]
        [::std::mem::offset_of!(XrWorldMeshRequestCompletionML, blockCount) - 20usize];
    ["Offset of field: XrWorldMeshRequestCompletionML::blocks"]
        [::std::mem::offset_of!(XrWorldMeshRequestCompletionML, blocks) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFacialExpressionClientML_T {
    _unused: [u8; 0],
}
pub type XrFacialExpressionClientML = *mut XrFacialExpressionClientML_T;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_BROW_LOWERER_L_ML: XrFacialBlendShapeML = 0;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_BROW_LOWERER_R_ML: XrFacialBlendShapeML = 1;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_CHEEK_RAISER_L_ML: XrFacialBlendShapeML = 2;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_CHEEK_RAISER_R_ML: XrFacialBlendShapeML = 3;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_CHIN_RAISER_ML: XrFacialBlendShapeML = 4;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_DIMPLER_L_ML: XrFacialBlendShapeML = 5;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_DIMPLER_R_ML: XrFacialBlendShapeML = 6;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_EYES_CLOSED_L_ML: XrFacialBlendShapeML = 7;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_EYES_CLOSED_R_ML: XrFacialBlendShapeML = 8;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_INNER_BROW_RAISER_L_ML: XrFacialBlendShapeML =
    9;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_INNER_BROW_RAISER_R_ML: XrFacialBlendShapeML =
    10;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_JAW_DROP_ML: XrFacialBlendShapeML = 11;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LID_TIGHTENER_L_ML: XrFacialBlendShapeML = 12;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LID_TIGHTENER_R_ML: XrFacialBlendShapeML = 13;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LIP_CORNER_DEPRESSOR_L_ML:
    XrFacialBlendShapeML = 14;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LIP_CORNER_DEPRESSOR_R_ML:
    XrFacialBlendShapeML = 15;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LIP_CORNER_PULLER_L_ML: XrFacialBlendShapeML =
    16;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LIP_CORNER_PULLER_R_ML: XrFacialBlendShapeML =
    17;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LIP_FUNNELER_LB_ML: XrFacialBlendShapeML = 18;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LIP_FUNNELER_LT_ML: XrFacialBlendShapeML = 19;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LIP_FUNNELER_RB_ML: XrFacialBlendShapeML = 20;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LIP_FUNNELER_RT_ML: XrFacialBlendShapeML = 21;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LIP_PRESSOR_L_ML: XrFacialBlendShapeML = 22;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LIP_PRESSOR_R_ML: XrFacialBlendShapeML = 23;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LIP_PUCKER_L_ML: XrFacialBlendShapeML = 24;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LIP_PUCKER_R_ML: XrFacialBlendShapeML = 25;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LIP_STRETCHER_L_ML: XrFacialBlendShapeML = 26;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LIP_STRETCHER_R_ML: XrFacialBlendShapeML = 27;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LIP_SUCK_LB_ML: XrFacialBlendShapeML = 28;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LIP_SUCK_LT_ML: XrFacialBlendShapeML = 29;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LIP_SUCK_RB_ML: XrFacialBlendShapeML = 30;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LIP_SUCK_RT_ML: XrFacialBlendShapeML = 31;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LIP_TIGHTENER_L_ML: XrFacialBlendShapeML = 32;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LIP_TIGHTENER_R_ML: XrFacialBlendShapeML = 33;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LIPS_TOWARD_ML: XrFacialBlendShapeML = 34;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LOWER_LIP_DEPRESSOR_L_ML:
    XrFacialBlendShapeML = 35;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_LOWER_LIP_DEPRESSOR_R_ML:
    XrFacialBlendShapeML = 36;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_NOSE_WRINKLER_L_ML: XrFacialBlendShapeML = 37;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_NOSE_WRINKLER_R_ML: XrFacialBlendShapeML = 38;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_OUTER_BROW_RAISER_L_ML: XrFacialBlendShapeML =
    39;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_OUTER_BROW_RAISER_R_ML: XrFacialBlendShapeML =
    40;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_UPPER_LID_RAISER_L_ML: XrFacialBlendShapeML =
    41;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_UPPER_LID_RAISER_R_ML: XrFacialBlendShapeML =
    42;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_UPPER_LIP_RAISER_L_ML: XrFacialBlendShapeML =
    43;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_UPPER_LIP_RAISER_R_ML: XrFacialBlendShapeML =
    44;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_TONGUE_OUT_ML: XrFacialBlendShapeML = 45;
pub const XrFacialBlendShapeML_XR_FACIAL_BLEND_SHAPE_MAX_ENUM_ML: XrFacialBlendShapeML = 2147483647;
pub type XrFacialBlendShapeML = ::std::os::raw::c_uint;
pub type XrFacialExpressionBlendShapePropertiesFlagsML = XrFlags64;
pub const XR_FACIAL_EXPRESSION_BLEND_SHAPE_PROPERTIES_VALID_BIT_ML:
    XrFacialExpressionBlendShapePropertiesFlagsML = 1;
pub const XR_FACIAL_EXPRESSION_BLEND_SHAPE_PROPERTIES_TRACKED_BIT_ML:
    XrFacialExpressionBlendShapePropertiesFlagsML = 2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemFacialExpressionPropertiesML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsFacialExpression: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemFacialExpressionPropertiesML"]
        [::std::mem::size_of::<XrSystemFacialExpressionPropertiesML>() - 24usize];
    ["Alignment of XrSystemFacialExpressionPropertiesML"]
        [::std::mem::align_of::<XrSystemFacialExpressionPropertiesML>() - 8usize];
    ["Offset of field: XrSystemFacialExpressionPropertiesML::type_"]
        [::std::mem::offset_of!(XrSystemFacialExpressionPropertiesML, type_) - 0usize];
    ["Offset of field: XrSystemFacialExpressionPropertiesML::next"]
        [::std::mem::offset_of!(XrSystemFacialExpressionPropertiesML, next) - 8usize];
    ["Offset of field: XrSystemFacialExpressionPropertiesML::supportsFacialExpression"][::std::mem::offset_of!(
        XrSystemFacialExpressionPropertiesML,
        supportsFacialExpression
    )
        - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFacialExpressionClientCreateInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestedCount: u32,
    pub requestedFacialBlendShapes: *const XrFacialBlendShapeML,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFacialExpressionClientCreateInfoML"]
        [::std::mem::size_of::<XrFacialExpressionClientCreateInfoML>() - 32usize];
    ["Alignment of XrFacialExpressionClientCreateInfoML"]
        [::std::mem::align_of::<XrFacialExpressionClientCreateInfoML>() - 8usize];
    ["Offset of field: XrFacialExpressionClientCreateInfoML::type_"]
        [::std::mem::offset_of!(XrFacialExpressionClientCreateInfoML, type_) - 0usize];
    ["Offset of field: XrFacialExpressionClientCreateInfoML::next"]
        [::std::mem::offset_of!(XrFacialExpressionClientCreateInfoML, next) - 8usize];
    ["Offset of field: XrFacialExpressionClientCreateInfoML::requestedCount"]
        [::std::mem::offset_of!(XrFacialExpressionClientCreateInfoML, requestedCount) - 16usize];
    ["Offset of field: XrFacialExpressionClientCreateInfoML::requestedFacialBlendShapes"][::std::mem::offset_of!(
        XrFacialExpressionClientCreateInfoML,
        requestedFacialBlendShapes
    )
        - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFacialExpressionBlendShapeGetInfoML {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFacialExpressionBlendShapeGetInfoML"]
        [::std::mem::size_of::<XrFacialExpressionBlendShapeGetInfoML>() - 16usize];
    ["Alignment of XrFacialExpressionBlendShapeGetInfoML"]
        [::std::mem::align_of::<XrFacialExpressionBlendShapeGetInfoML>() - 8usize];
    ["Offset of field: XrFacialExpressionBlendShapeGetInfoML::type_"]
        [::std::mem::offset_of!(XrFacialExpressionBlendShapeGetInfoML, type_) - 0usize];
    ["Offset of field: XrFacialExpressionBlendShapeGetInfoML::next"]
        [::std::mem::offset_of!(XrFacialExpressionBlendShapeGetInfoML, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrFacialExpressionBlendShapePropertiesML {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub requestedFacialBlendShape: XrFacialBlendShapeML,
    pub weight: f32,
    pub flags: XrFacialExpressionBlendShapePropertiesFlagsML,
    pub time: XrTime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrFacialExpressionBlendShapePropertiesML"]
        [::std::mem::size_of::<XrFacialExpressionBlendShapePropertiesML>() - 40usize];
    ["Alignment of XrFacialExpressionBlendShapePropertiesML"]
        [::std::mem::align_of::<XrFacialExpressionBlendShapePropertiesML>() - 8usize];
    ["Offset of field: XrFacialExpressionBlendShapePropertiesML::type_"]
        [::std::mem::offset_of!(XrFacialExpressionBlendShapePropertiesML, type_) - 0usize];
    ["Offset of field: XrFacialExpressionBlendShapePropertiesML::next"]
        [::std::mem::offset_of!(XrFacialExpressionBlendShapePropertiesML, next) - 8usize];
    ["Offset of field: XrFacialExpressionBlendShapePropertiesML::requestedFacialBlendShape"][::std::mem::offset_of!(
        XrFacialExpressionBlendShapePropertiesML,
        requestedFacialBlendShape
    )
        - 16usize];
    ["Offset of field: XrFacialExpressionBlendShapePropertiesML::weight"]
        [::std::mem::offset_of!(XrFacialExpressionBlendShapePropertiesML, weight) - 20usize];
    ["Offset of field: XrFacialExpressionBlendShapePropertiesML::flags"]
        [::std::mem::offset_of!(XrFacialExpressionBlendShapePropertiesML, flags) - 24usize];
    ["Offset of field: XrFacialExpressionBlendShapePropertiesML::time"]
        [::std::mem::offset_of!(XrFacialExpressionBlendShapePropertiesML, time) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrColocationDiscoveryStartInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrColocationDiscoveryStartInfoMETA"]
        [::std::mem::size_of::<XrColocationDiscoveryStartInfoMETA>() - 16usize];
    ["Alignment of XrColocationDiscoveryStartInfoMETA"]
        [::std::mem::align_of::<XrColocationDiscoveryStartInfoMETA>() - 8usize];
    ["Offset of field: XrColocationDiscoveryStartInfoMETA::type_"]
        [::std::mem::offset_of!(XrColocationDiscoveryStartInfoMETA, type_) - 0usize];
    ["Offset of field: XrColocationDiscoveryStartInfoMETA::next"]
        [::std::mem::offset_of!(XrColocationDiscoveryStartInfoMETA, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrColocationDiscoveryStopInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrColocationDiscoveryStopInfoMETA"]
        [::std::mem::size_of::<XrColocationDiscoveryStopInfoMETA>() - 16usize];
    ["Alignment of XrColocationDiscoveryStopInfoMETA"]
        [::std::mem::align_of::<XrColocationDiscoveryStopInfoMETA>() - 8usize];
    ["Offset of field: XrColocationDiscoveryStopInfoMETA::type_"]
        [::std::mem::offset_of!(XrColocationDiscoveryStopInfoMETA, type_) - 0usize];
    ["Offset of field: XrColocationDiscoveryStopInfoMETA::next"]
        [::std::mem::offset_of!(XrColocationDiscoveryStopInfoMETA, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrColocationAdvertisementStartInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub bufferSize: u32,
    pub buffer: *mut u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrColocationAdvertisementStartInfoMETA"]
        [::std::mem::size_of::<XrColocationAdvertisementStartInfoMETA>() - 32usize];
    ["Alignment of XrColocationAdvertisementStartInfoMETA"]
        [::std::mem::align_of::<XrColocationAdvertisementStartInfoMETA>() - 8usize];
    ["Offset of field: XrColocationAdvertisementStartInfoMETA::type_"]
        [::std::mem::offset_of!(XrColocationAdvertisementStartInfoMETA, type_) - 0usize];
    ["Offset of field: XrColocationAdvertisementStartInfoMETA::next"]
        [::std::mem::offset_of!(XrColocationAdvertisementStartInfoMETA, next) - 8usize];
    ["Offset of field: XrColocationAdvertisementStartInfoMETA::bufferSize"]
        [::std::mem::offset_of!(XrColocationAdvertisementStartInfoMETA, bufferSize) - 16usize];
    ["Offset of field: XrColocationAdvertisementStartInfoMETA::buffer"]
        [::std::mem::offset_of!(XrColocationAdvertisementStartInfoMETA, buffer) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrColocationAdvertisementStopInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrColocationAdvertisementStopInfoMETA"]
        [::std::mem::size_of::<XrColocationAdvertisementStopInfoMETA>() - 16usize];
    ["Alignment of XrColocationAdvertisementStopInfoMETA"]
        [::std::mem::align_of::<XrColocationAdvertisementStopInfoMETA>() - 8usize];
    ["Offset of field: XrColocationAdvertisementStopInfoMETA::type_"]
        [::std::mem::offset_of!(XrColocationAdvertisementStopInfoMETA, type_) - 0usize];
    ["Offset of field: XrColocationAdvertisementStopInfoMETA::next"]
        [::std::mem::offset_of!(XrColocationAdvertisementStopInfoMETA, next) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataStartColocationAdvertisementCompleteMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub advertisementRequestId: XrAsyncRequestIdFB,
    pub result: XrResult,
    pub advertisementUuid: XrUuid,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataStartColocationAdvertisementCompleteMETA"]
        [::std::mem::size_of::<XrEventDataStartColocationAdvertisementCompleteMETA>() - 48usize];
    ["Alignment of XrEventDataStartColocationAdvertisementCompleteMETA"]
        [::std::mem::align_of::<XrEventDataStartColocationAdvertisementCompleteMETA>() - 8usize];
    ["Offset of field: XrEventDataStartColocationAdvertisementCompleteMETA::type_"][::std::mem::offset_of!(
        XrEventDataStartColocationAdvertisementCompleteMETA,
        type_
    ) - 0usize];
    ["Offset of field: XrEventDataStartColocationAdvertisementCompleteMETA::next"][::std::mem::offset_of!(
        XrEventDataStartColocationAdvertisementCompleteMETA,
        next
    ) - 8usize];
    ["Offset of field: XrEventDataStartColocationAdvertisementCompleteMETA::advertisementRequestId"] [:: std :: mem :: offset_of ! (XrEventDataStartColocationAdvertisementCompleteMETA , advertisementRequestId) - 16usize] ;
    ["Offset of field: XrEventDataStartColocationAdvertisementCompleteMETA::result"][::std::mem::offset_of!(
        XrEventDataStartColocationAdvertisementCompleteMETA,
        result
    ) - 24usize];
    ["Offset of field: XrEventDataStartColocationAdvertisementCompleteMETA::advertisementUuid"][::std::mem::offset_of!(
        XrEventDataStartColocationAdvertisementCompleteMETA,
        advertisementUuid
    )
        - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataStopColocationAdvertisementCompleteMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestId: XrAsyncRequestIdFB,
    pub result: XrResult,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataStopColocationAdvertisementCompleteMETA"]
        [::std::mem::size_of::<XrEventDataStopColocationAdvertisementCompleteMETA>() - 32usize];
    ["Alignment of XrEventDataStopColocationAdvertisementCompleteMETA"]
        [::std::mem::align_of::<XrEventDataStopColocationAdvertisementCompleteMETA>() - 8usize];
    ["Offset of field: XrEventDataStopColocationAdvertisementCompleteMETA::type_"][::std::mem::offset_of!(
        XrEventDataStopColocationAdvertisementCompleteMETA,
        type_
    ) - 0usize];
    ["Offset of field: XrEventDataStopColocationAdvertisementCompleteMETA::next"]
        [::std::mem::offset_of!(XrEventDataStopColocationAdvertisementCompleteMETA, next) - 8usize];
    ["Offset of field: XrEventDataStopColocationAdvertisementCompleteMETA::requestId"][::std::mem::offset_of!(
        XrEventDataStopColocationAdvertisementCompleteMETA,
        requestId
    ) - 16usize];
    ["Offset of field: XrEventDataStopColocationAdvertisementCompleteMETA::result"][::std::mem::offset_of!(
        XrEventDataStopColocationAdvertisementCompleteMETA,
        result
    ) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataColocationAdvertisementCompleteMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub advertisementRequestId: XrAsyncRequestIdFB,
    pub result: XrResult,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataColocationAdvertisementCompleteMETA"]
        [::std::mem::size_of::<XrEventDataColocationAdvertisementCompleteMETA>() - 32usize];
    ["Alignment of XrEventDataColocationAdvertisementCompleteMETA"]
        [::std::mem::align_of::<XrEventDataColocationAdvertisementCompleteMETA>() - 8usize];
    ["Offset of field: XrEventDataColocationAdvertisementCompleteMETA::type_"]
        [::std::mem::offset_of!(XrEventDataColocationAdvertisementCompleteMETA, type_) - 0usize];
    ["Offset of field: XrEventDataColocationAdvertisementCompleteMETA::next"]
        [::std::mem::offset_of!(XrEventDataColocationAdvertisementCompleteMETA, next) - 8usize];
    ["Offset of field: XrEventDataColocationAdvertisementCompleteMETA::advertisementRequestId"][::std::mem::offset_of!(
        XrEventDataColocationAdvertisementCompleteMETA,
        advertisementRequestId
    )
        - 16usize];
    ["Offset of field: XrEventDataColocationAdvertisementCompleteMETA::result"]
        [::std::mem::offset_of!(XrEventDataColocationAdvertisementCompleteMETA, result) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataStartColocationDiscoveryCompleteMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub discoveryRequestId: XrAsyncRequestIdFB,
    pub result: XrResult,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataStartColocationDiscoveryCompleteMETA"]
        [::std::mem::size_of::<XrEventDataStartColocationDiscoveryCompleteMETA>() - 32usize];
    ["Alignment of XrEventDataStartColocationDiscoveryCompleteMETA"]
        [::std::mem::align_of::<XrEventDataStartColocationDiscoveryCompleteMETA>() - 8usize];
    ["Offset of field: XrEventDataStartColocationDiscoveryCompleteMETA::type_"]
        [::std::mem::offset_of!(XrEventDataStartColocationDiscoveryCompleteMETA, type_) - 0usize];
    ["Offset of field: XrEventDataStartColocationDiscoveryCompleteMETA::next"]
        [::std::mem::offset_of!(XrEventDataStartColocationDiscoveryCompleteMETA, next) - 8usize];
    ["Offset of field: XrEventDataStartColocationDiscoveryCompleteMETA::discoveryRequestId"][::std::mem::offset_of!(
        XrEventDataStartColocationDiscoveryCompleteMETA,
        discoveryRequestId
    )
        - 16usize];
    ["Offset of field: XrEventDataStartColocationDiscoveryCompleteMETA::result"]
        [::std::mem::offset_of!(XrEventDataStartColocationDiscoveryCompleteMETA, result) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataColocationDiscoveryResultMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub discoveryRequestId: XrAsyncRequestIdFB,
    pub advertisementUuid: XrUuid,
    pub bufferSize: u32,
    pub buffer: [u8; 1024usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataColocationDiscoveryResultMETA"]
        [::std::mem::size_of::<XrEventDataColocationDiscoveryResultMETA>() - 1072usize];
    ["Alignment of XrEventDataColocationDiscoveryResultMETA"]
        [::std::mem::align_of::<XrEventDataColocationDiscoveryResultMETA>() - 8usize];
    ["Offset of field: XrEventDataColocationDiscoveryResultMETA::type_"]
        [::std::mem::offset_of!(XrEventDataColocationDiscoveryResultMETA, type_) - 0usize];
    ["Offset of field: XrEventDataColocationDiscoveryResultMETA::next"]
        [::std::mem::offset_of!(XrEventDataColocationDiscoveryResultMETA, next) - 8usize];
    ["Offset of field: XrEventDataColocationDiscoveryResultMETA::discoveryRequestId"][::std::mem::offset_of!(
        XrEventDataColocationDiscoveryResultMETA,
        discoveryRequestId
    ) - 16usize];
    ["Offset of field: XrEventDataColocationDiscoveryResultMETA::advertisementUuid"][::std::mem::offset_of!(
        XrEventDataColocationDiscoveryResultMETA,
        advertisementUuid
    ) - 24usize];
    ["Offset of field: XrEventDataColocationDiscoveryResultMETA::bufferSize"]
        [::std::mem::offset_of!(XrEventDataColocationDiscoveryResultMETA, bufferSize) - 40usize];
    ["Offset of field: XrEventDataColocationDiscoveryResultMETA::buffer"]
        [::std::mem::offset_of!(XrEventDataColocationDiscoveryResultMETA, buffer) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataColocationDiscoveryCompleteMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub discoveryRequestId: XrAsyncRequestIdFB,
    pub result: XrResult,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataColocationDiscoveryCompleteMETA"]
        [::std::mem::size_of::<XrEventDataColocationDiscoveryCompleteMETA>() - 32usize];
    ["Alignment of XrEventDataColocationDiscoveryCompleteMETA"]
        [::std::mem::align_of::<XrEventDataColocationDiscoveryCompleteMETA>() - 8usize];
    ["Offset of field: XrEventDataColocationDiscoveryCompleteMETA::type_"]
        [::std::mem::offset_of!(XrEventDataColocationDiscoveryCompleteMETA, type_) - 0usize];
    ["Offset of field: XrEventDataColocationDiscoveryCompleteMETA::next"]
        [::std::mem::offset_of!(XrEventDataColocationDiscoveryCompleteMETA, next) - 8usize];
    ["Offset of field: XrEventDataColocationDiscoveryCompleteMETA::discoveryRequestId"][::std::mem::offset_of!(
        XrEventDataColocationDiscoveryCompleteMETA,
        discoveryRequestId
    )
        - 16usize];
    ["Offset of field: XrEventDataColocationDiscoveryCompleteMETA::result"]
        [::std::mem::offset_of!(XrEventDataColocationDiscoveryCompleteMETA, result) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrEventDataStopColocationDiscoveryCompleteMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub requestId: XrAsyncRequestIdFB,
    pub result: XrResult,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrEventDataStopColocationDiscoveryCompleteMETA"]
        [::std::mem::size_of::<XrEventDataStopColocationDiscoveryCompleteMETA>() - 32usize];
    ["Alignment of XrEventDataStopColocationDiscoveryCompleteMETA"]
        [::std::mem::align_of::<XrEventDataStopColocationDiscoveryCompleteMETA>() - 8usize];
    ["Offset of field: XrEventDataStopColocationDiscoveryCompleteMETA::type_"]
        [::std::mem::offset_of!(XrEventDataStopColocationDiscoveryCompleteMETA, type_) - 0usize];
    ["Offset of field: XrEventDataStopColocationDiscoveryCompleteMETA::next"]
        [::std::mem::offset_of!(XrEventDataStopColocationDiscoveryCompleteMETA, next) - 8usize];
    ["Offset of field: XrEventDataStopColocationDiscoveryCompleteMETA::requestId"][::std::mem::offset_of!(
        XrEventDataStopColocationDiscoveryCompleteMETA,
        requestId
    ) - 16usize];
    ["Offset of field: XrEventDataStopColocationDiscoveryCompleteMETA::result"]
        [::std::mem::offset_of!(XrEventDataStopColocationDiscoveryCompleteMETA, result) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemColocationDiscoveryPropertiesMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsColocationDiscovery: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemColocationDiscoveryPropertiesMETA"]
        [::std::mem::size_of::<XrSystemColocationDiscoveryPropertiesMETA>() - 24usize];
    ["Alignment of XrSystemColocationDiscoveryPropertiesMETA"]
        [::std::mem::align_of::<XrSystemColocationDiscoveryPropertiesMETA>() - 8usize];
    ["Offset of field: XrSystemColocationDiscoveryPropertiesMETA::type_"]
        [::std::mem::offset_of!(XrSystemColocationDiscoveryPropertiesMETA, type_) - 0usize];
    ["Offset of field: XrSystemColocationDiscoveryPropertiesMETA::next"]
        [::std::mem::offset_of!(XrSystemColocationDiscoveryPropertiesMETA, next) - 8usize];
    ["Offset of field: XrSystemColocationDiscoveryPropertiesMETA::supportsColocationDiscovery"][::std::mem::offset_of!(
        XrSystemColocationDiscoveryPropertiesMETA,
        supportsColocationDiscovery
    )
        - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSystemSpatialEntityGroupSharingPropertiesMETA {
    pub type_: XrStructureType,
    pub next: *mut ::std::os::raw::c_void,
    pub supportsSpatialEntityGroupSharing: XrBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSystemSpatialEntityGroupSharingPropertiesMETA"]
        [::std::mem::size_of::<XrSystemSpatialEntityGroupSharingPropertiesMETA>() - 24usize];
    ["Alignment of XrSystemSpatialEntityGroupSharingPropertiesMETA"]
        [::std::mem::align_of::<XrSystemSpatialEntityGroupSharingPropertiesMETA>() - 8usize];
    ["Offset of field: XrSystemSpatialEntityGroupSharingPropertiesMETA::type_"]
        [::std::mem::offset_of!(XrSystemSpatialEntityGroupSharingPropertiesMETA, type_) - 0usize];
    ["Offset of field: XrSystemSpatialEntityGroupSharingPropertiesMETA::next"]
        [::std::mem::offset_of!(XrSystemSpatialEntityGroupSharingPropertiesMETA, next) - 8usize];
    ["Offset of field: XrSystemSpatialEntityGroupSharingPropertiesMETA::supportsSpatialEntityGroupSharing"] [:: std :: mem :: offset_of ! (XrSystemSpatialEntityGroupSharingPropertiesMETA , supportsSpatialEntityGroupSharing) - 16usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrShareSpacesRecipientGroupsMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub groupCount: u32,
    pub groups: *mut XrUuid,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrShareSpacesRecipientGroupsMETA"]
        [::std::mem::size_of::<XrShareSpacesRecipientGroupsMETA>() - 32usize];
    ["Alignment of XrShareSpacesRecipientGroupsMETA"]
        [::std::mem::align_of::<XrShareSpacesRecipientGroupsMETA>() - 8usize];
    ["Offset of field: XrShareSpacesRecipientGroupsMETA::type_"]
        [::std::mem::offset_of!(XrShareSpacesRecipientGroupsMETA, type_) - 0usize];
    ["Offset of field: XrShareSpacesRecipientGroupsMETA::next"]
        [::std::mem::offset_of!(XrShareSpacesRecipientGroupsMETA, next) - 8usize];
    ["Offset of field: XrShareSpacesRecipientGroupsMETA::groupCount"]
        [::std::mem::offset_of!(XrShareSpacesRecipientGroupsMETA, groupCount) - 16usize];
    ["Offset of field: XrShareSpacesRecipientGroupsMETA::groups"]
        [::std::mem::offset_of!(XrShareSpacesRecipientGroupsMETA, groups) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XrSpaceGroupUuidFilterInfoMETA {
    pub type_: XrStructureType,
    pub next: *const ::std::os::raw::c_void,
    pub groupUuid: XrUuid,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XrSpaceGroupUuidFilterInfoMETA"]
        [::std::mem::size_of::<XrSpaceGroupUuidFilterInfoMETA>() - 32usize];
    ["Alignment of XrSpaceGroupUuidFilterInfoMETA"]
        [::std::mem::align_of::<XrSpaceGroupUuidFilterInfoMETA>() - 8usize];
    ["Offset of field: XrSpaceGroupUuidFilterInfoMETA::type_"]
        [::std::mem::offset_of!(XrSpaceGroupUuidFilterInfoMETA, type_) - 0usize];
    ["Offset of field: XrSpaceGroupUuidFilterInfoMETA::next"]
        [::std::mem::offset_of!(XrSpaceGroupUuidFilterInfoMETA, next) - 8usize];
    ["Offset of field: XrSpaceGroupUuidFilterInfoMETA::groupUuid"]
        [::std::mem::offset_of!(XrSpaceGroupUuidFilterInfoMETA, groupUuid) - 16usize];
};
